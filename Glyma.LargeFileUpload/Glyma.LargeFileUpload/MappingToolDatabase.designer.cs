#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Glyma.HttpHandlers
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Development-Map-GlymaDB")]
	public partial class MappingToolDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertQueryMapDescriptor(QueryMapDescriptor instance);
    partial void UpdateQueryMapDescriptor(QueryMapDescriptor instance);
    partial void DeleteQueryMapDescriptor(QueryMapDescriptor instance);
    partial void InsertQueryMapMetadata(QueryMapMetadata instance);
    partial void UpdateQueryMapMetadata(QueryMapMetadata instance);
    partial void DeleteQueryMapMetadata(QueryMapMetadata instance);
    partial void InsertQueryMapNode(QueryMapNode instance);
    partial void UpdateQueryMapNode(QueryMapNode instance);
    partial void DeleteQueryMapNode(QueryMapNode instance);
    partial void InsertQueryMapRelationship(QueryMapRelationship instance);
    partial void UpdateQueryMapRelationship(QueryMapRelationship instance);
    partial void DeleteQueryMapRelationship(QueryMapRelationship instance);
    partial void InsertDescriptor(Descriptor instance);
    partial void UpdateDescriptor(Descriptor instance);
    partial void DeleteDescriptor(Descriptor instance);
    partial void InsertRelationship(Relationship instance);
    partial void UpdateRelationship(Relationship instance);
    partial void DeleteRelationship(Relationship instance);
    partial void InsertDescriptorType(DescriptorType instance);
    partial void UpdateDescriptorType(DescriptorType instance);
    partial void DeleteDescriptorType(DescriptorType instance);
    partial void InsertDomain(Domain instance);
    partial void UpdateDomain(Domain instance);
    partial void DeleteDomain(Domain instance);
    partial void InsertMetadata(Metadata instance);
    partial void UpdateMetadata(Metadata instance);
    partial void DeleteMetadata(Metadata instance);
    partial void InsertMetadataType(MetadataType instance);
    partial void UpdateMetadataType(MetadataType instance);
    partial void DeleteMetadataType(MetadataType instance);
    partial void InsertNode(Node instance);
    partial void UpdateNode(Node instance);
    partial void DeleteNode(Node instance);
    partial void InsertNodeType(NodeType instance);
    partial void UpdateNodeType(NodeType instance);
    partial void DeleteNodeType(NodeType instance);
    partial void InsertRelationshipDescriptorPair(RelationshipDescriptorPair instance);
    partial void UpdateRelationshipDescriptorPair(RelationshipDescriptorPair instance);
    partial void DeleteRelationshipDescriptorPair(RelationshipDescriptorPair instance);
    partial void InsertRelationshipType(RelationshipType instance);
    partial void UpdateRelationshipType(RelationshipType instance);
    partial void DeleteRelationshipType(RelationshipType instance);
    #endregion
		
		public MappingToolDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MappingToolDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MappingToolDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MappingToolDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<QueryMapMultiDepthResult> QueryMapMultiDepthResults
		{
			get
			{
				return this.GetTable<QueryMapMultiDepthResult>();
			}
		}
		
		public System.Data.Linq.Table<QueryMapDescriptor> QueryMapDescriptors
		{
			get
			{
				return this.GetTable<QueryMapDescriptor>();
			}
		}
		
		public System.Data.Linq.Table<QueryMapMetadata> QueryMapMetadatas
		{
			get
			{
				return this.GetTable<QueryMapMetadata>();
			}
		}
		
		public System.Data.Linq.Table<QueryMapNode> QueryMapNodes
		{
			get
			{
				return this.GetTable<QueryMapNode>();
			}
		}
		
		public System.Data.Linq.Table<QueryMapRelationship> QueryMapRelationships
		{
			get
			{
				return this.GetTable<QueryMapRelationship>();
			}
		}
		
		public System.Data.Linq.Table<Descriptor> Descriptors
		{
			get
			{
				return this.GetTable<Descriptor>();
			}
		}
		
		public System.Data.Linq.Table<Relationship> Relationships
		{
			get
			{
				return this.GetTable<Relationship>();
			}
		}
		
		public System.Data.Linq.Table<DescriptorType> DescriptorTypes
		{
			get
			{
				return this.GetTable<DescriptorType>();
			}
		}
		
		public System.Data.Linq.Table<Domain> Domains
		{
			get
			{
				return this.GetTable<Domain>();
			}
		}
		
		public System.Data.Linq.Table<Metadata> Metadatas
		{
			get
			{
				return this.GetTable<Metadata>();
			}
		}
		
		public System.Data.Linq.Table<MetadataType> MetadataTypes
		{
			get
			{
				return this.GetTable<MetadataType>();
			}
		}
		
		public System.Data.Linq.Table<Node> Nodes
		{
			get
			{
				return this.GetTable<Node>();
			}
		}
		
		public System.Data.Linq.Table<NodeType> NodeTypes
		{
			get
			{
				return this.GetTable<NodeType>();
			}
		}
		
		public System.Data.Linq.Table<RelationshipDescriptorPair> RelationshipDescriptorPairs
		{
			get
			{
				return this.GetTable<RelationshipDescriptorPair>();
			}
		}
		
		public System.Data.Linq.Table<RelationshipType> RelationshipTypes
		{
			get
			{
				return this.GetTable<RelationshipType>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.QueryMap")]
		public ISingleResult<QueryMapResult> QueryMap([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DomainId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> domainId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NodeId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> nodeId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Depth", DbType="Int")] System.Nullable<int> depth, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FullDomain", DbType="Bit")] System.Nullable<bool> fullDomain)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), domainId, nodeId, depth, fullDomain);
			return ((ISingleResult<QueryMapResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class QueryMapMultiDepthResult
	{
		
		private System.Nullable<System.Guid> _MetadataId;
		
		private System.Nullable<System.Guid> _MetadataTypeUid;
		
		private System.Nullable<System.Guid> _NodeUid;
		
		private System.Nullable<System.Guid> _RelationshipUid;
		
		private System.Nullable<System.Guid> _DescriptorTypeUid;
		
		private string _MetadataName;
		
		private string _MetadataValue;
		
		private string _RelationshipOriginalId;
		
		private System.Nullable<System.Guid> _RelationshipTypeUid;
		
		private System.Nullable<System.Guid> _DomainUid;
		
		private System.Nullable<System.Guid> _DescriptorUid;
		
		private string _NodeOriginalId;
		
		private System.Nullable<System.Guid> _NodeTypeUid;
		
		private System.Nullable<int> _Level;
		
		private System.Nullable<System.Guid> _Origin;
		
		private System.Nullable<System.Guid> _RootMapUid;
		
		public QueryMapMultiDepthResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetadataId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> MetadataId
		{
			get
			{
				return this._MetadataId;
			}
			set
			{
				if ((this._MetadataId != value))
				{
					this._MetadataId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetadataTypeUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> MetadataTypeUid
		{
			get
			{
				return this._MetadataTypeUid;
			}
			set
			{
				if ((this._MetadataTypeUid != value))
				{
					this._MetadataTypeUid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> NodeUid
		{
			get
			{
				return this._NodeUid;
			}
			set
			{
				if ((this._NodeUid != value))
				{
					this._NodeUid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RelationshipUid
		{
			get
			{
				return this._RelationshipUid;
			}
			set
			{
				if ((this._RelationshipUid != value))
				{
					this._RelationshipUid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptorTypeUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DescriptorTypeUid
		{
			get
			{
				return this._DescriptorTypeUid;
			}
			set
			{
				if ((this._DescriptorTypeUid != value))
				{
					this._DescriptorTypeUid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetadataName", DbType="NVarChar(50)")]
		public string MetadataName
		{
			get
			{
				return this._MetadataName;
			}
			set
			{
				if ((this._MetadataName != value))
				{
					this._MetadataName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetadataValue", DbType="NVarChar(MAX)")]
		public string MetadataValue
		{
			get
			{
				return this._MetadataValue;
			}
			set
			{
				if ((this._MetadataValue != value))
				{
					this._MetadataValue = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipOriginalId", DbType="NVarChar(50)")]
		public string RelationshipOriginalId
		{
			get
			{
				return this._RelationshipOriginalId;
			}
			set
			{
				if ((this._RelationshipOriginalId != value))
				{
					this._RelationshipOriginalId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipTypeUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RelationshipTypeUid
		{
			get
			{
				return this._RelationshipTypeUid;
			}
			set
			{
				if ((this._RelationshipTypeUid != value))
				{
					this._RelationshipTypeUid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DomainUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DomainUid
		{
			get
			{
				return this._DomainUid;
			}
			set
			{
				if ((this._DomainUid != value))
				{
					this._DomainUid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptorUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DescriptorUid
		{
			get
			{
				return this._DescriptorUid;
			}
			set
			{
				if ((this._DescriptorUid != value))
				{
					this._DescriptorUid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeOriginalId", DbType="NVarChar(50)")]
		public string NodeOriginalId
		{
			get
			{
				return this._NodeOriginalId;
			}
			set
			{
				if ((this._NodeOriginalId != value))
				{
					this._NodeOriginalId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeTypeUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> NodeTypeUid
		{
			get
			{
				return this._NodeTypeUid;
			}
			set
			{
				if ((this._NodeTypeUid != value))
				{
					this._NodeTypeUid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Level", DbType="Int")]
		public System.Nullable<int> Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this._Level = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Origin", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Origin
		{
			get
			{
				return this._Origin;
			}
			set
			{
				if ((this._Origin != value))
				{
					this._Origin = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RootMapUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RootMapUid
		{
			get
			{
				return this._RootMapUid;
			}
			set
			{
				if ((this._RootMapUid != value))
				{
					this._RootMapUid = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class QueryMapDescriptor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DescriptorUid;
		
		private System.Nullable<System.Guid> _DescriptorTypeUid;
		
		private System.Nullable<System.Guid> _NodeUid;
		
		private System.Nullable<System.Guid> _RelationshipUid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDescriptorUidChanging(System.Guid value);
    partial void OnDescriptorUidChanged();
    partial void OnDescriptorTypeUidChanging(System.Nullable<System.Guid> value);
    partial void OnDescriptorTypeUidChanged();
    partial void OnNodeUidChanging(System.Nullable<System.Guid> value);
    partial void OnNodeUidChanged();
    partial void OnRelationshipUidChanging(System.Nullable<System.Guid> value);
    partial void OnRelationshipUidChanged();
    #endregion
		
		public QueryMapDescriptor()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptorUid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DescriptorUid
		{
			get
			{
				return this._DescriptorUid;
			}
			set
			{
				if ((this._DescriptorUid != value))
				{
					this.OnDescriptorUidChanging(value);
					this.SendPropertyChanging();
					this._DescriptorUid = value;
					this.SendPropertyChanged("DescriptorUid");
					this.OnDescriptorUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptorTypeUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DescriptorTypeUid
		{
			get
			{
				return this._DescriptorTypeUid;
			}
			set
			{
				if ((this._DescriptorTypeUid != value))
				{
					this.OnDescriptorTypeUidChanging(value);
					this.SendPropertyChanging();
					this._DescriptorTypeUid = value;
					this.SendPropertyChanged("DescriptorTypeUid");
					this.OnDescriptorTypeUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> NodeUid
		{
			get
			{
				return this._NodeUid;
			}
			set
			{
				if ((this._NodeUid != value))
				{
					this.OnNodeUidChanging(value);
					this.SendPropertyChanging();
					this._NodeUid = value;
					this.SendPropertyChanged("NodeUid");
					this.OnNodeUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RelationshipUid
		{
			get
			{
				return this._RelationshipUid;
			}
			set
			{
				if ((this._RelationshipUid != value))
				{
					this.OnRelationshipUidChanging(value);
					this.SendPropertyChanging();
					this._RelationshipUid = value;
					this.SendPropertyChanged("RelationshipUid");
					this.OnRelationshipUidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class QueryMapMetadata : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MetadataId;
		
		private System.Nullable<System.Guid> _MetadataTypeUid;
		
		private System.Nullable<System.Guid> _NodeUid;
		
		private System.Nullable<System.Guid> _RelationshipUid;
		
		private System.Nullable<System.Guid> _DescriptorTypeUid;
		
		private string _MetadataName;
		
		private string _MetadataValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMetadataIdChanging(System.Guid value);
    partial void OnMetadataIdChanged();
    partial void OnMetadataTypeUidChanging(System.Nullable<System.Guid> value);
    partial void OnMetadataTypeUidChanged();
    partial void OnNodeUidChanging(System.Nullable<System.Guid> value);
    partial void OnNodeUidChanged();
    partial void OnRelationshipUidChanging(System.Nullable<System.Guid> value);
    partial void OnRelationshipUidChanged();
    partial void OnDescriptorTypeUidChanging(System.Nullable<System.Guid> value);
    partial void OnDescriptorTypeUidChanged();
    partial void OnMetadataNameChanging(string value);
    partial void OnMetadataNameChanged();
    partial void OnMetadataValueChanging(string value);
    partial void OnMetadataValueChanged();
    #endregion
		
		public QueryMapMetadata()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetadataId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MetadataId
		{
			get
			{
				return this._MetadataId;
			}
			set
			{
				if ((this._MetadataId != value))
				{
					this.OnMetadataIdChanging(value);
					this.SendPropertyChanging();
					this._MetadataId = value;
					this.SendPropertyChanged("MetadataId");
					this.OnMetadataIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetadataTypeUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> MetadataTypeUid
		{
			get
			{
				return this._MetadataTypeUid;
			}
			set
			{
				if ((this._MetadataTypeUid != value))
				{
					this.OnMetadataTypeUidChanging(value);
					this.SendPropertyChanging();
					this._MetadataTypeUid = value;
					this.SendPropertyChanged("MetadataTypeUid");
					this.OnMetadataTypeUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> NodeUid
		{
			get
			{
				return this._NodeUid;
			}
			set
			{
				if ((this._NodeUid != value))
				{
					this.OnNodeUidChanging(value);
					this.SendPropertyChanging();
					this._NodeUid = value;
					this.SendPropertyChanged("NodeUid");
					this.OnNodeUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RelationshipUid
		{
			get
			{
				return this._RelationshipUid;
			}
			set
			{
				if ((this._RelationshipUid != value))
				{
					this.OnRelationshipUidChanging(value);
					this.SendPropertyChanging();
					this._RelationshipUid = value;
					this.SendPropertyChanged("RelationshipUid");
					this.OnRelationshipUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptorTypeUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DescriptorTypeUid
		{
			get
			{
				return this._DescriptorTypeUid;
			}
			set
			{
				if ((this._DescriptorTypeUid != value))
				{
					this.OnDescriptorTypeUidChanging(value);
					this.SendPropertyChanging();
					this._DescriptorTypeUid = value;
					this.SendPropertyChanged("DescriptorTypeUid");
					this.OnDescriptorTypeUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetadataName", DbType="NVarChar(50)")]
		public string MetadataName
		{
			get
			{
				return this._MetadataName;
			}
			set
			{
				if ((this._MetadataName != value))
				{
					this.OnMetadataNameChanging(value);
					this.SendPropertyChanging();
					this._MetadataName = value;
					this.SendPropertyChanged("MetadataName");
					this.OnMetadataNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetadataValue", DbType="NVarChar(MAX)")]
		public string MetadataValue
		{
			get
			{
				return this._MetadataValue;
			}
			set
			{
				if ((this._MetadataValue != value))
				{
					this.OnMetadataValueChanging(value);
					this.SendPropertyChanging();
					this._MetadataValue = value;
					this.SendPropertyChanged("MetadataValue");
					this.OnMetadataValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class QueryMapNode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _NodeUid;
		
		private string _NodeOriginalId;
		
		private System.Nullable<System.Guid> _NodeTypeUid;
		
		private System.Nullable<System.Guid> _DomainUid;
		
		private System.Nullable<System.Guid> _RootMapUid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNodeUidChanging(System.Guid value);
    partial void OnNodeUidChanged();
    partial void OnNodeOriginalIdChanging(string value);
    partial void OnNodeOriginalIdChanged();
    partial void OnNodeTypeUidChanging(System.Nullable<System.Guid> value);
    partial void OnNodeTypeUidChanged();
    partial void OnDomainUidChanging(System.Nullable<System.Guid> value);
    partial void OnDomainUidChanged();
    partial void OnRootMapUidChanging(System.Nullable<System.Guid> value);
    partial void OnRootMapUidChanged();
    #endregion
		
		public QueryMapNode()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeUid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NodeUid
		{
			get
			{
				return this._NodeUid;
			}
			set
			{
				if ((this._NodeUid != value))
				{
					this.OnNodeUidChanging(value);
					this.SendPropertyChanging();
					this._NodeUid = value;
					this.SendPropertyChanged("NodeUid");
					this.OnNodeUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeOriginalId", DbType="NVarChar(50)")]
		public string NodeOriginalId
		{
			get
			{
				return this._NodeOriginalId;
			}
			set
			{
				if ((this._NodeOriginalId != value))
				{
					this.OnNodeOriginalIdChanging(value);
					this.SendPropertyChanging();
					this._NodeOriginalId = value;
					this.SendPropertyChanged("NodeOriginalId");
					this.OnNodeOriginalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeTypeUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> NodeTypeUid
		{
			get
			{
				return this._NodeTypeUid;
			}
			set
			{
				if ((this._NodeTypeUid != value))
				{
					this.OnNodeTypeUidChanging(value);
					this.SendPropertyChanging();
					this._NodeTypeUid = value;
					this.SendPropertyChanged("NodeTypeUid");
					this.OnNodeTypeUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DomainUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DomainUid
		{
			get
			{
				return this._DomainUid;
			}
			set
			{
				if ((this._DomainUid != value))
				{
					this.OnDomainUidChanging(value);
					this.SendPropertyChanging();
					this._DomainUid = value;
					this.SendPropertyChanged("DomainUid");
					this.OnDomainUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RootMapUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RootMapUid
		{
			get
			{
				return this._RootMapUid;
			}
			set
			{
				if ((this._RootMapUid != value))
				{
					this.OnRootMapUidChanging(value);
					this.SendPropertyChanging();
					this._RootMapUid = value;
					this.SendPropertyChanged("RootMapUid");
					this.OnRootMapUidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class QueryMapRelationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RelationshipUid;
		
		private string _RelationshipOriginalId;
		
		private System.Nullable<System.Guid> _RelationshipTypeUid;
		
		private System.Nullable<System.Guid> _DomainUid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationshipUidChanging(System.Guid value);
    partial void OnRelationshipUidChanged();
    partial void OnRelationshipOriginalIdChanging(string value);
    partial void OnRelationshipOriginalIdChanged();
    partial void OnRelationshipTypeUidChanging(System.Nullable<System.Guid> value);
    partial void OnRelationshipTypeUidChanged();
    partial void OnDomainUidChanging(System.Nullable<System.Guid> value);
    partial void OnDomainUidChanged();
    #endregion
		
		public QueryMapRelationship()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipUid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RelationshipUid
		{
			get
			{
				return this._RelationshipUid;
			}
			set
			{
				if ((this._RelationshipUid != value))
				{
					this.OnRelationshipUidChanging(value);
					this.SendPropertyChanging();
					this._RelationshipUid = value;
					this.SendPropertyChanged("RelationshipUid");
					this.OnRelationshipUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipOriginalId", DbType="NVarChar(50)")]
		public string RelationshipOriginalId
		{
			get
			{
				return this._RelationshipOriginalId;
			}
			set
			{
				if ((this._RelationshipOriginalId != value))
				{
					this.OnRelationshipOriginalIdChanging(value);
					this.SendPropertyChanging();
					this._RelationshipOriginalId = value;
					this.SendPropertyChanged("RelationshipOriginalId");
					this.OnRelationshipOriginalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipTypeUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RelationshipTypeUid
		{
			get
			{
				return this._RelationshipTypeUid;
			}
			set
			{
				if ((this._RelationshipTypeUid != value))
				{
					this.OnRelationshipTypeUidChanging(value);
					this.SendPropertyChanging();
					this._RelationshipTypeUid = value;
					this.SendPropertyChanged("RelationshipTypeUid");
					this.OnRelationshipTypeUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DomainUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DomainUid
		{
			get
			{
				return this._DomainUid;
			}
			set
			{
				if ((this._DomainUid != value))
				{
					this.OnDomainUidChanging(value);
					this.SendPropertyChanging();
					this._DomainUid = value;
					this.SendPropertyChanged("DomainUid");
					this.OnDomainUidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Descriptors")]
	public partial class Descriptor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DescriptorUid;
		
		private System.Nullable<System.Guid> _DescriptorTypeUid;
		
		private System.Nullable<System.Guid> _NodeUid;
		
		private System.Nullable<System.Guid> _RelationshipUid;
		
		private EntityRef<Relationship> _Relationship;
		
		private EntityRef<DescriptorType> _DescriptorType;
		
		private EntityRef<Node> _Node;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDescriptorUidChanging(System.Guid value);
    partial void OnDescriptorUidChanged();
    partial void OnDescriptorTypeUidChanging(System.Nullable<System.Guid> value);
    partial void OnDescriptorTypeUidChanged();
    partial void OnNodeUidChanging(System.Nullable<System.Guid> value);
    partial void OnNodeUidChanged();
    partial void OnRelationshipUidChanging(System.Nullable<System.Guid> value);
    partial void OnRelationshipUidChanged();
    #endregion
		
		public Descriptor()
		{
			this._Relationship = default(EntityRef<Relationship>);
			this._DescriptorType = default(EntityRef<DescriptorType>);
			this._Node = default(EntityRef<Node>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptorUid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DescriptorUid
		{
			get
			{
				return this._DescriptorUid;
			}
			set
			{
				if ((this._DescriptorUid != value))
				{
					this.OnDescriptorUidChanging(value);
					this.SendPropertyChanging();
					this._DescriptorUid = value;
					this.SendPropertyChanged("DescriptorUid");
					this.OnDescriptorUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptorTypeUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DescriptorTypeUid
		{
			get
			{
				return this._DescriptorTypeUid;
			}
			set
			{
				if ((this._DescriptorTypeUid != value))
				{
					if (this._DescriptorType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDescriptorTypeUidChanging(value);
					this.SendPropertyChanging();
					this._DescriptorTypeUid = value;
					this.SendPropertyChanged("DescriptorTypeUid");
					this.OnDescriptorTypeUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> NodeUid
		{
			get
			{
				return this._NodeUid;
			}
			set
			{
				if ((this._NodeUid != value))
				{
					if (this._Node.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNodeUidChanging(value);
					this.SendPropertyChanging();
					this._NodeUid = value;
					this.SendPropertyChanged("NodeUid");
					this.OnNodeUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RelationshipUid
		{
			get
			{
				return this._RelationshipUid;
			}
			set
			{
				if ((this._RelationshipUid != value))
				{
					if (this._Relationship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelationshipUidChanging(value);
					this.SendPropertyChanging();
					this._RelationshipUid = value;
					this.SendPropertyChanged("RelationshipUid");
					this.OnRelationshipUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Relationship_Descriptor", Storage="_Relationship", ThisKey="RelationshipUid", OtherKey="RelationshipUid", IsForeignKey=true)]
		public Relationship Relationship
		{
			get
			{
				return this._Relationship.Entity;
			}
			set
			{
				Relationship previousValue = this._Relationship.Entity;
				if (((previousValue != value) 
							|| (this._Relationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Relationship.Entity = null;
						previousValue.Descriptors.Remove(this);
					}
					this._Relationship.Entity = value;
					if ((value != null))
					{
						value.Descriptors.Add(this);
						this._RelationshipUid = value.RelationshipUid;
					}
					else
					{
						this._RelationshipUid = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Relationship");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DescriptorType_Descriptor", Storage="_DescriptorType", ThisKey="DescriptorTypeUid", OtherKey="DescriptorTypeUid", IsForeignKey=true)]
		public DescriptorType DescriptorType
		{
			get
			{
				return this._DescriptorType.Entity;
			}
			set
			{
				DescriptorType previousValue = this._DescriptorType.Entity;
				if (((previousValue != value) 
							|| (this._DescriptorType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DescriptorType.Entity = null;
						previousValue.Descriptors.Remove(this);
					}
					this._DescriptorType.Entity = value;
					if ((value != null))
					{
						value.Descriptors.Add(this);
						this._DescriptorTypeUid = value.DescriptorTypeUid;
					}
					else
					{
						this._DescriptorTypeUid = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("DescriptorType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Node_Descriptor", Storage="_Node", ThisKey="NodeUid", OtherKey="NodeUid", IsForeignKey=true)]
		public Node Node
		{
			get
			{
				return this._Node.Entity;
			}
			set
			{
				Node previousValue = this._Node.Entity;
				if (((previousValue != value) 
							|| (this._Node.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Node.Entity = null;
						previousValue.Descriptors.Remove(this);
					}
					this._Node.Entity = value;
					if ((value != null))
					{
						value.Descriptors.Add(this);
						this._NodeUid = value.NodeUid;
					}
					else
					{
						this._NodeUid = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Node");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Relationships")]
	public partial class Relationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RelationshipUid;
		
		private string _RelationshipOriginalId;
		
		private System.Nullable<System.Guid> _RelationshipTypeUid;
		
		private System.Nullable<System.Guid> _DomainUid;
		
		private System.Nullable<System.Guid> _RootMapUid;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _CreatedBy;
		
		private string _ModifiedBy;
		
		private EntitySet<Descriptor> _Descriptors;
		
		private EntitySet<Metadata> _Metadatas;
		
		private EntityRef<Domain> _Domain;
		
		private EntityRef<Node> _Node;
		
		private EntityRef<RelationshipType> _RelationshipType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationshipUidChanging(System.Guid value);
    partial void OnRelationshipUidChanged();
    partial void OnRelationshipOriginalIdChanging(string value);
    partial void OnRelationshipOriginalIdChanged();
    partial void OnRelationshipTypeUidChanging(System.Nullable<System.Guid> value);
    partial void OnRelationshipTypeUidChanged();
    partial void OnDomainUidChanging(System.Nullable<System.Guid> value);
    partial void OnDomainUidChanged();
    partial void OnRootMapUidChanging(System.Nullable<System.Guid> value);
    partial void OnRootMapUidChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Relationship()
		{
			this._Descriptors = new EntitySet<Descriptor>(new Action<Descriptor>(this.attach_Descriptors), new Action<Descriptor>(this.detach_Descriptors));
			this._Metadatas = new EntitySet<Metadata>(new Action<Metadata>(this.attach_Metadatas), new Action<Metadata>(this.detach_Metadatas));
			this._Domain = default(EntityRef<Domain>);
			this._Node = default(EntityRef<Node>);
			this._RelationshipType = default(EntityRef<RelationshipType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipUid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RelationshipUid
		{
			get
			{
				return this._RelationshipUid;
			}
			set
			{
				if ((this._RelationshipUid != value))
				{
					this.OnRelationshipUidChanging(value);
					this.SendPropertyChanging();
					this._RelationshipUid = value;
					this.SendPropertyChanged("RelationshipUid");
					this.OnRelationshipUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipOriginalId", DbType="NVarChar(50)")]
		public string RelationshipOriginalId
		{
			get
			{
				return this._RelationshipOriginalId;
			}
			set
			{
				if ((this._RelationshipOriginalId != value))
				{
					this.OnRelationshipOriginalIdChanging(value);
					this.SendPropertyChanging();
					this._RelationshipOriginalId = value;
					this.SendPropertyChanged("RelationshipOriginalId");
					this.OnRelationshipOriginalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipTypeUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RelationshipTypeUid
		{
			get
			{
				return this._RelationshipTypeUid;
			}
			set
			{
				if ((this._RelationshipTypeUid != value))
				{
					if (this._RelationshipType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelationshipTypeUidChanging(value);
					this.SendPropertyChanging();
					this._RelationshipTypeUid = value;
					this.SendPropertyChanged("RelationshipTypeUid");
					this.OnRelationshipTypeUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DomainUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DomainUid
		{
			get
			{
				return this._DomainUid;
			}
			set
			{
				if ((this._DomainUid != value))
				{
					if (this._Domain.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDomainUidChanging(value);
					this.SendPropertyChanging();
					this._DomainUid = value;
					this.SendPropertyChanged("DomainUid");
					this.OnDomainUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RootMapUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RootMapUid
		{
			get
			{
				return this._RootMapUid;
			}
			set
			{
				if ((this._RootMapUid != value))
				{
					if (this._Node.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRootMapUidChanging(value);
					this.SendPropertyChanging();
					this._RootMapUid = value;
					this.SendPropertyChanged("RootMapUid");
					this.OnRootMapUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(100)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Relationship_Descriptor", Storage="_Descriptors", ThisKey="RelationshipUid", OtherKey="RelationshipUid")]
		public EntitySet<Descriptor> Descriptors
		{
			get
			{
				return this._Descriptors;
			}
			set
			{
				this._Descriptors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Relationship_Metadata", Storage="_Metadatas", ThisKey="RelationshipUid", OtherKey="RelationshipUid")]
		public EntitySet<Metadata> Metadatas
		{
			get
			{
				return this._Metadatas;
			}
			set
			{
				this._Metadatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Domain_Relationship", Storage="_Domain", ThisKey="DomainUid", OtherKey="DomainUid", IsForeignKey=true)]
		public Domain Domain
		{
			get
			{
				return this._Domain.Entity;
			}
			set
			{
				Domain previousValue = this._Domain.Entity;
				if (((previousValue != value) 
							|| (this._Domain.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Domain.Entity = null;
						previousValue.Relationships.Remove(this);
					}
					this._Domain.Entity = value;
					if ((value != null))
					{
						value.Relationships.Add(this);
						this._DomainUid = value.DomainUid;
					}
					else
					{
						this._DomainUid = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Domain");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Node_Relationship", Storage="_Node", ThisKey="RootMapUid", OtherKey="NodeUid", IsForeignKey=true)]
		public Node Node
		{
			get
			{
				return this._Node.Entity;
			}
			set
			{
				Node previousValue = this._Node.Entity;
				if (((previousValue != value) 
							|| (this._Node.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Node.Entity = null;
						previousValue.Relationships.Remove(this);
					}
					this._Node.Entity = value;
					if ((value != null))
					{
						value.Relationships.Add(this);
						this._RootMapUid = value.NodeUid;
					}
					else
					{
						this._RootMapUid = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Node");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RelationshipType_Relationship", Storage="_RelationshipType", ThisKey="RelationshipTypeUid", OtherKey="RelationshipTypeUid", IsForeignKey=true)]
		public RelationshipType RelationshipType
		{
			get
			{
				return this._RelationshipType.Entity;
			}
			set
			{
				RelationshipType previousValue = this._RelationshipType.Entity;
				if (((previousValue != value) 
							|| (this._RelationshipType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RelationshipType.Entity = null;
						previousValue.Relationships.Remove(this);
					}
					this._RelationshipType.Entity = value;
					if ((value != null))
					{
						value.Relationships.Add(this);
						this._RelationshipTypeUid = value.RelationshipTypeUid;
					}
					else
					{
						this._RelationshipTypeUid = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("RelationshipType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Descriptors(Descriptor entity)
		{
			this.SendPropertyChanging();
			entity.Relationship = this;
		}
		
		private void detach_Descriptors(Descriptor entity)
		{
			this.SendPropertyChanging();
			entity.Relationship = null;
		}
		
		private void attach_Metadatas(Metadata entity)
		{
			this.SendPropertyChanging();
			entity.Relationship = this;
		}
		
		private void detach_Metadatas(Metadata entity)
		{
			this.SendPropertyChanging();
			entity.Relationship = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DescriptorTypes")]
	public partial class DescriptorType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DescriptorTypeUid;
		
		private string _DescriptorTypeName;
		
		private EntitySet<Descriptor> _Descriptors;
		
		private EntitySet<Metadata> _Metadatas;
		
		private EntitySet<RelationshipDescriptorPair> _RelationshipDescriptorPairs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDescriptorTypeUidChanging(System.Guid value);
    partial void OnDescriptorTypeUidChanged();
    partial void OnDescriptorTypeNameChanging(string value);
    partial void OnDescriptorTypeNameChanged();
    #endregion
		
		public DescriptorType()
		{
			this._Descriptors = new EntitySet<Descriptor>(new Action<Descriptor>(this.attach_Descriptors), new Action<Descriptor>(this.detach_Descriptors));
			this._Metadatas = new EntitySet<Metadata>(new Action<Metadata>(this.attach_Metadatas), new Action<Metadata>(this.detach_Metadatas));
			this._RelationshipDescriptorPairs = new EntitySet<RelationshipDescriptorPair>(new Action<RelationshipDescriptorPair>(this.attach_RelationshipDescriptorPairs), new Action<RelationshipDescriptorPair>(this.detach_RelationshipDescriptorPairs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptorTypeUid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DescriptorTypeUid
		{
			get
			{
				return this._DescriptorTypeUid;
			}
			set
			{
				if ((this._DescriptorTypeUid != value))
				{
					this.OnDescriptorTypeUidChanging(value);
					this.SendPropertyChanging();
					this._DescriptorTypeUid = value;
					this.SendPropertyChanged("DescriptorTypeUid");
					this.OnDescriptorTypeUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptorTypeName", DbType="NVarChar(50)")]
		public string DescriptorTypeName
		{
			get
			{
				return this._DescriptorTypeName;
			}
			set
			{
				if ((this._DescriptorTypeName != value))
				{
					this.OnDescriptorTypeNameChanging(value);
					this.SendPropertyChanging();
					this._DescriptorTypeName = value;
					this.SendPropertyChanged("DescriptorTypeName");
					this.OnDescriptorTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DescriptorType_Descriptor", Storage="_Descriptors", ThisKey="DescriptorTypeUid", OtherKey="DescriptorTypeUid")]
		public EntitySet<Descriptor> Descriptors
		{
			get
			{
				return this._Descriptors;
			}
			set
			{
				this._Descriptors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DescriptorType_Metadata", Storage="_Metadatas", ThisKey="DescriptorTypeUid", OtherKey="DescriptorTypeUid")]
		public EntitySet<Metadata> Metadatas
		{
			get
			{
				return this._Metadatas;
			}
			set
			{
				this._Metadatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DescriptorType_RelationshipDescriptorPair", Storage="_RelationshipDescriptorPairs", ThisKey="DescriptorTypeUid", OtherKey="DescriptorTypeUid")]
		public EntitySet<RelationshipDescriptorPair> RelationshipDescriptorPairs
		{
			get
			{
				return this._RelationshipDescriptorPairs;
			}
			set
			{
				this._RelationshipDescriptorPairs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Descriptors(Descriptor entity)
		{
			this.SendPropertyChanging();
			entity.DescriptorType = this;
		}
		
		private void detach_Descriptors(Descriptor entity)
		{
			this.SendPropertyChanging();
			entity.DescriptorType = null;
		}
		
		private void attach_Metadatas(Metadata entity)
		{
			this.SendPropertyChanging();
			entity.DescriptorType = this;
		}
		
		private void detach_Metadatas(Metadata entity)
		{
			this.SendPropertyChanging();
			entity.DescriptorType = null;
		}
		
		private void attach_RelationshipDescriptorPairs(RelationshipDescriptorPair entity)
		{
			this.SendPropertyChanging();
			entity.DescriptorType = this;
		}
		
		private void detach_RelationshipDescriptorPairs(RelationshipDescriptorPair entity)
		{
			this.SendPropertyChanging();
			entity.DescriptorType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Domains")]
	public partial class Domain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DomainUid;
		
		private string _DomainOriginalId;
		
		private EntitySet<Relationship> _Relationships;
		
		private EntitySet<Metadata> _Metadatas;
		
		private EntitySet<Node> _Nodes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDomainUidChanging(System.Guid value);
    partial void OnDomainUidChanged();
    partial void OnDomainOriginalIdChanging(string value);
    partial void OnDomainOriginalIdChanged();
    #endregion
		
		public Domain()
		{
			this._Relationships = new EntitySet<Relationship>(new Action<Relationship>(this.attach_Relationships), new Action<Relationship>(this.detach_Relationships));
			this._Metadatas = new EntitySet<Metadata>(new Action<Metadata>(this.attach_Metadatas), new Action<Metadata>(this.detach_Metadatas));
			this._Nodes = new EntitySet<Node>(new Action<Node>(this.attach_Nodes), new Action<Node>(this.detach_Nodes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DomainUid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DomainUid
		{
			get
			{
				return this._DomainUid;
			}
			set
			{
				if ((this._DomainUid != value))
				{
					this.OnDomainUidChanging(value);
					this.SendPropertyChanging();
					this._DomainUid = value;
					this.SendPropertyChanged("DomainUid");
					this.OnDomainUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DomainOriginalId", DbType="NVarChar(50)")]
		public string DomainOriginalId
		{
			get
			{
				return this._DomainOriginalId;
			}
			set
			{
				if ((this._DomainOriginalId != value))
				{
					this.OnDomainOriginalIdChanging(value);
					this.SendPropertyChanging();
					this._DomainOriginalId = value;
					this.SendPropertyChanged("DomainOriginalId");
					this.OnDomainOriginalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Domain_Relationship", Storage="_Relationships", ThisKey="DomainUid", OtherKey="DomainUid")]
		public EntitySet<Relationship> Relationships
		{
			get
			{
				return this._Relationships;
			}
			set
			{
				this._Relationships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Domain_Metadata", Storage="_Metadatas", ThisKey="DomainUid", OtherKey="DomainUid")]
		public EntitySet<Metadata> Metadatas
		{
			get
			{
				return this._Metadatas;
			}
			set
			{
				this._Metadatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Domain_Node", Storage="_Nodes", ThisKey="DomainUid", OtherKey="DomainUid")]
		public EntitySet<Node> Nodes
		{
			get
			{
				return this._Nodes;
			}
			set
			{
				this._Nodes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.Domain = this;
		}
		
		private void detach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.Domain = null;
		}
		
		private void attach_Metadatas(Metadata entity)
		{
			this.SendPropertyChanging();
			entity.Domain = this;
		}
		
		private void detach_Metadatas(Metadata entity)
		{
			this.SendPropertyChanging();
			entity.Domain = null;
		}
		
		private void attach_Nodes(Node entity)
		{
			this.SendPropertyChanging();
			entity.Domain = this;
		}
		
		private void detach_Nodes(Node entity)
		{
			this.SendPropertyChanging();
			entity.Domain = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Metadata")]
	public partial class Metadata : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MetadataId;
		
		private System.Nullable<System.Guid> _MetadataTypeUid;
		
		private System.Nullable<System.Guid> _NodeUid;
		
		private System.Nullable<System.Guid> _RelationshipUid;
		
		private System.Nullable<System.Guid> _DescriptorTypeUid;
		
		private string _MetadataName;
		
		private string _MetadataValue;
		
		private System.Nullable<System.Guid> _RootMapUid;
		
		private System.Nullable<System.Guid> _DomainUid;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _CreatedBy;
		
		private string _ModifiedBy;
		
		private EntityRef<DescriptorType> _DescriptorType;
		
		private EntityRef<Domain> _Domain;
		
		private EntityRef<Relationship> _Relationship;
		
		private EntityRef<MetadataType> _MetadataType;
		
		private EntityRef<Node> _Node;
		
		private EntityRef<Node> _Node1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMetadataIdChanging(System.Guid value);
    partial void OnMetadataIdChanged();
    partial void OnMetadataTypeUidChanging(System.Nullable<System.Guid> value);
    partial void OnMetadataTypeUidChanged();
    partial void OnNodeUidChanging(System.Nullable<System.Guid> value);
    partial void OnNodeUidChanged();
    partial void OnRelationshipUidChanging(System.Nullable<System.Guid> value);
    partial void OnRelationshipUidChanged();
    partial void OnDescriptorTypeUidChanging(System.Nullable<System.Guid> value);
    partial void OnDescriptorTypeUidChanged();
    partial void OnMetadataNameChanging(string value);
    partial void OnMetadataNameChanged();
    partial void OnMetadataValueChanging(string value);
    partial void OnMetadataValueChanged();
    partial void OnRootMapUidChanging(System.Nullable<System.Guid> value);
    partial void OnRootMapUidChanged();
    partial void OnDomainUidChanging(System.Nullable<System.Guid> value);
    partial void OnDomainUidChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Metadata()
		{
			this._DescriptorType = default(EntityRef<DescriptorType>);
			this._Domain = default(EntityRef<Domain>);
			this._Relationship = default(EntityRef<Relationship>);
			this._MetadataType = default(EntityRef<MetadataType>);
			this._Node = default(EntityRef<Node>);
			this._Node1 = default(EntityRef<Node>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetadataId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MetadataId
		{
			get
			{
				return this._MetadataId;
			}
			set
			{
				if ((this._MetadataId != value))
				{
					this.OnMetadataIdChanging(value);
					this.SendPropertyChanging();
					this._MetadataId = value;
					this.SendPropertyChanged("MetadataId");
					this.OnMetadataIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetadataTypeUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> MetadataTypeUid
		{
			get
			{
				return this._MetadataTypeUid;
			}
			set
			{
				if ((this._MetadataTypeUid != value))
				{
					if (this._MetadataType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetadataTypeUidChanging(value);
					this.SendPropertyChanging();
					this._MetadataTypeUid = value;
					this.SendPropertyChanged("MetadataTypeUid");
					this.OnMetadataTypeUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> NodeUid
		{
			get
			{
				return this._NodeUid;
			}
			set
			{
				if ((this._NodeUid != value))
				{
					if (this._Node.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNodeUidChanging(value);
					this.SendPropertyChanging();
					this._NodeUid = value;
					this.SendPropertyChanged("NodeUid");
					this.OnNodeUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RelationshipUid
		{
			get
			{
				return this._RelationshipUid;
			}
			set
			{
				if ((this._RelationshipUid != value))
				{
					if (this._Relationship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelationshipUidChanging(value);
					this.SendPropertyChanging();
					this._RelationshipUid = value;
					this.SendPropertyChanged("RelationshipUid");
					this.OnRelationshipUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptorTypeUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DescriptorTypeUid
		{
			get
			{
				return this._DescriptorTypeUid;
			}
			set
			{
				if ((this._DescriptorTypeUid != value))
				{
					if (this._DescriptorType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDescriptorTypeUidChanging(value);
					this.SendPropertyChanging();
					this._DescriptorTypeUid = value;
					this.SendPropertyChanged("DescriptorTypeUid");
					this.OnDescriptorTypeUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetadataName", DbType="NVarChar(50)")]
		public string MetadataName
		{
			get
			{
				return this._MetadataName;
			}
			set
			{
				if ((this._MetadataName != value))
				{
					this.OnMetadataNameChanging(value);
					this.SendPropertyChanging();
					this._MetadataName = value;
					this.SendPropertyChanged("MetadataName");
					this.OnMetadataNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetadataValue", DbType="NVarChar(MAX)")]
		public string MetadataValue
		{
			get
			{
				return this._MetadataValue;
			}
			set
			{
				if ((this._MetadataValue != value))
				{
					this.OnMetadataValueChanging(value);
					this.SendPropertyChanging();
					this._MetadataValue = value;
					this.SendPropertyChanged("MetadataValue");
					this.OnMetadataValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RootMapUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RootMapUid
		{
			get
			{
				return this._RootMapUid;
			}
			set
			{
				if ((this._RootMapUid != value))
				{
					if (this._Node1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRootMapUidChanging(value);
					this.SendPropertyChanging();
					this._RootMapUid = value;
					this.SendPropertyChanged("RootMapUid");
					this.OnRootMapUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DomainUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DomainUid
		{
			get
			{
				return this._DomainUid;
			}
			set
			{
				if ((this._DomainUid != value))
				{
					if (this._Domain.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDomainUidChanging(value);
					this.SendPropertyChanging();
					this._DomainUid = value;
					this.SendPropertyChanged("DomainUid");
					this.OnDomainUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(100)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DescriptorType_Metadata", Storage="_DescriptorType", ThisKey="DescriptorTypeUid", OtherKey="DescriptorTypeUid", IsForeignKey=true)]
		public DescriptorType DescriptorType
		{
			get
			{
				return this._DescriptorType.Entity;
			}
			set
			{
				DescriptorType previousValue = this._DescriptorType.Entity;
				if (((previousValue != value) 
							|| (this._DescriptorType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DescriptorType.Entity = null;
						previousValue.Metadatas.Remove(this);
					}
					this._DescriptorType.Entity = value;
					if ((value != null))
					{
						value.Metadatas.Add(this);
						this._DescriptorTypeUid = value.DescriptorTypeUid;
					}
					else
					{
						this._DescriptorTypeUid = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("DescriptorType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Domain_Metadata", Storage="_Domain", ThisKey="DomainUid", OtherKey="DomainUid", IsForeignKey=true)]
		public Domain Domain
		{
			get
			{
				return this._Domain.Entity;
			}
			set
			{
				Domain previousValue = this._Domain.Entity;
				if (((previousValue != value) 
							|| (this._Domain.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Domain.Entity = null;
						previousValue.Metadatas.Remove(this);
					}
					this._Domain.Entity = value;
					if ((value != null))
					{
						value.Metadatas.Add(this);
						this._DomainUid = value.DomainUid;
					}
					else
					{
						this._DomainUid = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Domain");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Relationship_Metadata", Storage="_Relationship", ThisKey="RelationshipUid", OtherKey="RelationshipUid", IsForeignKey=true)]
		public Relationship Relationship
		{
			get
			{
				return this._Relationship.Entity;
			}
			set
			{
				Relationship previousValue = this._Relationship.Entity;
				if (((previousValue != value) 
							|| (this._Relationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Relationship.Entity = null;
						previousValue.Metadatas.Remove(this);
					}
					this._Relationship.Entity = value;
					if ((value != null))
					{
						value.Metadatas.Add(this);
						this._RelationshipUid = value.RelationshipUid;
					}
					else
					{
						this._RelationshipUid = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Relationship");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MetadataType_Metadata", Storage="_MetadataType", ThisKey="MetadataTypeUid", OtherKey="MetadataTypeUid", IsForeignKey=true)]
		public MetadataType MetadataType
		{
			get
			{
				return this._MetadataType.Entity;
			}
			set
			{
				MetadataType previousValue = this._MetadataType.Entity;
				if (((previousValue != value) 
							|| (this._MetadataType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MetadataType.Entity = null;
						previousValue.Metadatas.Remove(this);
					}
					this._MetadataType.Entity = value;
					if ((value != null))
					{
						value.Metadatas.Add(this);
						this._MetadataTypeUid = value.MetadataTypeUid;
					}
					else
					{
						this._MetadataTypeUid = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("MetadataType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Node_Metadata", Storage="_Node", ThisKey="NodeUid", OtherKey="NodeUid", IsForeignKey=true)]
		public Node Node
		{
			get
			{
				return this._Node.Entity;
			}
			set
			{
				Node previousValue = this._Node.Entity;
				if (((previousValue != value) 
							|| (this._Node.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Node.Entity = null;
						previousValue.Metadatas.Remove(this);
					}
					this._Node.Entity = value;
					if ((value != null))
					{
						value.Metadatas.Add(this);
						this._NodeUid = value.NodeUid;
					}
					else
					{
						this._NodeUid = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Node");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Node_Metadata1", Storage="_Node1", ThisKey="RootMapUid", OtherKey="NodeUid", IsForeignKey=true)]
		public Node Node1
		{
			get
			{
				return this._Node1.Entity;
			}
			set
			{
				Node previousValue = this._Node1.Entity;
				if (((previousValue != value) 
							|| (this._Node1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Node1.Entity = null;
						previousValue.Metadatas1.Remove(this);
					}
					this._Node1.Entity = value;
					if ((value != null))
					{
						value.Metadatas1.Add(this);
						this._RootMapUid = value.NodeUid;
					}
					else
					{
						this._RootMapUid = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Node1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MetadataTypes")]
	public partial class MetadataType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MetadataTypeUid;
		
		private string _MetadataTypeName;
		
		private EntitySet<Metadata> _Metadatas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMetadataTypeUidChanging(System.Guid value);
    partial void OnMetadataTypeUidChanged();
    partial void OnMetadataTypeNameChanging(string value);
    partial void OnMetadataTypeNameChanged();
    #endregion
		
		public MetadataType()
		{
			this._Metadatas = new EntitySet<Metadata>(new Action<Metadata>(this.attach_Metadatas), new Action<Metadata>(this.detach_Metadatas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetadataTypeUid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MetadataTypeUid
		{
			get
			{
				return this._MetadataTypeUid;
			}
			set
			{
				if ((this._MetadataTypeUid != value))
				{
					this.OnMetadataTypeUidChanging(value);
					this.SendPropertyChanging();
					this._MetadataTypeUid = value;
					this.SendPropertyChanged("MetadataTypeUid");
					this.OnMetadataTypeUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetadataTypeName", DbType="NVarChar(50)")]
		public string MetadataTypeName
		{
			get
			{
				return this._MetadataTypeName;
			}
			set
			{
				if ((this._MetadataTypeName != value))
				{
					this.OnMetadataTypeNameChanging(value);
					this.SendPropertyChanging();
					this._MetadataTypeName = value;
					this.SendPropertyChanged("MetadataTypeName");
					this.OnMetadataTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MetadataType_Metadata", Storage="_Metadatas", ThisKey="MetadataTypeUid", OtherKey="MetadataTypeUid")]
		public EntitySet<Metadata> Metadatas
		{
			get
			{
				return this._Metadatas;
			}
			set
			{
				this._Metadatas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Metadatas(Metadata entity)
		{
			this.SendPropertyChanging();
			entity.MetadataType = this;
		}
		
		private void detach_Metadatas(Metadata entity)
		{
			this.SendPropertyChanging();
			entity.MetadataType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Nodes")]
	public partial class Node : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _NodeUid;
		
		private string _NodeOriginalId;
		
		private System.Nullable<System.Guid> _NodeTypeUid;
		
		private System.Nullable<System.Guid> _DomainUid;
		
		private System.Nullable<System.Guid> _RootMapUid;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _CreatedBy;
		
		private string _ModifiedBy;
		
		private EntitySet<Descriptor> _Descriptors;
		
		private EntitySet<Relationship> _Relationships;
		
		private EntitySet<Metadata> _Metadatas;
		
		private EntitySet<Metadata> _Metadatas1;
		
		private EntitySet<Node> _Nodes;
		
		private EntityRef<Domain> _Domain;
		
		private EntityRef<Node> _Node1;
		
		private EntityRef<NodeType> _NodeType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNodeUidChanging(System.Guid value);
    partial void OnNodeUidChanged();
    partial void OnNodeOriginalIdChanging(string value);
    partial void OnNodeOriginalIdChanged();
    partial void OnNodeTypeUidChanging(System.Nullable<System.Guid> value);
    partial void OnNodeTypeUidChanged();
    partial void OnDomainUidChanging(System.Nullable<System.Guid> value);
    partial void OnDomainUidChanged();
    partial void OnRootMapUidChanging(System.Nullable<System.Guid> value);
    partial void OnRootMapUidChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Node()
		{
			this._Descriptors = new EntitySet<Descriptor>(new Action<Descriptor>(this.attach_Descriptors), new Action<Descriptor>(this.detach_Descriptors));
			this._Relationships = new EntitySet<Relationship>(new Action<Relationship>(this.attach_Relationships), new Action<Relationship>(this.detach_Relationships));
			this._Metadatas = new EntitySet<Metadata>(new Action<Metadata>(this.attach_Metadatas), new Action<Metadata>(this.detach_Metadatas));
			this._Metadatas1 = new EntitySet<Metadata>(new Action<Metadata>(this.attach_Metadatas1), new Action<Metadata>(this.detach_Metadatas1));
			this._Nodes = new EntitySet<Node>(new Action<Node>(this.attach_Nodes), new Action<Node>(this.detach_Nodes));
			this._Domain = default(EntityRef<Domain>);
			this._Node1 = default(EntityRef<Node>);
			this._NodeType = default(EntityRef<NodeType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeUid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NodeUid
		{
			get
			{
				return this._NodeUid;
			}
			set
			{
				if ((this._NodeUid != value))
				{
					this.OnNodeUidChanging(value);
					this.SendPropertyChanging();
					this._NodeUid = value;
					this.SendPropertyChanged("NodeUid");
					this.OnNodeUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeOriginalId", DbType="NVarChar(50)")]
		public string NodeOriginalId
		{
			get
			{
				return this._NodeOriginalId;
			}
			set
			{
				if ((this._NodeOriginalId != value))
				{
					this.OnNodeOriginalIdChanging(value);
					this.SendPropertyChanging();
					this._NodeOriginalId = value;
					this.SendPropertyChanged("NodeOriginalId");
					this.OnNodeOriginalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeTypeUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> NodeTypeUid
		{
			get
			{
				return this._NodeTypeUid;
			}
			set
			{
				if ((this._NodeTypeUid != value))
				{
					if (this._NodeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNodeTypeUidChanging(value);
					this.SendPropertyChanging();
					this._NodeTypeUid = value;
					this.SendPropertyChanged("NodeTypeUid");
					this.OnNodeTypeUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DomainUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DomainUid
		{
			get
			{
				return this._DomainUid;
			}
			set
			{
				if ((this._DomainUid != value))
				{
					if (this._Domain.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDomainUidChanging(value);
					this.SendPropertyChanging();
					this._DomainUid = value;
					this.SendPropertyChanged("DomainUid");
					this.OnDomainUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RootMapUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RootMapUid
		{
			get
			{
				return this._RootMapUid;
			}
			set
			{
				if ((this._RootMapUid != value))
				{
					if (this._Node1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRootMapUidChanging(value);
					this.SendPropertyChanging();
					this._RootMapUid = value;
					this.SendPropertyChanged("RootMapUid");
					this.OnRootMapUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(100)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Node_Descriptor", Storage="_Descriptors", ThisKey="NodeUid", OtherKey="NodeUid")]
		public EntitySet<Descriptor> Descriptors
		{
			get
			{
				return this._Descriptors;
			}
			set
			{
				this._Descriptors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Node_Relationship", Storage="_Relationships", ThisKey="NodeUid", OtherKey="RootMapUid")]
		public EntitySet<Relationship> Relationships
		{
			get
			{
				return this._Relationships;
			}
			set
			{
				this._Relationships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Node_Metadata", Storage="_Metadatas", ThisKey="NodeUid", OtherKey="NodeUid")]
		public EntitySet<Metadata> Metadatas
		{
			get
			{
				return this._Metadatas;
			}
			set
			{
				this._Metadatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Node_Metadata1", Storage="_Metadatas1", ThisKey="NodeUid", OtherKey="RootMapUid")]
		public EntitySet<Metadata> Metadatas1
		{
			get
			{
				return this._Metadatas1;
			}
			set
			{
				this._Metadatas1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Node_Node", Storage="_Nodes", ThisKey="NodeUid", OtherKey="RootMapUid")]
		public EntitySet<Node> Nodes
		{
			get
			{
				return this._Nodes;
			}
			set
			{
				this._Nodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Domain_Node", Storage="_Domain", ThisKey="DomainUid", OtherKey="DomainUid", IsForeignKey=true)]
		public Domain Domain
		{
			get
			{
				return this._Domain.Entity;
			}
			set
			{
				Domain previousValue = this._Domain.Entity;
				if (((previousValue != value) 
							|| (this._Domain.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Domain.Entity = null;
						previousValue.Nodes.Remove(this);
					}
					this._Domain.Entity = value;
					if ((value != null))
					{
						value.Nodes.Add(this);
						this._DomainUid = value.DomainUid;
					}
					else
					{
						this._DomainUid = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Domain");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Node_Node", Storage="_Node1", ThisKey="RootMapUid", OtherKey="NodeUid", IsForeignKey=true)]
		public Node Node1
		{
			get
			{
				return this._Node1.Entity;
			}
			set
			{
				Node previousValue = this._Node1.Entity;
				if (((previousValue != value) 
							|| (this._Node1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Node1.Entity = null;
						previousValue.Nodes.Remove(this);
					}
					this._Node1.Entity = value;
					if ((value != null))
					{
						value.Nodes.Add(this);
						this._RootMapUid = value.NodeUid;
					}
					else
					{
						this._RootMapUid = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Node1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NodeType_Node", Storage="_NodeType", ThisKey="NodeTypeUid", OtherKey="NodeTypeUid", IsForeignKey=true)]
		public NodeType NodeType
		{
			get
			{
				return this._NodeType.Entity;
			}
			set
			{
				NodeType previousValue = this._NodeType.Entity;
				if (((previousValue != value) 
							|| (this._NodeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NodeType.Entity = null;
						previousValue.Nodes.Remove(this);
					}
					this._NodeType.Entity = value;
					if ((value != null))
					{
						value.Nodes.Add(this);
						this._NodeTypeUid = value.NodeTypeUid;
					}
					else
					{
						this._NodeTypeUid = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("NodeType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Descriptors(Descriptor entity)
		{
			this.SendPropertyChanging();
			entity.Node = this;
		}
		
		private void detach_Descriptors(Descriptor entity)
		{
			this.SendPropertyChanging();
			entity.Node = null;
		}
		
		private void attach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.Node = this;
		}
		
		private void detach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.Node = null;
		}
		
		private void attach_Metadatas(Metadata entity)
		{
			this.SendPropertyChanging();
			entity.Node = this;
		}
		
		private void detach_Metadatas(Metadata entity)
		{
			this.SendPropertyChanging();
			entity.Node = null;
		}
		
		private void attach_Metadatas1(Metadata entity)
		{
			this.SendPropertyChanging();
			entity.Node1 = this;
		}
		
		private void detach_Metadatas1(Metadata entity)
		{
			this.SendPropertyChanging();
			entity.Node1 = null;
		}
		
		private void attach_Nodes(Node entity)
		{
			this.SendPropertyChanging();
			entity.Node1 = this;
		}
		
		private void detach_Nodes(Node entity)
		{
			this.SendPropertyChanging();
			entity.Node1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NodeTypes")]
	public partial class NodeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _NodeTypeUid;
		
		private string _NodeTypeName;
		
		private EntitySet<Node> _Nodes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNodeTypeUidChanging(System.Guid value);
    partial void OnNodeTypeUidChanged();
    partial void OnNodeTypeNameChanging(string value);
    partial void OnNodeTypeNameChanged();
    #endregion
		
		public NodeType()
		{
			this._Nodes = new EntitySet<Node>(new Action<Node>(this.attach_Nodes), new Action<Node>(this.detach_Nodes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeTypeUid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NodeTypeUid
		{
			get
			{
				return this._NodeTypeUid;
			}
			set
			{
				if ((this._NodeTypeUid != value))
				{
					this.OnNodeTypeUidChanging(value);
					this.SendPropertyChanging();
					this._NodeTypeUid = value;
					this.SendPropertyChanged("NodeTypeUid");
					this.OnNodeTypeUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeTypeName", DbType="NVarChar(50)")]
		public string NodeTypeName
		{
			get
			{
				return this._NodeTypeName;
			}
			set
			{
				if ((this._NodeTypeName != value))
				{
					this.OnNodeTypeNameChanging(value);
					this.SendPropertyChanging();
					this._NodeTypeName = value;
					this.SendPropertyChanged("NodeTypeName");
					this.OnNodeTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NodeType_Node", Storage="_Nodes", ThisKey="NodeTypeUid", OtherKey="NodeTypeUid")]
		public EntitySet<Node> Nodes
		{
			get
			{
				return this._Nodes;
			}
			set
			{
				this._Nodes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Nodes(Node entity)
		{
			this.SendPropertyChanging();
			entity.NodeType = this;
		}
		
		private void detach_Nodes(Node entity)
		{
			this.SendPropertyChanging();
			entity.NodeType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RelationshipDescriptorPairs")]
	public partial class RelationshipDescriptorPair : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PairId;
		
		private System.Guid _RelationshipTypeUid;
		
		private System.Guid _DescriptorTypeUid;
		
		private EntityRef<DescriptorType> _DescriptorType;
		
		private EntityRef<RelationshipType> _RelationshipType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPairIdChanging(int value);
    partial void OnPairIdChanged();
    partial void OnRelationshipTypeUidChanging(System.Guid value);
    partial void OnRelationshipTypeUidChanged();
    partial void OnDescriptorTypeUidChanging(System.Guid value);
    partial void OnDescriptorTypeUidChanged();
    #endregion
		
		public RelationshipDescriptorPair()
		{
			this._DescriptorType = default(EntityRef<DescriptorType>);
			this._RelationshipType = default(EntityRef<RelationshipType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PairId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PairId
		{
			get
			{
				return this._PairId;
			}
			set
			{
				if ((this._PairId != value))
				{
					this.OnPairIdChanging(value);
					this.SendPropertyChanging();
					this._PairId = value;
					this.SendPropertyChanged("PairId");
					this.OnPairIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipTypeUid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RelationshipTypeUid
		{
			get
			{
				return this._RelationshipTypeUid;
			}
			set
			{
				if ((this._RelationshipTypeUid != value))
				{
					if (this._RelationshipType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelationshipTypeUidChanging(value);
					this.SendPropertyChanging();
					this._RelationshipTypeUid = value;
					this.SendPropertyChanged("RelationshipTypeUid");
					this.OnRelationshipTypeUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptorTypeUid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DescriptorTypeUid
		{
			get
			{
				return this._DescriptorTypeUid;
			}
			set
			{
				if ((this._DescriptorTypeUid != value))
				{
					if (this._DescriptorType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDescriptorTypeUidChanging(value);
					this.SendPropertyChanging();
					this._DescriptorTypeUid = value;
					this.SendPropertyChanged("DescriptorTypeUid");
					this.OnDescriptorTypeUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DescriptorType_RelationshipDescriptorPair", Storage="_DescriptorType", ThisKey="DescriptorTypeUid", OtherKey="DescriptorTypeUid", IsForeignKey=true)]
		public DescriptorType DescriptorType
		{
			get
			{
				return this._DescriptorType.Entity;
			}
			set
			{
				DescriptorType previousValue = this._DescriptorType.Entity;
				if (((previousValue != value) 
							|| (this._DescriptorType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DescriptorType.Entity = null;
						previousValue.RelationshipDescriptorPairs.Remove(this);
					}
					this._DescriptorType.Entity = value;
					if ((value != null))
					{
						value.RelationshipDescriptorPairs.Add(this);
						this._DescriptorTypeUid = value.DescriptorTypeUid;
					}
					else
					{
						this._DescriptorTypeUid = default(System.Guid);
					}
					this.SendPropertyChanged("DescriptorType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RelationshipType_RelationshipDescriptorPair", Storage="_RelationshipType", ThisKey="RelationshipTypeUid", OtherKey="RelationshipTypeUid", IsForeignKey=true)]
		public RelationshipType RelationshipType
		{
			get
			{
				return this._RelationshipType.Entity;
			}
			set
			{
				RelationshipType previousValue = this._RelationshipType.Entity;
				if (((previousValue != value) 
							|| (this._RelationshipType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RelationshipType.Entity = null;
						previousValue.RelationshipDescriptorPairs.Remove(this);
					}
					this._RelationshipType.Entity = value;
					if ((value != null))
					{
						value.RelationshipDescriptorPairs.Add(this);
						this._RelationshipTypeUid = value.RelationshipTypeUid;
					}
					else
					{
						this._RelationshipTypeUid = default(System.Guid);
					}
					this.SendPropertyChanged("RelationshipType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RelationshipTypes")]
	public partial class RelationshipType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RelationshipTypeUid;
		
		private string _RelationshipTypeName;
		
		private EntitySet<Relationship> _Relationships;
		
		private EntitySet<RelationshipDescriptorPair> _RelationshipDescriptorPairs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationshipTypeUidChanging(System.Guid value);
    partial void OnRelationshipTypeUidChanged();
    partial void OnRelationshipTypeNameChanging(string value);
    partial void OnRelationshipTypeNameChanged();
    #endregion
		
		public RelationshipType()
		{
			this._Relationships = new EntitySet<Relationship>(new Action<Relationship>(this.attach_Relationships), new Action<Relationship>(this.detach_Relationships));
			this._RelationshipDescriptorPairs = new EntitySet<RelationshipDescriptorPair>(new Action<RelationshipDescriptorPair>(this.attach_RelationshipDescriptorPairs), new Action<RelationshipDescriptorPair>(this.detach_RelationshipDescriptorPairs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipTypeUid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RelationshipTypeUid
		{
			get
			{
				return this._RelationshipTypeUid;
			}
			set
			{
				if ((this._RelationshipTypeUid != value))
				{
					this.OnRelationshipTypeUidChanging(value);
					this.SendPropertyChanging();
					this._RelationshipTypeUid = value;
					this.SendPropertyChanged("RelationshipTypeUid");
					this.OnRelationshipTypeUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipTypeName", DbType="NVarChar(50)")]
		public string RelationshipTypeName
		{
			get
			{
				return this._RelationshipTypeName;
			}
			set
			{
				if ((this._RelationshipTypeName != value))
				{
					this.OnRelationshipTypeNameChanging(value);
					this.SendPropertyChanging();
					this._RelationshipTypeName = value;
					this.SendPropertyChanged("RelationshipTypeName");
					this.OnRelationshipTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RelationshipType_Relationship", Storage="_Relationships", ThisKey="RelationshipTypeUid", OtherKey="RelationshipTypeUid")]
		public EntitySet<Relationship> Relationships
		{
			get
			{
				return this._Relationships;
			}
			set
			{
				this._Relationships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RelationshipType_RelationshipDescriptorPair", Storage="_RelationshipDescriptorPairs", ThisKey="RelationshipTypeUid", OtherKey="RelationshipTypeUid")]
		public EntitySet<RelationshipDescriptorPair> RelationshipDescriptorPairs
		{
			get
			{
				return this._RelationshipDescriptorPairs;
			}
			set
			{
				this._RelationshipDescriptorPairs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.RelationshipType = this;
		}
		
		private void detach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.RelationshipType = null;
		}
		
		private void attach_RelationshipDescriptorPairs(RelationshipDescriptorPair entity)
		{
			this.SendPropertyChanging();
			entity.RelationshipType = this;
		}
		
		private void detach_RelationshipDescriptorPairs(RelationshipDescriptorPair entity)
		{
			this.SendPropertyChanging();
			entity.RelationshipType = null;
		}
	}
	
	public partial class QueryMapResult
	{
		
		private System.Nullable<int> _Level;
		
		private System.Nullable<System.Guid> _Origin;
		
		private System.Nullable<System.Guid> _RelationshipUid;
		
		private System.Nullable<System.Guid> _DescriptorTypeUid;
		
		private System.Nullable<System.Guid> _NodeUid;
		
		private string _NodeOriginalId;
		
		private System.Nullable<System.Guid> _NodeTypeUid;
		
		private System.Nullable<System.Guid> _DomainUid;
		
		public QueryMapResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="Int")]
		public System.Nullable<int> Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this._Level = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Origin", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Origin
		{
			get
			{
				return this._Origin;
			}
			set
			{
				if ((this._Origin != value))
				{
					this._Origin = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RelationshipUid
		{
			get
			{
				return this._RelationshipUid;
			}
			set
			{
				if ((this._RelationshipUid != value))
				{
					this._RelationshipUid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptorTypeUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DescriptorTypeUid
		{
			get
			{
				return this._DescriptorTypeUid;
			}
			set
			{
				if ((this._DescriptorTypeUid != value))
				{
					this._DescriptorTypeUid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> NodeUid
		{
			get
			{
				return this._NodeUid;
			}
			set
			{
				if ((this._NodeUid != value))
				{
					this._NodeUid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeOriginalId", DbType="NVarChar(50)")]
		public string NodeOriginalId
		{
			get
			{
				return this._NodeOriginalId;
			}
			set
			{
				if ((this._NodeOriginalId != value))
				{
					this._NodeOriginalId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeTypeUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> NodeTypeUid
		{
			get
			{
				return this._NodeTypeUid;
			}
			set
			{
				if ((this._NodeTypeUid != value))
				{
					this._NodeTypeUid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DomainUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DomainUid
		{
			get
			{
				return this._DomainUid;
			}
			set
			{
				if ((this._DomainUid != value))
				{
					this._DomainUid = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
