#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Glyma.Powershell.Update.v1_5_0_r4.Transaction
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Development-Transaction-GlymaDB")]
	public partial class TransactionDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTransaction(Transaction instance);
    partial void UpdateTransaction(Transaction instance);
    partial void DeleteTransaction(Transaction instance);
    partial void InsertOperation(Operation instance);
    partial void UpdateOperation(Operation instance);
    partial void DeleteOperation(Operation instance);
    partial void InsertParameter(Parameter instance);
    partial void UpdateParameter(Parameter instance);
    partial void DeleteParameter(Parameter instance);
    #endregion
		
		public TransactionDatabaseDataContext() : 
				base(global::Glyma.Powershell.Update.Properties.Settings.Default.Development_Transaction_GlymaDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TransactionDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TransactionDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TransactionDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TransactionDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Transaction> Transactions
		{
			get
			{
				return this.GetTable<Transaction>();
			}
		}
		
		public System.Data.Linq.Table<Operation> Operations
		{
			get
			{
				return this.GetTable<Operation>();
			}
		}
		
		public System.Data.Linq.Table<Parameter> Parameters
		{
			get
			{
				return this.GetTable<Parameter>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetGlymaDbVersion")]
		public ISingleResult<GetGlymaDbVersionResult> GetGlymaDbVersion()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetGlymaDbVersionResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Transactions")]
	public partial class Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _TransactionId;
		
		private System.Nullable<System.DateTime> _TransactionTimestamp;
		
		private string _User;
		
		private System.Nullable<System.Guid> _SessionUid;
		
		private System.Nullable<int> _OperationId;
		
		private System.Nullable<System.Guid> _ResponseParameterUid;
		
		private System.Nullable<System.Guid> _DomainParameterUid;
		
		private System.Nullable<System.Guid> _RootMapParameterUid;
		
		private System.Nullable<System.Guid> _NodeParameterUid;
		
		private System.Nullable<System.Guid> _DescriptorParameterUid;
		
		private System.Nullable<System.Guid> _RelationshipParameterUid;
		
		private System.Nullable<System.Guid> _MetadataParameterUid;
		
		private System.Nullable<System.Guid> _NodeTypeUid;
		
		private System.Nullable<System.Guid> _DescriptorTypeUid;
		
		private System.Nullable<System.Guid> _RelationshipTypeUid;
		
		private System.Nullable<System.Guid> _MetadataTypeUid;
		
		private string _MetadataName;
		
		private string _MetadataValue;
		
		private EntityRef<Operation> _Operation;
		
		private EntityRef<Parameter> _Parameter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransactionIdChanging(long value);
    partial void OnTransactionIdChanged();
    partial void OnTransactionTimestampChanging(System.Nullable<System.DateTime> value);
    partial void OnTransactionTimestampChanged();
    partial void OnUserChanging(string value);
    partial void OnUserChanged();
    partial void OnSessionUidChanging(System.Nullable<System.Guid> value);
    partial void OnSessionUidChanged();
    partial void OnOperationIdChanging(System.Nullable<int> value);
    partial void OnOperationIdChanged();
    partial void OnResponseParameterUidChanging(System.Nullable<System.Guid> value);
    partial void OnResponseParameterUidChanged();
    partial void OnDomainParameterUidChanging(System.Nullable<System.Guid> value);
    partial void OnDomainParameterUidChanged();
    partial void OnRootMapParameterUidChanging(System.Nullable<System.Guid> value);
    partial void OnRootMapParameterUidChanged();
    partial void OnNodeParameterUidChanging(System.Nullable<System.Guid> value);
    partial void OnNodeParameterUidChanged();
    partial void OnDescriptorParameterUidChanging(System.Nullable<System.Guid> value);
    partial void OnDescriptorParameterUidChanged();
    partial void OnRelationshipParameterUidChanging(System.Nullable<System.Guid> value);
    partial void OnRelationshipParameterUidChanged();
    partial void OnMetadataParameterUidChanging(System.Nullable<System.Guid> value);
    partial void OnMetadataParameterUidChanged();
    partial void OnNodeTypeUidChanging(System.Nullable<System.Guid> value);
    partial void OnNodeTypeUidChanged();
    partial void OnDescriptorTypeUidChanging(System.Nullable<System.Guid> value);
    partial void OnDescriptorTypeUidChanged();
    partial void OnRelationshipTypeUidChanging(System.Nullable<System.Guid> value);
    partial void OnRelationshipTypeUidChanged();
    partial void OnMetadataTypeUidChanging(System.Nullable<System.Guid> value);
    partial void OnMetadataTypeUidChanged();
    partial void OnMetadataNameChanging(string value);
    partial void OnMetadataNameChanged();
    partial void OnMetadataValueChanging(string value);
    partial void OnMetadataValueChanged();
    #endregion
		
		public Transaction()
		{
			this._Operation = default(EntityRef<Operation>);
			this._Parameter = default(EntityRef<Parameter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long TransactionId
		{
			get
			{
				return this._TransactionId;
			}
			set
			{
				if ((this._TransactionId != value))
				{
					this.OnTransactionIdChanging(value);
					this.SendPropertyChanging();
					this._TransactionId = value;
					this.SendPropertyChanged("TransactionId");
					this.OnTransactionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionTimestamp", DbType="DateTime2")]
		public System.Nullable<System.DateTime> TransactionTimestamp
		{
			get
			{
				return this._TransactionTimestamp;
			}
			set
			{
				if ((this._TransactionTimestamp != value))
				{
					this.OnTransactionTimestampChanging(value);
					this.SendPropertyChanging();
					this._TransactionTimestamp = value;
					this.SendPropertyChanged("TransactionTimestamp");
					this.OnTransactionTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[User]", Storage="_User", DbType="NVarChar(100)")]
		public string User
		{
			get
			{
				return this._User;
			}
			set
			{
				if ((this._User != value))
				{
					this.OnUserChanging(value);
					this.SendPropertyChanging();
					this._User = value;
					this.SendPropertyChanged("User");
					this.OnUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SessionUid
		{
			get
			{
				return this._SessionUid;
			}
			set
			{
				if ((this._SessionUid != value))
				{
					this.OnSessionUidChanging(value);
					this.SendPropertyChanging();
					this._SessionUid = value;
					this.SendPropertyChanged("SessionUid");
					this.OnSessionUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationId", DbType="Int")]
		public System.Nullable<int> OperationId
		{
			get
			{
				return this._OperationId;
			}
			set
			{
				if ((this._OperationId != value))
				{
					if (this._Operation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperationIdChanging(value);
					this.SendPropertyChanging();
					this._OperationId = value;
					this.SendPropertyChanged("OperationId");
					this.OnOperationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponseParameterUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ResponseParameterUid
		{
			get
			{
				return this._ResponseParameterUid;
			}
			set
			{
				if ((this._ResponseParameterUid != value))
				{
					if (this._Parameter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResponseParameterUidChanging(value);
					this.SendPropertyChanging();
					this._ResponseParameterUid = value;
					this.SendPropertyChanged("ResponseParameterUid");
					this.OnResponseParameterUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DomainParameterUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DomainParameterUid
		{
			get
			{
				return this._DomainParameterUid;
			}
			set
			{
				if ((this._DomainParameterUid != value))
				{
					this.OnDomainParameterUidChanging(value);
					this.SendPropertyChanging();
					this._DomainParameterUid = value;
					this.SendPropertyChanged("DomainParameterUid");
					this.OnDomainParameterUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RootMapParameterUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RootMapParameterUid
		{
			get
			{
				return this._RootMapParameterUid;
			}
			set
			{
				if ((this._RootMapParameterUid != value))
				{
					this.OnRootMapParameterUidChanging(value);
					this.SendPropertyChanging();
					this._RootMapParameterUid = value;
					this.SendPropertyChanged("RootMapParameterUid");
					this.OnRootMapParameterUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeParameterUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> NodeParameterUid
		{
			get
			{
				return this._NodeParameterUid;
			}
			set
			{
				if ((this._NodeParameterUid != value))
				{
					this.OnNodeParameterUidChanging(value);
					this.SendPropertyChanging();
					this._NodeParameterUid = value;
					this.SendPropertyChanged("NodeParameterUid");
					this.OnNodeParameterUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptorParameterUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DescriptorParameterUid
		{
			get
			{
				return this._DescriptorParameterUid;
			}
			set
			{
				if ((this._DescriptorParameterUid != value))
				{
					this.OnDescriptorParameterUidChanging(value);
					this.SendPropertyChanging();
					this._DescriptorParameterUid = value;
					this.SendPropertyChanged("DescriptorParameterUid");
					this.OnDescriptorParameterUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipParameterUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RelationshipParameterUid
		{
			get
			{
				return this._RelationshipParameterUid;
			}
			set
			{
				if ((this._RelationshipParameterUid != value))
				{
					this.OnRelationshipParameterUidChanging(value);
					this.SendPropertyChanging();
					this._RelationshipParameterUid = value;
					this.SendPropertyChanged("RelationshipParameterUid");
					this.OnRelationshipParameterUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetadataParameterUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> MetadataParameterUid
		{
			get
			{
				return this._MetadataParameterUid;
			}
			set
			{
				if ((this._MetadataParameterUid != value))
				{
					this.OnMetadataParameterUidChanging(value);
					this.SendPropertyChanging();
					this._MetadataParameterUid = value;
					this.SendPropertyChanged("MetadataParameterUid");
					this.OnMetadataParameterUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeTypeUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> NodeTypeUid
		{
			get
			{
				return this._NodeTypeUid;
			}
			set
			{
				if ((this._NodeTypeUid != value))
				{
					this.OnNodeTypeUidChanging(value);
					this.SendPropertyChanging();
					this._NodeTypeUid = value;
					this.SendPropertyChanged("NodeTypeUid");
					this.OnNodeTypeUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptorTypeUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DescriptorTypeUid
		{
			get
			{
				return this._DescriptorTypeUid;
			}
			set
			{
				if ((this._DescriptorTypeUid != value))
				{
					this.OnDescriptorTypeUidChanging(value);
					this.SendPropertyChanging();
					this._DescriptorTypeUid = value;
					this.SendPropertyChanged("DescriptorTypeUid");
					this.OnDescriptorTypeUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipTypeUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RelationshipTypeUid
		{
			get
			{
				return this._RelationshipTypeUid;
			}
			set
			{
				if ((this._RelationshipTypeUid != value))
				{
					this.OnRelationshipTypeUidChanging(value);
					this.SendPropertyChanging();
					this._RelationshipTypeUid = value;
					this.SendPropertyChanged("RelationshipTypeUid");
					this.OnRelationshipTypeUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetadataTypeUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> MetadataTypeUid
		{
			get
			{
				return this._MetadataTypeUid;
			}
			set
			{
				if ((this._MetadataTypeUid != value))
				{
					this.OnMetadataTypeUidChanging(value);
					this.SendPropertyChanging();
					this._MetadataTypeUid = value;
					this.SendPropertyChanged("MetadataTypeUid");
					this.OnMetadataTypeUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetadataName", DbType="NVarChar(50)")]
		public string MetadataName
		{
			get
			{
				return this._MetadataName;
			}
			set
			{
				if ((this._MetadataName != value))
				{
					this.OnMetadataNameChanging(value);
					this.SendPropertyChanging();
					this._MetadataName = value;
					this.SendPropertyChanged("MetadataName");
					this.OnMetadataNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetadataValue", DbType="NVarChar(MAX)")]
		public string MetadataValue
		{
			get
			{
				return this._MetadataValue;
			}
			set
			{
				if ((this._MetadataValue != value))
				{
					this.OnMetadataValueChanging(value);
					this.SendPropertyChanging();
					this._MetadataValue = value;
					this.SendPropertyChanged("MetadataValue");
					this.OnMetadataValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Operation_Transaction", Storage="_Operation", ThisKey="OperationId", OtherKey="OperationId", IsForeignKey=true)]
		public Operation Operation
		{
			get
			{
				return this._Operation.Entity;
			}
			set
			{
				Operation previousValue = this._Operation.Entity;
				if (((previousValue != value) 
							|| (this._Operation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Operation.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Operation.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._OperationId = value.OperationId;
					}
					else
					{
						this._OperationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Operation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parameter_Transaction", Storage="_Parameter", ThisKey="ResponseParameterUid", OtherKey="ParameterUid", IsForeignKey=true)]
		public Parameter Parameter
		{
			get
			{
				return this._Parameter.Entity;
			}
			set
			{
				Parameter previousValue = this._Parameter.Entity;
				if (((previousValue != value) 
							|| (this._Parameter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parameter.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Parameter.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._ResponseParameterUid = value.ParameterUid;
					}
					else
					{
						this._ResponseParameterUid = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Parameter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Operations")]
	public partial class Operation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OperationId;
		
		private string _Name;
		
		private EntitySet<Transaction> _Transactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOperationIdChanging(int value);
    partial void OnOperationIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Operation()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OperationId
		{
			get
			{
				return this._OperationId;
			}
			set
			{
				if ((this._OperationId != value))
				{
					this.OnOperationIdChanging(value);
					this.SendPropertyChanging();
					this._OperationId = value;
					this.SendPropertyChanged("OperationId");
					this.OnOperationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(25)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Operation_Transaction", Storage="_Transactions", ThisKey="OperationId", OtherKey="OperationId")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Operation = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Operation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Parameters")]
	public partial class Parameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ParameterUid;
		
		private System.Nullable<System.Guid> _Value;
		
		private System.Nullable<System.Guid> _SessionUid;
		
		private System.Nullable<bool> _IsDelayed;
		
		private System.Nullable<int> _ParameterType;
		
		private EntitySet<Transaction> _Transactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParameterUidChanging(System.Guid value);
    partial void OnParameterUidChanged();
    partial void OnValueChanging(System.Nullable<System.Guid> value);
    partial void OnValueChanged();
    partial void OnSessionUidChanging(System.Nullable<System.Guid> value);
    partial void OnSessionUidChanged();
    partial void OnIsDelayedChanging(System.Nullable<bool> value);
    partial void OnIsDelayedChanged();
    partial void OnParameterTypeChanging(System.Nullable<int> value);
    partial void OnParameterTypeChanged();
    #endregion
		
		public Parameter()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterUid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ParameterUid
		{
			get
			{
				return this._ParameterUid;
			}
			set
			{
				if ((this._ParameterUid != value))
				{
					this.OnParameterUidChanging(value);
					this.SendPropertyChanging();
					this._ParameterUid = value;
					this.SendPropertyChanged("ParameterUid");
					this.OnParameterUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SessionUid
		{
			get
			{
				return this._SessionUid;
			}
			set
			{
				if ((this._SessionUid != value))
				{
					this.OnSessionUidChanging(value);
					this.SendPropertyChanging();
					this._SessionUid = value;
					this.SendPropertyChanged("SessionUid");
					this.OnSessionUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelayed", DbType="Bit")]
		public System.Nullable<bool> IsDelayed
		{
			get
			{
				return this._IsDelayed;
			}
			set
			{
				if ((this._IsDelayed != value))
				{
					this.OnIsDelayedChanging(value);
					this.SendPropertyChanging();
					this._IsDelayed = value;
					this.SendPropertyChanged("IsDelayed");
					this.OnIsDelayedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterType", DbType="Int")]
		public System.Nullable<int> ParameterType
		{
			get
			{
				return this._ParameterType;
			}
			set
			{
				if ((this._ParameterType != value))
				{
					this.OnParameterTypeChanging(value);
					this.SendPropertyChanging();
					this._ParameterType = value;
					this.SendPropertyChanged("ParameterType");
					this.OnParameterTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parameter_Transaction", Storage="_Transactions", ThisKey="ParameterUid", OtherKey="ResponseParameterUid")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Parameter = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Parameter = null;
		}
	}
	
	public partial class GetGlymaDbVersionResult
	{
		
		private string _Column1;
		
		public GetGlymaDbVersionResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="", Storage="_Column1", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
