#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Glyma.SharePoint.Security
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Development-Security-GlymaDB")]
	public partial class SecurityServiceDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGroupAssociation(GroupAssociation instance);
    partial void UpdateGroupAssociation(GroupAssociation instance);
    partial void DeleteGroupAssociation(GroupAssociation instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertSecurableContext(SecurableContext instance);
    partial void UpdateSecurableContext(SecurableContext instance);
    partial void DeleteSecurableContext(SecurableContext instance);
    partial void InsertSecurableObject(SecurableObject instance);
    partial void UpdateSecurableObject(SecurableObject instance);
    partial void DeleteSecurableObject(SecurableObject instance);
    #endregion
		
		public SecurityServiceDataContext() : 
				base(global::Glyma.SharePoint.Security.Properties.Settings.Default.Development_Security_GlymaDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SecurityServiceDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SecurityServiceDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SecurityServiceDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SecurityServiceDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<GroupAssociation> GroupAssociations
		{
			get
			{
				return this.GetTable<GroupAssociation>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<SecurableContext> SecurableContexts
		{
			get
			{
				return this.GetTable<SecurableContext>();
			}
		}
		
		public System.Data.Linq.Table<SecurableObject> SecurableObjects
		{
			get
			{
				return this.GetTable<SecurableObject>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupAssociations")]
	public partial class GroupAssociation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _GroupAssociationId;
		
		private int _GroupId;
		
		private System.Nullable<System.Guid> _SecurableParentUid;
		
		private System.Guid _SecurableObjectUid;
		
		private int _SecurableContextId;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<SecurableContext> _SecurableContext;
		
		private EntityRef<SecurableObject> _SecurableObject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupAssociationIdChanging(long value);
    partial void OnGroupAssociationIdChanged();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    partial void OnSecurableParentUidChanging(System.Nullable<System.Guid> value);
    partial void OnSecurableParentUidChanged();
    partial void OnSecurableObjectUidChanging(System.Guid value);
    partial void OnSecurableObjectUidChanged();
    partial void OnSecurableContextIdChanging(int value);
    partial void OnSecurableContextIdChanged();
    #endregion
		
		public GroupAssociation()
		{
			this._Group = default(EntityRef<Group>);
			this._SecurableContext = default(EntityRef<SecurableContext>);
			this._SecurableObject = default(EntityRef<SecurableObject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupAssociationId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long GroupAssociationId
		{
			get
			{
				return this._GroupAssociationId;
			}
			set
			{
				if ((this._GroupAssociationId != value))
				{
					this.OnGroupAssociationIdChanging(value);
					this.SendPropertyChanging();
					this._GroupAssociationId = value;
					this.SendPropertyChanged("GroupAssociationId");
					this.OnGroupAssociationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int NOT NULL")]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurableParentUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SecurableParentUid
		{
			get
			{
				return this._SecurableParentUid;
			}
			set
			{
				if ((this._SecurableParentUid != value))
				{
					this.OnSecurableParentUidChanging(value);
					this.SendPropertyChanging();
					this._SecurableParentUid = value;
					this.SendPropertyChanged("SecurableParentUid");
					this.OnSecurableParentUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurableObjectUid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SecurableObjectUid
		{
			get
			{
				return this._SecurableObjectUid;
			}
			set
			{
				if ((this._SecurableObjectUid != value))
				{
					if (this._SecurableObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSecurableObjectUidChanging(value);
					this.SendPropertyChanging();
					this._SecurableObjectUid = value;
					this.SendPropertyChanged("SecurableObjectUid");
					this.OnSecurableObjectUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurableContextId", DbType="Int NOT NULL")]
		public int SecurableContextId
		{
			get
			{
				return this._SecurableContextId;
			}
			set
			{
				if ((this._SecurableContextId != value))
				{
					if (this._SecurableContext.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSecurableContextIdChanging(value);
					this.SendPropertyChanging();
					this._SecurableContextId = value;
					this.SendPropertyChanged("SecurableContextId");
					this.OnSecurableContextIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupAssociation", Storage="_Group", ThisKey="GroupId", OtherKey="GroupId", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.GroupAssociations.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.GroupAssociations.Add(this);
						this._GroupId = value.GroupId;
					}
					else
					{
						this._GroupId = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurableContext_GroupAssociation", Storage="_SecurableContext", ThisKey="SecurableContextId", OtherKey="SecurableContextId", IsForeignKey=true)]
		public SecurableContext SecurableContext
		{
			get
			{
				return this._SecurableContext.Entity;
			}
			set
			{
				SecurableContext previousValue = this._SecurableContext.Entity;
				if (((previousValue != value) 
							|| (this._SecurableContext.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecurableContext.Entity = null;
						previousValue.GroupAssociations.Remove(this);
					}
					this._SecurableContext.Entity = value;
					if ((value != null))
					{
						value.GroupAssociations.Add(this);
						this._SecurableContextId = value.SecurableContextId;
					}
					else
					{
						this._SecurableContextId = default(int);
					}
					this.SendPropertyChanged("SecurableContext");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurableObject_GroupAssociation", Storage="_SecurableObject", ThisKey="SecurableObjectUid", OtherKey="SecurableObjectUid", IsForeignKey=true)]
		public SecurableObject SecurableObject
		{
			get
			{
				return this._SecurableObject.Entity;
			}
			set
			{
				SecurableObject previousValue = this._SecurableObject.Entity;
				if (((previousValue != value) 
							|| (this._SecurableObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecurableObject.Entity = null;
						previousValue.GroupAssociations.Remove(this);
					}
					this._SecurableObject.Entity = value;
					if ((value != null))
					{
						value.GroupAssociations.Add(this);
						this._SecurableObjectUid = value.SecurableObjectUid;
					}
					else
					{
						this._SecurableObjectUid = default(System.Guid);
					}
					this.SendPropertyChanged("SecurableObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Groups")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupId;
		
		private string _DisplayName;
		
		private int _SecurableContextId;
		
		private int _GroupSPID;
		
		private System.Guid _WebSPID;
		
		private EntitySet<GroupAssociation> _GroupAssociations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnSecurableContextIdChanging(int value);
    partial void OnSecurableContextIdChanged();
    partial void OnGroupSPIDChanging(int value);
    partial void OnGroupSPIDChanged();
    partial void OnWebSPIDChanging(System.Guid value);
    partial void OnWebSPIDChanged();
    #endregion
		
		public Group()
		{
			this._GroupAssociations = new EntitySet<GroupAssociation>(new Action<GroupAssociation>(this.attach_GroupAssociations), new Action<GroupAssociation>(this.detach_GroupAssociations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(MAX)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurableContextId", DbType="Int NOT NULL")]
		public int SecurableContextId
		{
			get
			{
				return this._SecurableContextId;
			}
			set
			{
				if ((this._SecurableContextId != value))
				{
					this.OnSecurableContextIdChanging(value);
					this.SendPropertyChanging();
					this._SecurableContextId = value;
					this.SendPropertyChanged("SecurableContextId");
					this.OnSecurableContextIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupSPID", DbType="Int NOT NULL")]
		public int GroupSPID
		{
			get
			{
				return this._GroupSPID;
			}
			set
			{
				if ((this._GroupSPID != value))
				{
					this.OnGroupSPIDChanging(value);
					this.SendPropertyChanging();
					this._GroupSPID = value;
					this.SendPropertyChanged("GroupSPID");
					this.OnGroupSPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebSPID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid WebSPID
		{
			get
			{
				return this._WebSPID;
			}
			set
			{
				if ((this._WebSPID != value))
				{
					this.OnWebSPIDChanging(value);
					this.SendPropertyChanging();
					this._WebSPID = value;
					this.SendPropertyChanged("WebSPID");
					this.OnWebSPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupAssociation", Storage="_GroupAssociations", ThisKey="GroupId", OtherKey="GroupId")]
		public EntitySet<GroupAssociation> GroupAssociations
		{
			get
			{
				return this._GroupAssociations;
			}
			set
			{
				this._GroupAssociations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupAssociations(GroupAssociation entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_GroupAssociations(GroupAssociation entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecurableContexts")]
	public partial class SecurableContext : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SecurableContextId;
		
		private string _SecurableContextName;
		
		private System.Guid _SecurableContextUid;
		
		private System.Guid _SiteSPID;
		
		private EntitySet<GroupAssociation> _GroupAssociations;
		
		private EntitySet<SecurableObject> _SecurableObjects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSecurableContextIdChanging(int value);
    partial void OnSecurableContextIdChanged();
    partial void OnSecurableContextNameChanging(string value);
    partial void OnSecurableContextNameChanged();
    partial void OnSecurableContextUidChanging(System.Guid value);
    partial void OnSecurableContextUidChanged();
    partial void OnSiteSPIDChanging(System.Guid value);
    partial void OnSiteSPIDChanged();
    #endregion
		
		public SecurableContext()
		{
			this._GroupAssociations = new EntitySet<GroupAssociation>(new Action<GroupAssociation>(this.attach_GroupAssociations), new Action<GroupAssociation>(this.detach_GroupAssociations));
			this._SecurableObjects = new EntitySet<SecurableObject>(new Action<SecurableObject>(this.attach_SecurableObjects), new Action<SecurableObject>(this.detach_SecurableObjects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurableContextId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SecurableContextId
		{
			get
			{
				return this._SecurableContextId;
			}
			set
			{
				if ((this._SecurableContextId != value))
				{
					this.OnSecurableContextIdChanging(value);
					this.SendPropertyChanging();
					this._SecurableContextId = value;
					this.SendPropertyChanged("SecurableContextId");
					this.OnSecurableContextIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurableContextName", DbType="NVarChar(MAX)")]
		public string SecurableContextName
		{
			get
			{
				return this._SecurableContextName;
			}
			set
			{
				if ((this._SecurableContextName != value))
				{
					this.OnSecurableContextNameChanging(value);
					this.SendPropertyChanging();
					this._SecurableContextName = value;
					this.SendPropertyChanged("SecurableContextName");
					this.OnSecurableContextNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurableContextUid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SecurableContextUid
		{
			get
			{
				return this._SecurableContextUid;
			}
			set
			{
				if ((this._SecurableContextUid != value))
				{
					this.OnSecurableContextUidChanging(value);
					this.SendPropertyChanging();
					this._SecurableContextUid = value;
					this.SendPropertyChanged("SecurableContextUid");
					this.OnSecurableContextUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteSPID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SiteSPID
		{
			get
			{
				return this._SiteSPID;
			}
			set
			{
				if ((this._SiteSPID != value))
				{
					this.OnSiteSPIDChanging(value);
					this.SendPropertyChanging();
					this._SiteSPID = value;
					this.SendPropertyChanged("SiteSPID");
					this.OnSiteSPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurableContext_GroupAssociation", Storage="_GroupAssociations", ThisKey="SecurableContextId", OtherKey="SecurableContextId")]
		public EntitySet<GroupAssociation> GroupAssociations
		{
			get
			{
				return this._GroupAssociations;
			}
			set
			{
				this._GroupAssociations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurableContext_SecurableObject", Storage="_SecurableObjects", ThisKey="SecurableContextId", OtherKey="SecurableContextId")]
		public EntitySet<SecurableObject> SecurableObjects
		{
			get
			{
				return this._SecurableObjects;
			}
			set
			{
				this._SecurableObjects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupAssociations(GroupAssociation entity)
		{
			this.SendPropertyChanging();
			entity.SecurableContext = this;
		}
		
		private void detach_GroupAssociations(GroupAssociation entity)
		{
			this.SendPropertyChanging();
			entity.SecurableContext = null;
		}
		
		private void attach_SecurableObjects(SecurableObject entity)
		{
			this.SendPropertyChanging();
			entity.SecurableContext = this;
		}
		
		private void detach_SecurableObjects(SecurableObject entity)
		{
			this.SendPropertyChanging();
			entity.SecurableContext = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecurableObjects")]
	public partial class SecurableObject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SecurableObjectUid;
		
		private int _SecurableContextId;
		
		private bool _BreaksInheritance;
		
		private EntitySet<GroupAssociation> _GroupAssociations;
		
		private EntityRef<SecurableContext> _SecurableContext;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSecurableObjectUidChanging(System.Guid value);
    partial void OnSecurableObjectUidChanged();
    partial void OnSecurableContextIdChanging(int value);
    partial void OnSecurableContextIdChanged();
    partial void OnBreaksInheritanceChanging(bool value);
    partial void OnBreaksInheritanceChanged();
    #endregion
		
		public SecurableObject()
		{
			this._GroupAssociations = new EntitySet<GroupAssociation>(new Action<GroupAssociation>(this.attach_GroupAssociations), new Action<GroupAssociation>(this.detach_GroupAssociations));
			this._SecurableContext = default(EntityRef<SecurableContext>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurableObjectUid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SecurableObjectUid
		{
			get
			{
				return this._SecurableObjectUid;
			}
			set
			{
				if ((this._SecurableObjectUid != value))
				{
					this.OnSecurableObjectUidChanging(value);
					this.SendPropertyChanging();
					this._SecurableObjectUid = value;
					this.SendPropertyChanged("SecurableObjectUid");
					this.OnSecurableObjectUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurableContextId", DbType="Int NOT NULL")]
		public int SecurableContextId
		{
			get
			{
				return this._SecurableContextId;
			}
			set
			{
				if ((this._SecurableContextId != value))
				{
					if (this._SecurableContext.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSecurableContextIdChanging(value);
					this.SendPropertyChanging();
					this._SecurableContextId = value;
					this.SendPropertyChanged("SecurableContextId");
					this.OnSecurableContextIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BreaksInheritance", DbType="Bit NOT NULL")]
		public bool BreaksInheritance
		{
			get
			{
				return this._BreaksInheritance;
			}
			set
			{
				if ((this._BreaksInheritance != value))
				{
					this.OnBreaksInheritanceChanging(value);
					this.SendPropertyChanging();
					this._BreaksInheritance = value;
					this.SendPropertyChanged("BreaksInheritance");
					this.OnBreaksInheritanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurableObject_GroupAssociation", Storage="_GroupAssociations", ThisKey="SecurableObjectUid", OtherKey="SecurableObjectUid")]
		public EntitySet<GroupAssociation> GroupAssociations
		{
			get
			{
				return this._GroupAssociations;
			}
			set
			{
				this._GroupAssociations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurableContext_SecurableObject", Storage="_SecurableContext", ThisKey="SecurableContextId", OtherKey="SecurableContextId", IsForeignKey=true)]
		public SecurableContext SecurableContext
		{
			get
			{
				return this._SecurableContext.Entity;
			}
			set
			{
				SecurableContext previousValue = this._SecurableContext.Entity;
				if (((previousValue != value) 
							|| (this._SecurableContext.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecurableContext.Entity = null;
						previousValue.SecurableObjects.Remove(this);
					}
					this._SecurableContext.Entity = value;
					if ((value != null))
					{
						value.SecurableObjects.Add(this);
						this._SecurableContextId = value.SecurableContextId;
					}
					else
					{
						this._SecurableContextId = default(int);
					}
					this.SendPropertyChanged("SecurableContext");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupAssociations(GroupAssociation entity)
		{
			this.SendPropertyChanging();
			entity.SecurableObject = this;
		}
		
		private void detach_GroupAssociations(GroupAssociation entity)
		{
			this.SendPropertyChanging();
			entity.SecurableObject = null;
		}
	}
}
#pragma warning restore 1591
