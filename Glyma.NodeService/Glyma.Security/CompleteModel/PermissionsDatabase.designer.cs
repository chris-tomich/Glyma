#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Glyma.Security.CompleteModel
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GlymaPermissions")]
	public partial class PermissionsDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGroupAssociation(GroupAssociation instance);
    partial void UpdateGroupAssociation(GroupAssociation instance);
    partial void DeleteGroupAssociation(GroupAssociation instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertMembership(Membership instance);
    partial void UpdateMembership(Membership instance);
    partial void DeleteMembership(Membership instance);
    partial void InsertRightAssociation(RightAssociation instance);
    partial void UpdateRightAssociation(RightAssociation instance);
    partial void DeleteRightAssociation(RightAssociation instance);
    partial void InsertRight(Right instance);
    partial void UpdateRight(Right instance);
    partial void DeleteRight(Right instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertSecurableContext(SecurableContext instance);
    partial void UpdateSecurableContext(SecurableContext instance);
    partial void DeleteSecurableContext(SecurableContext instance);
    #endregion
		
		public PermissionsDatabaseDataContext() : 
				base(global::Glyma.Security.Properties.Settings.Default.GlymaPermissionsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PermissionsDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PermissionsDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PermissionsDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PermissionsDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<GroupAssociation> GroupAssociations
		{
			get
			{
				return this.GetTable<GroupAssociation>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<Membership> Memberships
		{
			get
			{
				return this.GetTable<Membership>();
			}
		}
		
		public System.Data.Linq.Table<RightAssociation> RightAssociations
		{
			get
			{
				return this.GetTable<RightAssociation>();
			}
		}
		
		public System.Data.Linq.Table<Right> Rights
		{
			get
			{
				return this.GetTable<Right>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<SecurableContext> SecurableContexts
		{
			get
			{
				return this.GetTable<SecurableContext>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupAssociations")]
	public partial class GroupAssociation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _GroupAssociationId;
		
		private System.Nullable<int> _GroupId;
		
		private System.Nullable<System.Guid> _SecurableParentUid;
		
		private System.Nullable<System.Guid> _SecurableObjectUid;
		
		private System.Nullable<int> _SecurableContextId;
		
		private System.Nullable<bool> _BreakInheritance;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<SecurableContext> _SecurableContext;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupAssociationIdChanging(long value);
    partial void OnGroupAssociationIdChanged();
    partial void OnGroupIdChanging(System.Nullable<int> value);
    partial void OnGroupIdChanged();
    partial void OnSecurableParentUidChanging(System.Nullable<System.Guid> value);
    partial void OnSecurableParentUidChanged();
    partial void OnSecurableObjectUidChanging(System.Nullable<System.Guid> value);
    partial void OnSecurableObjectUidChanged();
    partial void OnSecurableContextIdChanging(System.Nullable<int> value);
    partial void OnSecurableContextIdChanged();
    partial void OnBreakInheritanceChanging(System.Nullable<bool> value);
    partial void OnBreakInheritanceChanged();
    #endregion
		
		public GroupAssociation()
		{
			this._Group = default(EntityRef<Group>);
			this._SecurableContext = default(EntityRef<SecurableContext>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupAssociationId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long GroupAssociationId
		{
			get
			{
				return this._GroupAssociationId;
			}
			set
			{
				if ((this._GroupAssociationId != value))
				{
					this.OnGroupAssociationIdChanging(value);
					this.SendPropertyChanging();
					this._GroupAssociationId = value;
					this.SendPropertyChanged("GroupAssociationId");
					this.OnGroupAssociationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int")]
		public System.Nullable<int> GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurableParentUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SecurableParentUid
		{
			get
			{
				return this._SecurableParentUid;
			}
			set
			{
				if ((this._SecurableParentUid != value))
				{
					this.OnSecurableParentUidChanging(value);
					this.SendPropertyChanging();
					this._SecurableParentUid = value;
					this.SendPropertyChanged("SecurableParentUid");
					this.OnSecurableParentUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurableObjectUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SecurableObjectUid
		{
			get
			{
				return this._SecurableObjectUid;
			}
			set
			{
				if ((this._SecurableObjectUid != value))
				{
					this.OnSecurableObjectUidChanging(value);
					this.SendPropertyChanging();
					this._SecurableObjectUid = value;
					this.SendPropertyChanged("SecurableObjectUid");
					this.OnSecurableObjectUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurableContextId", DbType="Int")]
		public System.Nullable<int> SecurableContextId
		{
			get
			{
				return this._SecurableContextId;
			}
			set
			{
				if ((this._SecurableContextId != value))
				{
					if (this._SecurableContext.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSecurableContextIdChanging(value);
					this.SendPropertyChanging();
					this._SecurableContextId = value;
					this.SendPropertyChanged("SecurableContextId");
					this.OnSecurableContextIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BreakInheritance", DbType="Bit")]
		public System.Nullable<bool> BreakInheritance
		{
			get
			{
				return this._BreakInheritance;
			}
			set
			{
				if ((this._BreakInheritance != value))
				{
					this.OnBreakInheritanceChanging(value);
					this.SendPropertyChanging();
					this._BreakInheritance = value;
					this.SendPropertyChanged("BreakInheritance");
					this.OnBreakInheritanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupAssociation", Storage="_Group", ThisKey="GroupId", OtherKey="GroupId", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.GroupAssociations.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.GroupAssociations.Add(this);
						this._GroupId = value.GroupId;
					}
					else
					{
						this._GroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurableContext_GroupAssociation", Storage="_SecurableContext", ThisKey="SecurableContextId", OtherKey="SecurableContextId", IsForeignKey=true)]
		public SecurableContext SecurableContext
		{
			get
			{
				return this._SecurableContext.Entity;
			}
			set
			{
				SecurableContext previousValue = this._SecurableContext.Entity;
				if (((previousValue != value) 
							|| (this._SecurableContext.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecurableContext.Entity = null;
						previousValue.GroupAssociations.Remove(this);
					}
					this._SecurableContext.Entity = value;
					if ((value != null))
					{
						value.GroupAssociations.Add(this);
						this._SecurableContextId = value.SecurableContextId;
					}
					else
					{
						this._SecurableContextId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SecurableContext");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _DisplayName;
		
		private string _Claim;
		
		private System.Nullable<int> _SecurableContextId;
		
		private EntitySet<Membership> _Memberships;
		
		private EntityRef<SecurableContext> _SecurableContext;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnClaimChanging(string value);
    partial void OnClaimChanged();
    partial void OnSecurableContextIdChanging(System.Nullable<int> value);
    partial void OnSecurableContextIdChanged();
    #endregion
		
		public User()
		{
			this._Memberships = new EntitySet<Membership>(new Action<Membership>(this.attach_Memberships), new Action<Membership>(this.detach_Memberships));
			this._SecurableContext = default(EntityRef<SecurableContext>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(MAX)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Claim", DbType="NVarChar(MAX)")]
		public string Claim
		{
			get
			{
				return this._Claim;
			}
			set
			{
				if ((this._Claim != value))
				{
					this.OnClaimChanging(value);
					this.SendPropertyChanging();
					this._Claim = value;
					this.SendPropertyChanged("Claim");
					this.OnClaimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurableContextId", DbType="Int")]
		public System.Nullable<int> SecurableContextId
		{
			get
			{
				return this._SecurableContextId;
			}
			set
			{
				if ((this._SecurableContextId != value))
				{
					if (this._SecurableContext.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSecurableContextIdChanging(value);
					this.SendPropertyChanging();
					this._SecurableContextId = value;
					this.SendPropertyChanged("SecurableContextId");
					this.OnSecurableContextIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Membership", Storage="_Memberships", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Membership> Memberships
		{
			get
			{
				return this._Memberships;
			}
			set
			{
				this._Memberships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurableContext_User", Storage="_SecurableContext", ThisKey="SecurableContextId", OtherKey="SecurableContextId", IsForeignKey=true)]
		public SecurableContext SecurableContext
		{
			get
			{
				return this._SecurableContext.Entity;
			}
			set
			{
				SecurableContext previousValue = this._SecurableContext.Entity;
				if (((previousValue != value) 
							|| (this._SecurableContext.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecurableContext.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._SecurableContext.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._SecurableContextId = value.SecurableContextId;
					}
					else
					{
						this._SecurableContextId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SecurableContext");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Memberships(Membership entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Memberships(Membership entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Groups")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupId;
		
		private System.Nullable<int> _RoleId;
		
		private string _DisplayName;
		
		private System.Nullable<int> _SecurableContextId;
		
		private EntitySet<GroupAssociation> _GroupAssociations;
		
		private EntitySet<Membership> _Memberships;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    partial void OnRoleIdChanging(System.Nullable<int> value);
    partial void OnRoleIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnSecurableContextIdChanging(System.Nullable<int> value);
    partial void OnSecurableContextIdChanged();
    #endregion
		
		public Group()
		{
			this._GroupAssociations = new EntitySet<GroupAssociation>(new Action<GroupAssociation>(this.attach_GroupAssociations), new Action<GroupAssociation>(this.detach_GroupAssociations));
			this._Memberships = new EntitySet<Membership>(new Action<Membership>(this.attach_Memberships), new Action<Membership>(this.detach_Memberships));
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int")]
		public System.Nullable<int> RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(MAX)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurableContextId", DbType="Int")]
		public System.Nullable<int> SecurableContextId
		{
			get
			{
				return this._SecurableContextId;
			}
			set
			{
				if ((this._SecurableContextId != value))
				{
					this.OnSecurableContextIdChanging(value);
					this.SendPropertyChanging();
					this._SecurableContextId = value;
					this.SendPropertyChanged("SecurableContextId");
					this.OnSecurableContextIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupAssociation", Storage="_GroupAssociations", ThisKey="GroupId", OtherKey="GroupId")]
		public EntitySet<GroupAssociation> GroupAssociations
		{
			get
			{
				return this._GroupAssociations;
			}
			set
			{
				this._GroupAssociations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Membership", Storage="_Memberships", ThisKey="GroupId", OtherKey="GroupId")]
		public EntitySet<Membership> Memberships
		{
			get
			{
				return this._Memberships;
			}
			set
			{
				this._Memberships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Group", Storage="_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Groups.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Groups.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupAssociations(GroupAssociation entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_GroupAssociations(GroupAssociation entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_Memberships(Membership entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Memberships(Membership entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Memberships")]
	public partial class Membership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MembershipId;
		
		private System.Nullable<int> _GroupId;
		
		private System.Nullable<int> _UserId;
		
		private System.Nullable<int> _SecurableContextId;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<User> _User;
		
		private EntityRef<SecurableContext> _SecurableContext;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMembershipIdChanging(long value);
    partial void OnMembershipIdChanged();
    partial void OnGroupIdChanging(System.Nullable<int> value);
    partial void OnGroupIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnSecurableContextIdChanging(System.Nullable<int> value);
    partial void OnSecurableContextIdChanged();
    #endregion
		
		public Membership()
		{
			this._Group = default(EntityRef<Group>);
			this._User = default(EntityRef<User>);
			this._SecurableContext = default(EntityRef<SecurableContext>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MembershipId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long MembershipId
		{
			get
			{
				return this._MembershipId;
			}
			set
			{
				if ((this._MembershipId != value))
				{
					this.OnMembershipIdChanging(value);
					this.SendPropertyChanging();
					this._MembershipId = value;
					this.SendPropertyChanged("MembershipId");
					this.OnMembershipIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int")]
		public System.Nullable<int> GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurableContextId", DbType="Int")]
		public System.Nullable<int> SecurableContextId
		{
			get
			{
				return this._SecurableContextId;
			}
			set
			{
				if ((this._SecurableContextId != value))
				{
					if (this._SecurableContext.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSecurableContextIdChanging(value);
					this.SendPropertyChanging();
					this._SecurableContextId = value;
					this.SendPropertyChanged("SecurableContextId");
					this.OnSecurableContextIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Membership", Storage="_Group", ThisKey="GroupId", OtherKey="GroupId", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Memberships.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Memberships.Add(this);
						this._GroupId = value.GroupId;
					}
					else
					{
						this._GroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Membership", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Memberships.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Memberships.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurableContext_Membership", Storage="_SecurableContext", ThisKey="SecurableContextId", OtherKey="SecurableContextId", IsForeignKey=true)]
		public SecurableContext SecurableContext
		{
			get
			{
				return this._SecurableContext.Entity;
			}
			set
			{
				SecurableContext previousValue = this._SecurableContext.Entity;
				if (((previousValue != value) 
							|| (this._SecurableContext.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecurableContext.Entity = null;
						previousValue.Memberships.Remove(this);
					}
					this._SecurableContext.Entity = value;
					if ((value != null))
					{
						value.Memberships.Add(this);
						this._SecurableContextId = value.SecurableContextId;
					}
					else
					{
						this._SecurableContextId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SecurableContext");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RightAssociations")]
	public partial class RightAssociation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _RightAssociationId;
		
		private System.Nullable<int> _RightId;
		
		private System.Nullable<int> _RoleId;
		
		private System.Nullable<int> _SecurableContextId;
		
		private EntityRef<Right> _Right;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<SecurableContext> _SecurableContext;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRightAssociationIdChanging(long value);
    partial void OnRightAssociationIdChanged();
    partial void OnRightIdChanging(System.Nullable<int> value);
    partial void OnRightIdChanged();
    partial void OnRoleIdChanging(System.Nullable<int> value);
    partial void OnRoleIdChanged();
    partial void OnSecurableContextIdChanging(System.Nullable<int> value);
    partial void OnSecurableContextIdChanged();
    #endregion
		
		public RightAssociation()
		{
			this._Right = default(EntityRef<Right>);
			this._Role = default(EntityRef<Role>);
			this._SecurableContext = default(EntityRef<SecurableContext>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RightAssociationId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long RightAssociationId
		{
			get
			{
				return this._RightAssociationId;
			}
			set
			{
				if ((this._RightAssociationId != value))
				{
					this.OnRightAssociationIdChanging(value);
					this.SendPropertyChanging();
					this._RightAssociationId = value;
					this.SendPropertyChanged("RightAssociationId");
					this.OnRightAssociationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RightId", DbType="Int")]
		public System.Nullable<int> RightId
		{
			get
			{
				return this._RightId;
			}
			set
			{
				if ((this._RightId != value))
				{
					if (this._Right.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRightIdChanging(value);
					this.SendPropertyChanging();
					this._RightId = value;
					this.SendPropertyChanged("RightId");
					this.OnRightIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int")]
		public System.Nullable<int> RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurableContextId", DbType="Int")]
		public System.Nullable<int> SecurableContextId
		{
			get
			{
				return this._SecurableContextId;
			}
			set
			{
				if ((this._SecurableContextId != value))
				{
					if (this._SecurableContext.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSecurableContextIdChanging(value);
					this.SendPropertyChanging();
					this._SecurableContextId = value;
					this.SendPropertyChanged("SecurableContextId");
					this.OnSecurableContextIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Right_RightAssociation", Storage="_Right", ThisKey="RightId", OtherKey="RightId", IsForeignKey=true)]
		public Right Right
		{
			get
			{
				return this._Right.Entity;
			}
			set
			{
				Right previousValue = this._Right.Entity;
				if (((previousValue != value) 
							|| (this._Right.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Right.Entity = null;
						previousValue.RightAssociations.Remove(this);
					}
					this._Right.Entity = value;
					if ((value != null))
					{
						value.RightAssociations.Add(this);
						this._RightId = value.RightId;
					}
					else
					{
						this._RightId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Right");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RightAssociation", Storage="_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.RightAssociations.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.RightAssociations.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurableContext_RightAssociation", Storage="_SecurableContext", ThisKey="SecurableContextId", OtherKey="SecurableContextId", IsForeignKey=true)]
		public SecurableContext SecurableContext
		{
			get
			{
				return this._SecurableContext.Entity;
			}
			set
			{
				SecurableContext previousValue = this._SecurableContext.Entity;
				if (((previousValue != value) 
							|| (this._SecurableContext.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecurableContext.Entity = null;
						previousValue.RightAssociations.Remove(this);
					}
					this._SecurableContext.Entity = value;
					if ((value != null))
					{
						value.RightAssociations.Add(this);
						this._SecurableContextId = value.SecurableContextId;
					}
					else
					{
						this._SecurableContextId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SecurableContext");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rights")]
	public partial class Right : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RightId;
		
		private string _DisplayName;
		
		private EntitySet<RightAssociation> _RightAssociations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRightIdChanging(int value);
    partial void OnRightIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    #endregion
		
		public Right()
		{
			this._RightAssociations = new EntitySet<RightAssociation>(new Action<RightAssociation>(this.attach_RightAssociations), new Action<RightAssociation>(this.detach_RightAssociations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RightId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RightId
		{
			get
			{
				return this._RightId;
			}
			set
			{
				if ((this._RightId != value))
				{
					this.OnRightIdChanging(value);
					this.SendPropertyChanging();
					this._RightId = value;
					this.SendPropertyChanged("RightId");
					this.OnRightIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(50)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Right_RightAssociation", Storage="_RightAssociations", ThisKey="RightId", OtherKey="RightId")]
		public EntitySet<RightAssociation> RightAssociations
		{
			get
			{
				return this._RightAssociations;
			}
			set
			{
				this._RightAssociations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RightAssociations(RightAssociation entity)
		{
			this.SendPropertyChanging();
			entity.Right = this;
		}
		
		private void detach_RightAssociations(RightAssociation entity)
		{
			this.SendPropertyChanging();
			entity.Right = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleId;
		
		private string _DisplayName;
		
		private System.Nullable<int> _SecurableContextId;
		
		private EntitySet<Group> _Groups;
		
		private EntitySet<RightAssociation> _RightAssociations;
		
		private EntityRef<SecurableContext> _SecurableContext;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnSecurableContextIdChanging(System.Nullable<int> value);
    partial void OnSecurableContextIdChanged();
    #endregion
		
		public Role()
		{
			this._Groups = new EntitySet<Group>(new Action<Group>(this.attach_Groups), new Action<Group>(this.detach_Groups));
			this._RightAssociations = new EntitySet<RightAssociation>(new Action<RightAssociation>(this.attach_RightAssociations), new Action<RightAssociation>(this.detach_RightAssociations));
			this._SecurableContext = default(EntityRef<SecurableContext>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(MAX)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurableContextId", DbType="Int")]
		public System.Nullable<int> SecurableContextId
		{
			get
			{
				return this._SecurableContextId;
			}
			set
			{
				if ((this._SecurableContextId != value))
				{
					if (this._SecurableContext.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSecurableContextIdChanging(value);
					this.SendPropertyChanging();
					this._SecurableContextId = value;
					this.SendPropertyChanged("SecurableContextId");
					this.OnSecurableContextIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Group", Storage="_Groups", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<Group> Groups
		{
			get
			{
				return this._Groups;
			}
			set
			{
				this._Groups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RightAssociation", Storage="_RightAssociations", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<RightAssociation> RightAssociations
		{
			get
			{
				return this._RightAssociations;
			}
			set
			{
				this._RightAssociations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurableContext_Role", Storage="_SecurableContext", ThisKey="SecurableContextId", OtherKey="SecurableContextId", IsForeignKey=true)]
		public SecurableContext SecurableContext
		{
			get
			{
				return this._SecurableContext.Entity;
			}
			set
			{
				SecurableContext previousValue = this._SecurableContext.Entity;
				if (((previousValue != value) 
							|| (this._SecurableContext.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecurableContext.Entity = null;
						previousValue.Roles.Remove(this);
					}
					this._SecurableContext.Entity = value;
					if ((value != null))
					{
						value.Roles.Add(this);
						this._SecurableContextId = value.SecurableContextId;
					}
					else
					{
						this._SecurableContextId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SecurableContext");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_RightAssociations(RightAssociation entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_RightAssociations(RightAssociation entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecurableContexts")]
	public partial class SecurableContext : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SecurableContextId;
		
		private string _SecurableContextName;
		
		private System.Nullable<System.Guid> _SecurableContextUid;
		
		private EntitySet<GroupAssociation> _GroupAssociations;
		
		private EntitySet<User> _Users;
		
		private EntitySet<Membership> _Memberships;
		
		private EntitySet<RightAssociation> _RightAssociations;
		
		private EntitySet<Role> _Roles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSecurableContextIdChanging(int value);
    partial void OnSecurableContextIdChanged();
    partial void OnSecurableContextNameChanging(string value);
    partial void OnSecurableContextNameChanged();
    partial void OnSecurableContextUidChanging(System.Nullable<System.Guid> value);
    partial void OnSecurableContextUidChanged();
    #endregion
		
		public SecurableContext()
		{
			this._GroupAssociations = new EntitySet<GroupAssociation>(new Action<GroupAssociation>(this.attach_GroupAssociations), new Action<GroupAssociation>(this.detach_GroupAssociations));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Memberships = new EntitySet<Membership>(new Action<Membership>(this.attach_Memberships), new Action<Membership>(this.detach_Memberships));
			this._RightAssociations = new EntitySet<RightAssociation>(new Action<RightAssociation>(this.attach_RightAssociations), new Action<RightAssociation>(this.detach_RightAssociations));
			this._Roles = new EntitySet<Role>(new Action<Role>(this.attach_Roles), new Action<Role>(this.detach_Roles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurableContextId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SecurableContextId
		{
			get
			{
				return this._SecurableContextId;
			}
			set
			{
				if ((this._SecurableContextId != value))
				{
					this.OnSecurableContextIdChanging(value);
					this.SendPropertyChanging();
					this._SecurableContextId = value;
					this.SendPropertyChanged("SecurableContextId");
					this.OnSecurableContextIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurableContextName", DbType="NVarChar(MAX)")]
		public string SecurableContextName
		{
			get
			{
				return this._SecurableContextName;
			}
			set
			{
				if ((this._SecurableContextName != value))
				{
					this.OnSecurableContextNameChanging(value);
					this.SendPropertyChanging();
					this._SecurableContextName = value;
					this.SendPropertyChanged("SecurableContextName");
					this.OnSecurableContextNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurableContextUid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SecurableContextUid
		{
			get
			{
				return this._SecurableContextUid;
			}
			set
			{
				if ((this._SecurableContextUid != value))
				{
					this.OnSecurableContextUidChanging(value);
					this.SendPropertyChanging();
					this._SecurableContextUid = value;
					this.SendPropertyChanged("SecurableContextUid");
					this.OnSecurableContextUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurableContext_GroupAssociation", Storage="_GroupAssociations", ThisKey="SecurableContextId", OtherKey="SecurableContextId")]
		public EntitySet<GroupAssociation> GroupAssociations
		{
			get
			{
				return this._GroupAssociations;
			}
			set
			{
				this._GroupAssociations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurableContext_User", Storage="_Users", ThisKey="SecurableContextId", OtherKey="SecurableContextId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurableContext_Membership", Storage="_Memberships", ThisKey="SecurableContextId", OtherKey="SecurableContextId")]
		public EntitySet<Membership> Memberships
		{
			get
			{
				return this._Memberships;
			}
			set
			{
				this._Memberships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurableContext_RightAssociation", Storage="_RightAssociations", ThisKey="SecurableContextId", OtherKey="SecurableContextId")]
		public EntitySet<RightAssociation> RightAssociations
		{
			get
			{
				return this._RightAssociations;
			}
			set
			{
				this._RightAssociations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurableContext_Role", Storage="_Roles", ThisKey="SecurableContextId", OtherKey="SecurableContextId")]
		public EntitySet<Role> Roles
		{
			get
			{
				return this._Roles;
			}
			set
			{
				this._Roles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupAssociations(GroupAssociation entity)
		{
			this.SendPropertyChanging();
			entity.SecurableContext = this;
		}
		
		private void detach_GroupAssociations(GroupAssociation entity)
		{
			this.SendPropertyChanging();
			entity.SecurableContext = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.SecurableContext = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.SecurableContext = null;
		}
		
		private void attach_Memberships(Membership entity)
		{
			this.SendPropertyChanging();
			entity.SecurableContext = this;
		}
		
		private void detach_Memberships(Membership entity)
		{
			this.SendPropertyChanging();
			entity.SecurableContext = null;
		}
		
		private void attach_RightAssociations(RightAssociation entity)
		{
			this.SendPropertyChanging();
			entity.SecurableContext = this;
		}
		
		private void detach_RightAssociations(RightAssociation entity)
		{
			this.SendPropertyChanging();
			entity.SecurableContext = null;
		}
		
		private void attach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.SecurableContext = this;
		}
		
		private void detach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.SecurableContext = null;
		}
	}
}
#pragma warning restore 1591
