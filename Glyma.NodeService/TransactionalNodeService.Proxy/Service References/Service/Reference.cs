//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace TransactionalNodeService.Service {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GlymaVersion", Namespace="http://schemas.datacontract.org/2004/07/TransactionalNodeService.Common.Model")]
    public partial class GlymaVersion : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int BuildField;
        
        private int MajorField;
        
        private int MinorField;
        
        private int RevisionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Build {
            get {
                return this.BuildField;
            }
            set {
                if ((this.BuildField.Equals(value) != true)) {
                    this.BuildField = value;
                    this.RaisePropertyChanged("Build");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Major {
            get {
                return this.MajorField;
            }
            set {
                if ((this.MajorField.Equals(value) != true)) {
                    this.MajorField = value;
                    this.RaisePropertyChanged("Major");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Minor {
            get {
                return this.MinorField;
            }
            set {
                if ((this.MinorField.Equals(value) != true)) {
                    this.MinorField = value;
                    this.RaisePropertyChanged("Minor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Revision {
            get {
                return this.RevisionField;
            }
            set {
                if ((this.RevisionField.Equals(value) != true)) {
                    this.RevisionField = value;
                    this.RaisePropertyChanged("Revision");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RS", Namespace="http://sevensigma.com.au/TransactionalNodeService/OpObjects")]
    public partial class RS : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.CH> CField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.CH> C {
            get {
                return this.CField;
            }
            set {
                if ((object.ReferenceEquals(this.CField, value) != true)) {
                    this.CField = value;
                    this.RaisePropertyChanged("C");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CH", Namespace="http://sevensigma.com.au/TransactionalNodeService/OpObjects")]
    public partial class CH : object, System.ComponentModel.INotifyPropertyChanged {
        
        private TransactionalNodeService.Service.DE DField;
        
        private TransactionalNodeService.Service.DA MField;
        
        private TransactionalNodeService.Service.NO NField;
        
        private TransactionalNodeService.Service.TransactionType OField;
        
        private System.Guid PField;
        
        private TransactionalNodeService.Service.RE RField;
        
        private long TField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.DE D {
            get {
                return this.DField;
            }
            set {
                if ((object.ReferenceEquals(this.DField, value) != true)) {
                    this.DField = value;
                    this.RaisePropertyChanged("D");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.DA M {
            get {
                return this.MField;
            }
            set {
                if ((object.ReferenceEquals(this.MField, value) != true)) {
                    this.MField = value;
                    this.RaisePropertyChanged("M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.NO N {
            get {
                return this.NField;
            }
            set {
                if ((object.ReferenceEquals(this.NField, value) != true)) {
                    this.NField = value;
                    this.RaisePropertyChanged("N");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.TransactionType O {
            get {
                return this.OField;
            }
            set {
                if ((this.OField.Equals(value) != true)) {
                    this.OField = value;
                    this.RaisePropertyChanged("O");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid P {
            get {
                return this.PField;
            }
            set {
                if ((this.PField.Equals(value) != true)) {
                    this.PField = value;
                    this.RaisePropertyChanged("P");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.RE R {
            get {
                return this.RField;
            }
            set {
                if ((object.ReferenceEquals(this.RField, value) != true)) {
                    this.RField = value;
                    this.RaisePropertyChanged("R");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long T {
            get {
                return this.TField;
            }
            set {
                if ((this.TField.Equals(value) != true)) {
                    this.TField = value;
                    this.RaisePropertyChanged("T");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DE", Namespace="http://sevensigma.com.au/TransactionalNodeService/OpObjects")]
    public partial class DE : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Guid DField;
        
        private System.Guid NField;
        
        private System.Guid RField;
        
        private System.Guid TField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid D {
            get {
                return this.DField;
            }
            set {
                if ((this.DField.Equals(value) != true)) {
                    this.DField = value;
                    this.RaisePropertyChanged("D");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid N {
            get {
                return this.NField;
            }
            set {
                if ((this.NField.Equals(value) != true)) {
                    this.NField = value;
                    this.RaisePropertyChanged("N");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid R {
            get {
                return this.RField;
            }
            set {
                if ((this.RField.Equals(value) != true)) {
                    this.RField = value;
                    this.RaisePropertyChanged("R");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid T {
            get {
                return this.TField;
            }
            set {
                if ((this.TField.Equals(value) != true)) {
                    this.TField = value;
                    this.RaisePropertyChanged("T");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DA", Namespace="http://sevensigma.com.au/TransactionalNodeService/OpObjects")]
    public partial class DA : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CBField;
        
        private System.Nullable<System.DateTime> CRField;
        
        private System.Nullable<System.Guid> DField;
        
        private System.Guid DIField;
        
        private System.Guid MField;
        
        private string MBField;
        
        private string MNField;
        
        private System.Nullable<System.DateTime> MOField;
        
        private string MVField;
        
        private System.Nullable<System.Guid> NField;
        
        private System.Nullable<System.Guid> RField;
        
        private System.Nullable<System.Guid> RMField;
        
        private System.Guid TField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CB {
            get {
                return this.CBField;
            }
            set {
                if ((object.ReferenceEquals(this.CBField, value) != true)) {
                    this.CBField = value;
                    this.RaisePropertyChanged("CB");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CR {
            get {
                return this.CRField;
            }
            set {
                if ((this.CRField.Equals(value) != true)) {
                    this.CRField = value;
                    this.RaisePropertyChanged("CR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> D {
            get {
                return this.DField;
            }
            set {
                if ((this.DField.Equals(value) != true)) {
                    this.DField = value;
                    this.RaisePropertyChanged("D");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid DI {
            get {
                return this.DIField;
            }
            set {
                if ((this.DIField.Equals(value) != true)) {
                    this.DIField = value;
                    this.RaisePropertyChanged("DI");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid M {
            get {
                return this.MField;
            }
            set {
                if ((this.MField.Equals(value) != true)) {
                    this.MField = value;
                    this.RaisePropertyChanged("M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MB {
            get {
                return this.MBField;
            }
            set {
                if ((object.ReferenceEquals(this.MBField, value) != true)) {
                    this.MBField = value;
                    this.RaisePropertyChanged("MB");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MN {
            get {
                return this.MNField;
            }
            set {
                if ((object.ReferenceEquals(this.MNField, value) != true)) {
                    this.MNField = value;
                    this.RaisePropertyChanged("MN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> MO {
            get {
                return this.MOField;
            }
            set {
                if ((this.MOField.Equals(value) != true)) {
                    this.MOField = value;
                    this.RaisePropertyChanged("MO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MV {
            get {
                return this.MVField;
            }
            set {
                if ((object.ReferenceEquals(this.MVField, value) != true)) {
                    this.MVField = value;
                    this.RaisePropertyChanged("MV");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> N {
            get {
                return this.NField;
            }
            set {
                if ((this.NField.Equals(value) != true)) {
                    this.NField = value;
                    this.RaisePropertyChanged("N");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> R {
            get {
                return this.RField;
            }
            set {
                if ((this.RField.Equals(value) != true)) {
                    this.RField = value;
                    this.RaisePropertyChanged("R");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> RM {
            get {
                return this.RMField;
            }
            set {
                if ((this.RMField.Equals(value) != true)) {
                    this.RMField = value;
                    this.RaisePropertyChanged("RM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid T {
            get {
                return this.TField;
            }
            set {
                if ((this.TField.Equals(value) != true)) {
                    this.TField = value;
                    this.RaisePropertyChanged("T");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NO", Namespace="http://sevensigma.com.au/TransactionalNodeService/OpObjects")]
    public partial class NO : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CBField;
        
        private System.Nullable<System.DateTime> CRField;
        
        private System.Guid DField;
        
        private int DHField;
        
        private System.Collections.Generic.Dictionary<TransactionalNodeService.Service.MetadataContext, TransactionalNodeService.Service.DA> MField;
        
        private string MBField;
        
        private System.Nullable<System.DateTime> MOField;
        
        private System.Guid NField;
        
        private string OField;
        
        private System.Nullable<System.Guid> RMField;
        
        private System.Guid TField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CB {
            get {
                return this.CBField;
            }
            set {
                if ((object.ReferenceEquals(this.CBField, value) != true)) {
                    this.CBField = value;
                    this.RaisePropertyChanged("CB");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CR {
            get {
                return this.CRField;
            }
            set {
                if ((this.CRField.Equals(value) != true)) {
                    this.CRField = value;
                    this.RaisePropertyChanged("CR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid D {
            get {
                return this.DField;
            }
            set {
                if ((this.DField.Equals(value) != true)) {
                    this.DField = value;
                    this.RaisePropertyChanged("D");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DH {
            get {
                return this.DHField;
            }
            set {
                if ((this.DHField.Equals(value) != true)) {
                    this.DHField = value;
                    this.RaisePropertyChanged("DH");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<TransactionalNodeService.Service.MetadataContext, TransactionalNodeService.Service.DA> M {
            get {
                return this.MField;
            }
            set {
                if ((object.ReferenceEquals(this.MField, value) != true)) {
                    this.MField = value;
                    this.RaisePropertyChanged("M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MB {
            get {
                return this.MBField;
            }
            set {
                if ((object.ReferenceEquals(this.MBField, value) != true)) {
                    this.MBField = value;
                    this.RaisePropertyChanged("MB");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> MO {
            get {
                return this.MOField;
            }
            set {
                if ((this.MOField.Equals(value) != true)) {
                    this.MOField = value;
                    this.RaisePropertyChanged("MO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid N {
            get {
                return this.NField;
            }
            set {
                if ((this.NField.Equals(value) != true)) {
                    this.NField = value;
                    this.RaisePropertyChanged("N");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string O {
            get {
                return this.OField;
            }
            set {
                if ((object.ReferenceEquals(this.OField, value) != true)) {
                    this.OField = value;
                    this.RaisePropertyChanged("O");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> RM {
            get {
                return this.RMField;
            }
            set {
                if ((this.RMField.Equals(value) != true)) {
                    this.RMField = value;
                    this.RaisePropertyChanged("RM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid T {
            get {
                return this.TField;
            }
            set {
                if ((this.TField.Equals(value) != true)) {
                    this.TField = value;
                    this.RaisePropertyChanged("T");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RE", Namespace="http://sevensigma.com.au/TransactionalNodeService/OpObjects")]
    public partial class RE : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CBField;
        
        private System.Nullable<System.DateTime> CRField;
        
        private System.Guid DField;
        
        private System.Collections.Generic.Dictionary<TransactionalNodeService.Service.MetadataContext, TransactionalNodeService.Service.DA> MField;
        
        private string MBField;
        
        private System.Nullable<System.DateTime> MOField;
        
        private System.Collections.Generic.Dictionary<System.Guid, System.Guid> NField;
        
        private string OField;
        
        private System.Guid RField;
        
        private System.Nullable<System.Guid> RMField;
        
        private System.Guid TField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CB {
            get {
                return this.CBField;
            }
            set {
                if ((object.ReferenceEquals(this.CBField, value) != true)) {
                    this.CBField = value;
                    this.RaisePropertyChanged("CB");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CR {
            get {
                return this.CRField;
            }
            set {
                if ((this.CRField.Equals(value) != true)) {
                    this.CRField = value;
                    this.RaisePropertyChanged("CR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid D {
            get {
                return this.DField;
            }
            set {
                if ((this.DField.Equals(value) != true)) {
                    this.DField = value;
                    this.RaisePropertyChanged("D");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<TransactionalNodeService.Service.MetadataContext, TransactionalNodeService.Service.DA> M {
            get {
                return this.MField;
            }
            set {
                if ((object.ReferenceEquals(this.MField, value) != true)) {
                    this.MField = value;
                    this.RaisePropertyChanged("M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MB {
            get {
                return this.MBField;
            }
            set {
                if ((object.ReferenceEquals(this.MBField, value) != true)) {
                    this.MBField = value;
                    this.RaisePropertyChanged("MB");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> MO {
            get {
                return this.MOField;
            }
            set {
                if ((this.MOField.Equals(value) != true)) {
                    this.MOField = value;
                    this.RaisePropertyChanged("MO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<System.Guid, System.Guid> N {
            get {
                return this.NField;
            }
            set {
                if ((object.ReferenceEquals(this.NField, value) != true)) {
                    this.NField = value;
                    this.RaisePropertyChanged("N");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string O {
            get {
                return this.OField;
            }
            set {
                if ((object.ReferenceEquals(this.OField, value) != true)) {
                    this.OField = value;
                    this.RaisePropertyChanged("O");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid R {
            get {
                return this.RField;
            }
            set {
                if ((this.RField.Equals(value) != true)) {
                    this.RField = value;
                    this.RaisePropertyChanged("R");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> RM {
            get {
                return this.RMField;
            }
            set {
                if ((this.RMField.Equals(value) != true)) {
                    this.RMField = value;
                    this.RaisePropertyChanged("RM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid T {
            get {
                return this.TField;
            }
            set {
                if ((this.TField.Equals(value) != true)) {
                    this.TField = value;
                    this.RaisePropertyChanged("T");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransactionType", Namespace="http://schemas.datacontract.org/2004/07/TransactionalNodeService.Common")]
    public enum TransactionType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Undefined = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BeginSession = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CompleteSession = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CreateNode = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeleteNode = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CreateRelationship = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeleteRelationship = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CreateDescriptor = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CreateMetadata = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UpdateMetadata = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeleteMetadata = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UpdateNode = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UpdateRelationship = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UpdateDescriptor = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CreateDomain = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CreateRootMap = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeleteDomain = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeleteRootMap = 17,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MetadataContext", Namespace="http://schemas.datacontract.org/2004/07/TransactionalNodeService.Common")]
    public partial class MetadataContext : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<System.Guid> DescriptorTypeUidField;
        
        private System.Guid MetadataIdField;
        
        private string MetadataNameField;
        
        private System.Nullable<System.Guid> NodeUidField;
        
        private System.Nullable<System.Guid> RelationshipUidField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> DescriptorTypeUid {
            get {
                return this.DescriptorTypeUidField;
            }
            set {
                if ((this.DescriptorTypeUidField.Equals(value) != true)) {
                    this.DescriptorTypeUidField = value;
                    this.RaisePropertyChanged("DescriptorTypeUid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid MetadataId {
            get {
                return this.MetadataIdField;
            }
            set {
                if ((this.MetadataIdField.Equals(value) != true)) {
                    this.MetadataIdField = value;
                    this.RaisePropertyChanged("MetadataId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MetadataName {
            get {
                return this.MetadataNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataNameField, value) != true)) {
                    this.MetadataNameField = value;
                    this.RaisePropertyChanged("MetadataName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> NodeUid {
            get {
                return this.NodeUidField;
            }
            set {
                if ((this.NodeUidField.Equals(value) != true)) {
                    this.NodeUidField = value;
                    this.RaisePropertyChanged("NodeUid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> RelationshipUid {
            get {
                return this.RelationshipUidField;
            }
            set {
                if ((this.RelationshipUidField.Equals(value) != true)) {
                    this.RelationshipUidField = value;
                    this.RaisePropertyChanged("RelationshipUid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ME", Namespace="http://sevensigma.com.au/TransactionalNodeService/OpObjects")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.MetadataType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.RT))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.DT))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.NT))]
    public partial class ME : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Guid IField;
        
        private string NField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid I {
            get {
                return this.IField;
            }
            set {
                if ((this.IField.Equals(value) != true)) {
                    this.IField = value;
                    this.RaisePropertyChanged("I");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string N {
            get {
                return this.NField;
            }
            set {
                if ((object.ReferenceEquals(this.NField, value) != true)) {
                    this.NField = value;
                    this.RaisePropertyChanged("N");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MetadataType", Namespace="http://sevensigma.com.au/TransactionalNodeService/OpObjects")]
    public partial class MetadataType : TransactionalNodeService.Service.ME {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RT", Namespace="http://sevensigma.com.au/TransactionalNodeService/OpObjects")]
    public partial class RT : TransactionalNodeService.Service.ME {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DT", Namespace="http://sevensigma.com.au/TransactionalNodeService/OpObjects")]
    public partial class DT : TransactionalNodeService.Service.ME {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NT", Namespace="http://sevensigma.com.au/TransactionalNodeService/OpObjects")]
    public partial class NT : TransactionalNodeService.Service.ME {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryResponse", Namespace="http://schemas.datacontract.org/2004/07/TransactionalNodeService.Common")]
    public partial class QueryResponse : object, System.ComponentModel.INotifyPropertyChanged {
        
        private TransactionalNodeService.Service.Domain DomainField;
        
        private int ErrorIdField;
        
        private string ErrorMessageField;
        
        private int FinalObjectIndexField;
        
        private int LastObjectIndexField;
        
        private TransactionalNodeService.Service.NO NodeContextField;
        
        private System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.NO> NodesField;
        
        private System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.RE> RelationshipsField;
        
        private int StartingObjectIndexField;
        
        private string ZNOField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.Domain Domain {
            get {
                return this.DomainField;
            }
            set {
                if ((object.ReferenceEquals(this.DomainField, value) != true)) {
                    this.DomainField = value;
                    this.RaisePropertyChanged("Domain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ErrorId {
            get {
                return this.ErrorIdField;
            }
            set {
                if ((this.ErrorIdField.Equals(value) != true)) {
                    this.ErrorIdField = value;
                    this.RaisePropertyChanged("ErrorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FinalObjectIndex {
            get {
                return this.FinalObjectIndexField;
            }
            set {
                if ((this.FinalObjectIndexField.Equals(value) != true)) {
                    this.FinalObjectIndexField = value;
                    this.RaisePropertyChanged("FinalObjectIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LastObjectIndex {
            get {
                return this.LastObjectIndexField;
            }
            set {
                if ((this.LastObjectIndexField.Equals(value) != true)) {
                    this.LastObjectIndexField = value;
                    this.RaisePropertyChanged("LastObjectIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.NO NodeContext {
            get {
                return this.NodeContextField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeContextField, value) != true)) {
                    this.NodeContextField = value;
                    this.RaisePropertyChanged("NodeContext");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.NO> Nodes {
            get {
                return this.NodesField;
            }
            set {
                if ((object.ReferenceEquals(this.NodesField, value) != true)) {
                    this.NodesField = value;
                    this.RaisePropertyChanged("Nodes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.RE> Relationships {
            get {
                return this.RelationshipsField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationshipsField, value) != true)) {
                    this.RelationshipsField = value;
                    this.RaisePropertyChanged("Relationships");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StartingObjectIndex {
            get {
                return this.StartingObjectIndexField;
            }
            set {
                if ((this.StartingObjectIndexField.Equals(value) != true)) {
                    this.StartingObjectIndexField = value;
                    this.RaisePropertyChanged("StartingObjectIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZNO {
            get {
                return this.ZNOField;
            }
            set {
                if ((object.ReferenceEquals(this.ZNOField, value) != true)) {
                    this.ZNOField = value;
                    this.RaisePropertyChanged("ZNO");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Domain", Namespace="http://schemas.datacontract.org/2004/07/TransactionalNodeService.Common.Model")]
    public partial class Domain : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DomainOriginalIdField;
        
        private System.Guid DomainUidField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DomainOriginalId {
            get {
                return this.DomainOriginalIdField;
            }
            set {
                if ((object.ReferenceEquals(this.DomainOriginalIdField, value) != true)) {
                    this.DomainOriginalIdField = value;
                    this.RaisePropertyChanged("DomainOriginalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid DomainUid {
            get {
                return this.DomainUidField;
            }
            set {
                if ((this.DomainUidField.Equals(value) != true)) {
                    this.DomainUidField = value;
                    this.RaisePropertyChanged("DomainUid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TypeResponse", Namespace="http://schemas.datacontract.org/2004/07/TransactionalNodeService.Common")]
    public partial class TypeResponse : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.DT> DescriptorTypesField;
        
        private System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.MetadataType> MetadataTypesField;
        
        private System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.NT> NodeTypesField;
        
        private System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.RT> RelationshipTypesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.DT> DescriptorTypes {
            get {
                return this.DescriptorTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptorTypesField, value) != true)) {
                    this.DescriptorTypesField = value;
                    this.RaisePropertyChanged("DescriptorTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.MetadataType> MetadataTypes {
            get {
                return this.MetadataTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataTypesField, value) != true)) {
                    this.MetadataTypesField = value;
                    this.RaisePropertyChanged("MetadataTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.NT> NodeTypes {
            get {
                return this.NodeTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeTypesField, value) != true)) {
                    this.NodeTypesField = value;
                    this.RaisePropertyChanged("NodeTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.RT> RelationshipTypes {
            get {
                return this.RelationshipTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationshipTypesField, value) != true)) {
                    this.RelationshipTypesField = value;
                    this.RaisePropertyChanged("RelationshipTypes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EdgeConditions", Namespace="http://schemas.datacontract.org/2004/07/TransactionalNodeService.Common")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.RS))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.CH>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.CH))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.DE))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.DA))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.NO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.RE))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.NT))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.ME))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.MetadataType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.RT))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.DT))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.MP))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.OPS))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BMA))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BND))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BRD))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BMD))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BNU))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BRU))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BMU))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BNA))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BRA))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.BOR>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BOR))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.GlymaVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.Domain))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.MetadataContext))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.TransactionType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.QueryResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.TypeResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.NotEqualEdgeCondOp))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.EdgeConditionTest))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.EdgeComponentType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.EdgeElementType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.OrEdgeCondOp))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.AndEdgeCondOp))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.EqualEdgeCondOp))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.FilterConditions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchConditions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.SearchCondition>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchCondition))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SortOrderOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchMapResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchedNode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.MapParameterType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<TransactionalNodeService.Service.MetadataContext, TransactionalNodeService.Service.DA>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, System.Guid>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.NO>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.RE>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.DT>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.MetadataType>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.NT>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.RT>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.QueryResponse>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<object>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.SearchedNode>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP>))]
    public partial class EdgeConditions : object, System.ComponentModel.INotifyPropertyChanged {
        
        private object EdgeConditionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object EdgeCondition {
            get {
                return this.EdgeConditionField;
            }
            set {
                if ((object.ReferenceEquals(this.EdgeConditionField, value) != true)) {
                    this.EdgeConditionField = value;
                    this.RaisePropertyChanged("EdgeCondition");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MP", Namespace="http://sevensigma.com.au/TransactionalNodeService/OpObjects")]
    public partial class MP : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool DField;
        
        private System.Guid IField;
        
        private System.Guid SField;
        
        private TransactionalNodeService.Service.MapParameterType TField;
        
        private System.Guid VField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool D {
            get {
                return this.DField;
            }
            set {
                if ((this.DField.Equals(value) != true)) {
                    this.DField = value;
                    this.RaisePropertyChanged("D");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid I {
            get {
                return this.IField;
            }
            set {
                if ((this.IField.Equals(value) != true)) {
                    this.IField = value;
                    this.RaisePropertyChanged("I");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid S {
            get {
                return this.SField;
            }
            set {
                if ((this.SField.Equals(value) != true)) {
                    this.SField = value;
                    this.RaisePropertyChanged("S");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.MapParameterType T {
            get {
                return this.TField;
            }
            set {
                if ((this.TField.Equals(value) != true)) {
                    this.TField = value;
                    this.RaisePropertyChanged("T");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid V {
            get {
                return this.VField;
            }
            set {
                if ((this.VField.Equals(value) != true)) {
                    this.VField = value;
                    this.RaisePropertyChanged("V");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OPS", Namespace="http://sevensigma.com.au/TransactionalNodeService/OpObjects")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.RS))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.CH>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.CH))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.DE))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.DA))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.NO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.RE))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.NT))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.ME))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.MetadataType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.RT))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.DT))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.MP))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BMA))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BND))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BRD))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BMD))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BNU))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BRU))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BMU))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BNA))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BRA))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.BOR>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BOR))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.GlymaVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.Domain))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.MetadataContext))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.TransactionType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.QueryResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.TypeResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.EdgeConditions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.NotEqualEdgeCondOp))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.EdgeConditionTest))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.EdgeComponentType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.EdgeElementType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.OrEdgeCondOp))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.AndEdgeCondOp))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.EqualEdgeCondOp))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.FilterConditions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchConditions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.SearchCondition>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchCondition))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SortOrderOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchMapResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchedNode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.MapParameterType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<TransactionalNodeService.Service.MetadataContext, TransactionalNodeService.Service.DA>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, System.Guid>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.NO>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.RE>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.DT>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.MetadataType>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.NT>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.RT>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.QueryResponse>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<object>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.SearchedNode>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP>))]
    public partial class OPS : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<object> OField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<object> O {
            get {
                return this.OField;
            }
            set {
                if ((object.ReferenceEquals(this.OField, value) != true)) {
                    this.OField = value;
                    this.RaisePropertyChanged("O");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BMA", Namespace="http://sevensigma.com.au/TransactionalNodeService/OpObjects")]
    public partial class BMA : object, System.ComponentModel.INotifyPropertyChanged {
        
        private TransactionalNodeService.Service.MP DField;
        
        private TransactionalNodeService.Service.DT DTField;
        
        private int IField;
        
        private string MNField;
        
        private string MVField;
        
        private TransactionalNodeService.Service.MP NField;
        
        private TransactionalNodeService.Service.MP RField;
        
        private System.Guid RIField;
        
        private TransactionalNodeService.Service.MP RMField;
        
        private TransactionalNodeService.Service.MetadataType TField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.MP D {
            get {
                return this.DField;
            }
            set {
                if ((object.ReferenceEquals(this.DField, value) != true)) {
                    this.DField = value;
                    this.RaisePropertyChanged("D");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.DT DT {
            get {
                return this.DTField;
            }
            set {
                if ((object.ReferenceEquals(this.DTField, value) != true)) {
                    this.DTField = value;
                    this.RaisePropertyChanged("DT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int I {
            get {
                return this.IField;
            }
            set {
                if ((this.IField.Equals(value) != true)) {
                    this.IField = value;
                    this.RaisePropertyChanged("I");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MN {
            get {
                return this.MNField;
            }
            set {
                if ((object.ReferenceEquals(this.MNField, value) != true)) {
                    this.MNField = value;
                    this.RaisePropertyChanged("MN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MV {
            get {
                return this.MVField;
            }
            set {
                if ((object.ReferenceEquals(this.MVField, value) != true)) {
                    this.MVField = value;
                    this.RaisePropertyChanged("MV");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.MP N {
            get {
                return this.NField;
            }
            set {
                if ((object.ReferenceEquals(this.NField, value) != true)) {
                    this.NField = value;
                    this.RaisePropertyChanged("N");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.MP R {
            get {
                return this.RField;
            }
            set {
                if ((object.ReferenceEquals(this.RField, value) != true)) {
                    this.RField = value;
                    this.RaisePropertyChanged("R");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid RI {
            get {
                return this.RIField;
            }
            set {
                if ((this.RIField.Equals(value) != true)) {
                    this.RIField = value;
                    this.RaisePropertyChanged("RI");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.MP RM {
            get {
                return this.RMField;
            }
            set {
                if ((object.ReferenceEquals(this.RMField, value) != true)) {
                    this.RMField = value;
                    this.RaisePropertyChanged("RM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.MetadataType T {
            get {
                return this.TField;
            }
            set {
                if ((object.ReferenceEquals(this.TField, value) != true)) {
                    this.TField = value;
                    this.RaisePropertyChanged("T");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BND", Namespace="http://sevensigma.com.au/TransactionalNodeService/OpObjects")]
    public partial class BND : object, System.ComponentModel.INotifyPropertyChanged {
        
        private TransactionalNodeService.Service.MP DField;
        
        private int IField;
        
        private TransactionalNodeService.Service.MP NField;
        
        private System.Guid RIField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.MP D {
            get {
                return this.DField;
            }
            set {
                if ((object.ReferenceEquals(this.DField, value) != true)) {
                    this.DField = value;
                    this.RaisePropertyChanged("D");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int I {
            get {
                return this.IField;
            }
            set {
                if ((this.IField.Equals(value) != true)) {
                    this.IField = value;
                    this.RaisePropertyChanged("I");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.MP N {
            get {
                return this.NField;
            }
            set {
                if ((object.ReferenceEquals(this.NField, value) != true)) {
                    this.NField = value;
                    this.RaisePropertyChanged("N");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid RI {
            get {
                return this.RIField;
            }
            set {
                if ((this.RIField.Equals(value) != true)) {
                    this.RIField = value;
                    this.RaisePropertyChanged("RI");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BRD", Namespace="http://sevensigma.com.au/TransactionalNodeService/OpObjects")]
    public partial class BRD : object, System.ComponentModel.INotifyPropertyChanged {
        
        private TransactionalNodeService.Service.MP DField;
        
        private int IField;
        
        private TransactionalNodeService.Service.MP RField;
        
        private System.Guid RIField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.MP D {
            get {
                return this.DField;
            }
            set {
                if ((object.ReferenceEquals(this.DField, value) != true)) {
                    this.DField = value;
                    this.RaisePropertyChanged("D");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int I {
            get {
                return this.IField;
            }
            set {
                if ((this.IField.Equals(value) != true)) {
                    this.IField = value;
                    this.RaisePropertyChanged("I");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.MP R {
            get {
                return this.RField;
            }
            set {
                if ((object.ReferenceEquals(this.RField, value) != true)) {
                    this.RField = value;
                    this.RaisePropertyChanged("R");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid RI {
            get {
                return this.RIField;
            }
            set {
                if ((this.RIField.Equals(value) != true)) {
                    this.RIField = value;
                    this.RaisePropertyChanged("RI");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BMD", Namespace="http://sevensigma.com.au/TransactionalNodeService/OpObjects")]
    public partial class BMD : object, System.ComponentModel.INotifyPropertyChanged {
        
        private TransactionalNodeService.Service.MP DField;
        
        private int IField;
        
        private TransactionalNodeService.Service.MP MField;
        
        private System.Guid RIField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.MP D {
            get {
                return this.DField;
            }
            set {
                if ((object.ReferenceEquals(this.DField, value) != true)) {
                    this.DField = value;
                    this.RaisePropertyChanged("D");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int I {
            get {
                return this.IField;
            }
            set {
                if ((this.IField.Equals(value) != true)) {
                    this.IField = value;
                    this.RaisePropertyChanged("I");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.MP M {
            get {
                return this.MField;
            }
            set {
                if ((object.ReferenceEquals(this.MField, value) != true)) {
                    this.MField = value;
                    this.RaisePropertyChanged("M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid RI {
            get {
                return this.RIField;
            }
            set {
                if ((this.RIField.Equals(value) != true)) {
                    this.RIField = value;
                    this.RaisePropertyChanged("RI");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BNU", Namespace="http://sevensigma.com.au/TransactionalNodeService/OpObjects")]
    public partial class BNU : object, System.ComponentModel.INotifyPropertyChanged {
        
        private TransactionalNodeService.Service.MP DField;
        
        private int IField;
        
        private TransactionalNodeService.Service.MP NField;
        
        private System.Guid RIField;
        
        private TransactionalNodeService.Service.NT TField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.MP D {
            get {
                return this.DField;
            }
            set {
                if ((object.ReferenceEquals(this.DField, value) != true)) {
                    this.DField = value;
                    this.RaisePropertyChanged("D");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int I {
            get {
                return this.IField;
            }
            set {
                if ((this.IField.Equals(value) != true)) {
                    this.IField = value;
                    this.RaisePropertyChanged("I");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.MP N {
            get {
                return this.NField;
            }
            set {
                if ((object.ReferenceEquals(this.NField, value) != true)) {
                    this.NField = value;
                    this.RaisePropertyChanged("N");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid RI {
            get {
                return this.RIField;
            }
            set {
                if ((this.RIField.Equals(value) != true)) {
                    this.RIField = value;
                    this.RaisePropertyChanged("RI");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.NT T {
            get {
                return this.TField;
            }
            set {
                if ((object.ReferenceEquals(this.TField, value) != true)) {
                    this.TField = value;
                    this.RaisePropertyChanged("T");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BRU", Namespace="http://sevensigma.com.au/TransactionalNodeService/OpObjects")]
    public partial class BRU : object, System.ComponentModel.INotifyPropertyChanged {
        
        private TransactionalNodeService.Service.MP DField;
        
        private int IField;
        
        private System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> NField;
        
        private TransactionalNodeService.Service.MP RField;
        
        private System.Guid RIField;
        
        private TransactionalNodeService.Service.RT TField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.MP D {
            get {
                return this.DField;
            }
            set {
                if ((object.ReferenceEquals(this.DField, value) != true)) {
                    this.DField = value;
                    this.RaisePropertyChanged("D");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int I {
            get {
                return this.IField;
            }
            set {
                if ((this.IField.Equals(value) != true)) {
                    this.IField = value;
                    this.RaisePropertyChanged("I");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> N {
            get {
                return this.NField;
            }
            set {
                if ((object.ReferenceEquals(this.NField, value) != true)) {
                    this.NField = value;
                    this.RaisePropertyChanged("N");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.MP R {
            get {
                return this.RField;
            }
            set {
                if ((object.ReferenceEquals(this.RField, value) != true)) {
                    this.RField = value;
                    this.RaisePropertyChanged("R");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid RI {
            get {
                return this.RIField;
            }
            set {
                if ((this.RIField.Equals(value) != true)) {
                    this.RIField = value;
                    this.RaisePropertyChanged("RI");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.RT T {
            get {
                return this.TField;
            }
            set {
                if ((object.ReferenceEquals(this.TField, value) != true)) {
                    this.TField = value;
                    this.RaisePropertyChanged("T");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BMU", Namespace="http://sevensigma.com.au/TransactionalNodeService/OpObjects")]
    public partial class BMU : object, System.ComponentModel.INotifyPropertyChanged {
        
        private TransactionalNodeService.Service.MP DField;
        
        private int IField;
        
        private TransactionalNodeService.Service.MP MField;
        
        private string MNField;
        
        private string MVField;
        
        private System.Guid RIField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.MP D {
            get {
                return this.DField;
            }
            set {
                if ((object.ReferenceEquals(this.DField, value) != true)) {
                    this.DField = value;
                    this.RaisePropertyChanged("D");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int I {
            get {
                return this.IField;
            }
            set {
                if ((this.IField.Equals(value) != true)) {
                    this.IField = value;
                    this.RaisePropertyChanged("I");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.MP M {
            get {
                return this.MField;
            }
            set {
                if ((object.ReferenceEquals(this.MField, value) != true)) {
                    this.MField = value;
                    this.RaisePropertyChanged("M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MN {
            get {
                return this.MNField;
            }
            set {
                if ((object.ReferenceEquals(this.MNField, value) != true)) {
                    this.MNField = value;
                    this.RaisePropertyChanged("MN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MV {
            get {
                return this.MVField;
            }
            set {
                if ((object.ReferenceEquals(this.MVField, value) != true)) {
                    this.MVField = value;
                    this.RaisePropertyChanged("MV");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid RI {
            get {
                return this.RIField;
            }
            set {
                if ((this.RIField.Equals(value) != true)) {
                    this.RIField = value;
                    this.RaisePropertyChanged("RI");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BNA", Namespace="http://sevensigma.com.au/TransactionalNodeService/OpObjects")]
    public partial class BNA : object, System.ComponentModel.INotifyPropertyChanged {
        
        private TransactionalNodeService.Service.MP DField;
        
        private int IField;
        
        private string OField;
        
        private System.Guid RIField;
        
        private TransactionalNodeService.Service.MP RMField;
        
        private TransactionalNodeService.Service.NT TField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.MP D {
            get {
                return this.DField;
            }
            set {
                if ((object.ReferenceEquals(this.DField, value) != true)) {
                    this.DField = value;
                    this.RaisePropertyChanged("D");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int I {
            get {
                return this.IField;
            }
            set {
                if ((this.IField.Equals(value) != true)) {
                    this.IField = value;
                    this.RaisePropertyChanged("I");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string O {
            get {
                return this.OField;
            }
            set {
                if ((object.ReferenceEquals(this.OField, value) != true)) {
                    this.OField = value;
                    this.RaisePropertyChanged("O");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid RI {
            get {
                return this.RIField;
            }
            set {
                if ((this.RIField.Equals(value) != true)) {
                    this.RIField = value;
                    this.RaisePropertyChanged("RI");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.MP RM {
            get {
                return this.RMField;
            }
            set {
                if ((object.ReferenceEquals(this.RMField, value) != true)) {
                    this.RMField = value;
                    this.RaisePropertyChanged("RM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.NT T {
            get {
                return this.TField;
            }
            set {
                if ((object.ReferenceEquals(this.TField, value) != true)) {
                    this.TField = value;
                    this.RaisePropertyChanged("T");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BRA", Namespace="http://sevensigma.com.au/TransactionalNodeService/OpObjects")]
    public partial class BRA : object, System.ComponentModel.INotifyPropertyChanged {
        
        private TransactionalNodeService.Service.MP DField;
        
        private int IField;
        
        private System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> NField;
        
        private string OField;
        
        private System.Guid RIField;
        
        private TransactionalNodeService.Service.MP RMField;
        
        private TransactionalNodeService.Service.RT TField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.MP D {
            get {
                return this.DField;
            }
            set {
                if ((object.ReferenceEquals(this.DField, value) != true)) {
                    this.DField = value;
                    this.RaisePropertyChanged("D");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int I {
            get {
                return this.IField;
            }
            set {
                if ((this.IField.Equals(value) != true)) {
                    this.IField = value;
                    this.RaisePropertyChanged("I");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> N {
            get {
                return this.NField;
            }
            set {
                if ((object.ReferenceEquals(this.NField, value) != true)) {
                    this.NField = value;
                    this.RaisePropertyChanged("N");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string O {
            get {
                return this.OField;
            }
            set {
                if ((object.ReferenceEquals(this.OField, value) != true)) {
                    this.OField = value;
                    this.RaisePropertyChanged("O");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid RI {
            get {
                return this.RIField;
            }
            set {
                if ((this.RIField.Equals(value) != true)) {
                    this.RIField = value;
                    this.RaisePropertyChanged("RI");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.MP RM {
            get {
                return this.RMField;
            }
            set {
                if ((object.ReferenceEquals(this.RMField, value) != true)) {
                    this.RMField = value;
                    this.RaisePropertyChanged("RM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.RT T {
            get {
                return this.TField;
            }
            set {
                if ((object.ReferenceEquals(this.TField, value) != true)) {
                    this.TField = value;
                    this.RaisePropertyChanged("T");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BOR", Namespace="http://sevensigma.com.au/TransactionalNodeService/OpObjects")]
    public partial class BOR : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IField;
        
        private TransactionalNodeService.Service.MP RField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int I {
            get {
                return this.IField;
            }
            set {
                if ((this.IField.Equals(value) != true)) {
                    this.IField = value;
                    this.RaisePropertyChanged("I");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.MP R {
            get {
                return this.RField;
            }
            set {
                if ((object.ReferenceEquals(this.RField, value) != true)) {
                    this.RField = value;
                    this.RaisePropertyChanged("R");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NotEqualEdgeCondOp", Namespace="http://schemas.datacontract.org/2004/07/TransactionalNodeService.Common")]
    public partial class NotEqualEdgeCondOp : object, System.ComponentModel.INotifyPropertyChanged {
        
        private TransactionalNodeService.Service.EdgeConditionTest ConditionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.EdgeConditionTest Condition {
            get {
                return this.ConditionField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionField, value) != true)) {
                    this.ConditionField = value;
                    this.RaisePropertyChanged("Condition");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EdgeConditionTest", Namespace="http://schemas.datacontract.org/2004/07/TransactionalNodeService.Common")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.RS))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.CH>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.CH))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.DE))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.DA))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.NO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.RE))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.NT))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.ME))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.MetadataType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.RT))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.DT))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.MP))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.OPS))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BMA))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BND))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BRD))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BMD))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BNU))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BRU))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BMU))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BNA))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BRA))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.BOR>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BOR))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.GlymaVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.Domain))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.MetadataContext))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.TransactionType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.QueryResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.TypeResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.EdgeConditions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.NotEqualEdgeCondOp))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.EdgeComponentType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.EdgeElementType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.OrEdgeCondOp))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.AndEdgeCondOp))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.EqualEdgeCondOp))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.FilterConditions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchConditions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.SearchCondition>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchCondition))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SortOrderOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchMapResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchedNode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.MapParameterType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<TransactionalNodeService.Service.MetadataContext, TransactionalNodeService.Service.DA>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, System.Guid>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.NO>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.RE>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.DT>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.MetadataType>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.NT>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.RT>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.QueryResponse>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<object>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.SearchedNode>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP>))]
    public partial class EdgeConditionTest : object, System.ComponentModel.INotifyPropertyChanged {
        
        private object ComponentValueField;
        
        private TransactionalNodeService.Service.EdgeComponentType EdgeComponentField;
        
        private TransactionalNodeService.Service.EdgeElementType EdgeElementField;
        
        private bool IsIncludedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object ComponentValue {
            get {
                return this.ComponentValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ComponentValueField, value) != true)) {
                    this.ComponentValueField = value;
                    this.RaisePropertyChanged("ComponentValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.EdgeComponentType EdgeComponent {
            get {
                return this.EdgeComponentField;
            }
            set {
                if ((this.EdgeComponentField.Equals(value) != true)) {
                    this.EdgeComponentField = value;
                    this.RaisePropertyChanged("EdgeComponent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.EdgeElementType EdgeElement {
            get {
                return this.EdgeElementField;
            }
            set {
                if ((this.EdgeElementField.Equals(value) != true)) {
                    this.EdgeElementField = value;
                    this.RaisePropertyChanged("EdgeElement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsIncluded {
            get {
                return this.IsIncludedField;
            }
            set {
                if ((this.IsIncludedField.Equals(value) != true)) {
                    this.IsIncludedField = value;
                    this.RaisePropertyChanged("IsIncluded");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EdgeComponentType", Namespace="http://schemas.datacontract.org/2004/07/TransactionalNodeService.Common")]
    public enum EdgeComponentType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Id = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OriginalId = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Type = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Metadata = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EdgeElementType", Namespace="http://schemas.datacontract.org/2004/07/TransactionalNodeService.Common")]
    public enum EdgeElementType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Node = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Relationship = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrEdgeCondOp", Namespace="http://schemas.datacontract.org/2004/07/TransactionalNodeService.Common")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.RS))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.CH>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.CH))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.DE))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.DA))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.NO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.RE))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.NT))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.ME))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.MetadataType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.RT))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.DT))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.MP))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.OPS))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BMA))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BND))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BRD))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BMD))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BNU))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BRU))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BMU))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BNA))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BRA))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.BOR>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BOR))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.GlymaVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.Domain))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.MetadataContext))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.TransactionType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.QueryResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.TypeResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.EdgeConditions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.NotEqualEdgeCondOp))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.EdgeConditionTest))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.EdgeComponentType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.EdgeElementType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.AndEdgeCondOp))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.EqualEdgeCondOp))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.FilterConditions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchConditions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.SearchCondition>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchCondition))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SortOrderOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchMapResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchedNode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.MapParameterType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<TransactionalNodeService.Service.MetadataContext, TransactionalNodeService.Service.DA>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, System.Guid>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.NO>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.RE>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.DT>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.MetadataType>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.NT>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.RT>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.QueryResponse>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<object>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.SearchedNode>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP>))]
    public partial class OrEdgeCondOp : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<object> ConditionOperationsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<object> ConditionOperations {
            get {
                return this.ConditionOperationsField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionOperationsField, value) != true)) {
                    this.ConditionOperationsField = value;
                    this.RaisePropertyChanged("ConditionOperations");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AndEdgeCondOp", Namespace="http://schemas.datacontract.org/2004/07/TransactionalNodeService.Common")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.RS))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.CH>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.CH))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.DE))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.DA))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.NO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.RE))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.NT))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.ME))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.MetadataType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.RT))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.DT))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.MP))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.OPS))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BMA))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BND))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BRD))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BMD))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BNU))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BRU))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BMU))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BNA))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BRA))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.BOR>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.BOR))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.GlymaVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.Domain))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.MetadataContext))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.TransactionType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.QueryResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.TypeResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.EdgeConditions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.NotEqualEdgeCondOp))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.EdgeConditionTest))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.EdgeComponentType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.EdgeElementType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.OrEdgeCondOp))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.EqualEdgeCondOp))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.FilterConditions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchConditions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.SearchCondition>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchCondition))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SortOrderOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchMapResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.SearchedNode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TransactionalNodeService.Service.MapParameterType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<TransactionalNodeService.Service.MetadataContext, TransactionalNodeService.Service.DA>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, System.Guid>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.NO>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.RE>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.DT>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.MetadataType>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.NT>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, TransactionalNodeService.Service.RT>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.QueryResponse>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<object>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.SearchedNode>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP>))]
    public partial class AndEdgeCondOp : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<object> ConditionOperationsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<object> ConditionOperations {
            get {
                return this.ConditionOperationsField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionOperationsField, value) != true)) {
                    this.ConditionOperationsField = value;
                    this.RaisePropertyChanged("ConditionOperations");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EqualEdgeCondOp", Namespace="http://schemas.datacontract.org/2004/07/TransactionalNodeService.Common")]
    public partial class EqualEdgeCondOp : object, System.ComponentModel.INotifyPropertyChanged {
        
        private TransactionalNodeService.Service.EdgeConditionTest ConditionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.EdgeConditionTest Condition {
            get {
                return this.ConditionField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionField, value) != true)) {
                    this.ConditionField = value;
                    this.RaisePropertyChanged("Condition");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FilterConditions", Namespace="http://schemas.datacontract.org/2004/07/TransactionalNodeService.Common")]
    public partial class FilterConditions : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchConditions", Namespace="http://schemas.datacontract.org/2004/07/TransactionalNodeService.Common")]
    public partial class SearchConditions : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.SearchCondition> MetadataFiltersField;
        
        private TransactionalNodeService.Service.SearchOperation SearchOperationField;
        
        private TransactionalNodeService.Service.SortOrderOptions SortOrderField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.SearchCondition> MetadataFilters {
            get {
                return this.MetadataFiltersField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataFiltersField, value) != true)) {
                    this.MetadataFiltersField = value;
                    this.RaisePropertyChanged("MetadataFilters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.SearchOperation SearchOperation {
            get {
                return this.SearchOperationField;
            }
            set {
                if ((this.SearchOperationField.Equals(value) != true)) {
                    this.SearchOperationField = value;
                    this.RaisePropertyChanged("SearchOperation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.SortOrderOptions SortOrder {
            get {
                return this.SortOrderField;
            }
            set {
                if ((this.SortOrderField.Equals(value) != true)) {
                    this.SortOrderField = value;
                    this.RaisePropertyChanged("SortOrder");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchCondition", Namespace="http://schemas.datacontract.org/2004/07/TransactionalNodeService.Common")]
    public partial class SearchCondition : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ConditionValueField;
        
        private string MetadataNameField;
        
        private TransactionalNodeService.Service.SearchType SearchTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConditionValue {
            get {
                return this.ConditionValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionValueField, value) != true)) {
                    this.ConditionValueField = value;
                    this.RaisePropertyChanged("ConditionValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MetadataName {
            get {
                return this.MetadataNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataNameField, value) != true)) {
                    this.MetadataNameField = value;
                    this.RaisePropertyChanged("MetadataName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransactionalNodeService.Service.SearchType SearchType {
            get {
                return this.SearchTypeField;
            }
            set {
                if ((this.SearchTypeField.Equals(value) != true)) {
                    this.SearchTypeField = value;
                    this.RaisePropertyChanged("SearchType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchType", Namespace="http://schemas.datacontract.org/2004/07/TransactionalNodeService.Common")]
    public enum SearchType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Exact = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wildcard = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FreeText = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Contains = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NumericallyLessThan = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NumericallyLessThanOrEqual = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NumericallyMoreThan = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NumericallyMoreThanOrEqual = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NumericallyEqual = 8,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchOperation", Namespace="http://schemas.datacontract.org/2004/07/TransactionalNodeService.Common")]
    public enum SearchOperation : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AND = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OR = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SortOrderOptions", Namespace="http://schemas.datacontract.org/2004/07/TransactionalNodeService.Common")]
    public enum SortOrderOptions : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CreatedAscending = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ModifiedAscending = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CreatedDescending = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ModifiedDescending = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchMapResult", Namespace="http://schemas.datacontract.org/2004/07/TransactionalNodeService.Common")]
    public partial class SearchMapResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int CountField;
        
        private System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.SearchedNode> SearchedNodesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.SearchedNode> SearchedNodes {
            get {
                return this.SearchedNodesField;
            }
            set {
                if ((object.ReferenceEquals(this.SearchedNodesField, value) != true)) {
                    this.SearchedNodesField = value;
                    this.RaisePropertyChanged("SearchedNodes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchedNode", Namespace="http://schemas.datacontract.org/2004/07/TransactionalNodeService.Common")]
    public partial class SearchedNode : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<System.DateTime> CreatedField;
        
        private string CreatedByField;
        
        private string CreatedByLoginField;
        
        private System.Guid DomainUidField;
        
        private string MapNodeNameField;
        
        private System.Guid MapNodeUidField;
        
        private System.Collections.Generic.Dictionary<string, string> MetadataField;
        
        private System.Nullable<System.DateTime> ModifiedField;
        
        private string ModifiedByField;
        
        private string ModifiedByLoginField;
        
        private string NodeOriginalIdField;
        
        private System.Guid NodeTypeUidField;
        
        private System.Guid NodeUidField;
        
        private System.Nullable<System.Guid> RootMapUidField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Created {
            get {
                return this.CreatedField;
            }
            set {
                if ((this.CreatedField.Equals(value) != true)) {
                    this.CreatedField = value;
                    this.RaisePropertyChanged("Created");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy {
            get {
                return this.CreatedByField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedByField, value) != true)) {
                    this.CreatedByField = value;
                    this.RaisePropertyChanged("CreatedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedByLogin {
            get {
                return this.CreatedByLoginField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedByLoginField, value) != true)) {
                    this.CreatedByLoginField = value;
                    this.RaisePropertyChanged("CreatedByLogin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid DomainUid {
            get {
                return this.DomainUidField;
            }
            set {
                if ((this.DomainUidField.Equals(value) != true)) {
                    this.DomainUidField = value;
                    this.RaisePropertyChanged("DomainUid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MapNodeName {
            get {
                return this.MapNodeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MapNodeNameField, value) != true)) {
                    this.MapNodeNameField = value;
                    this.RaisePropertyChanged("MapNodeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid MapNodeUid {
            get {
                return this.MapNodeUidField;
            }
            set {
                if ((this.MapNodeUidField.Equals(value) != true)) {
                    this.MapNodeUidField = value;
                    this.RaisePropertyChanged("MapNodeUid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> Metadata {
            get {
                return this.MetadataField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataField, value) != true)) {
                    this.MetadataField = value;
                    this.RaisePropertyChanged("Metadata");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Modified {
            get {
                return this.ModifiedField;
            }
            set {
                if ((this.ModifiedField.Equals(value) != true)) {
                    this.ModifiedField = value;
                    this.RaisePropertyChanged("Modified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy {
            get {
                return this.ModifiedByField;
            }
            set {
                if ((object.ReferenceEquals(this.ModifiedByField, value) != true)) {
                    this.ModifiedByField = value;
                    this.RaisePropertyChanged("ModifiedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedByLogin {
            get {
                return this.ModifiedByLoginField;
            }
            set {
                if ((object.ReferenceEquals(this.ModifiedByLoginField, value) != true)) {
                    this.ModifiedByLoginField = value;
                    this.RaisePropertyChanged("ModifiedByLogin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeOriginalId {
            get {
                return this.NodeOriginalIdField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeOriginalIdField, value) != true)) {
                    this.NodeOriginalIdField = value;
                    this.RaisePropertyChanged("NodeOriginalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid NodeTypeUid {
            get {
                return this.NodeTypeUidField;
            }
            set {
                if ((this.NodeTypeUidField.Equals(value) != true)) {
                    this.NodeTypeUidField = value;
                    this.RaisePropertyChanged("NodeTypeUid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid NodeUid {
            get {
                return this.NodeUidField;
            }
            set {
                if ((this.NodeUidField.Equals(value) != true)) {
                    this.NodeUidField = value;
                    this.RaisePropertyChanged("NodeUid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> RootMapUid {
            get {
                return this.RootMapUidField;
            }
            set {
                if ((this.RootMapUidField.Equals(value) != true)) {
                    this.RootMapUidField = value;
                    this.RaisePropertyChanged("RootMapUid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MapParameterType", Namespace="http://schemas.datacontract.org/2004/07/TransactionalNodeService.Common")]
    public enum MapParameterType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Empty = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Domain = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Node = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Relationship = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Descriptor = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Metadata = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RootMap = 7,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://sevensigma.com.au/TransactionalNodeService", ConfigurationName="Service.ITransactionalMappingToolService")]
    public interface ITransactionalMappingToolService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/GetApplicationVersion", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/GetApplicationVersionResponse")]
        System.IAsyncResult BeginGetApplicationVersion(System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.GlymaVersion EndGetApplicationVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/CreateDomain", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/CreateDomainResponse")]
        System.IAsyncResult BeginCreateDomain(string callingUrl, string name, System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.RS EndCreateDomain(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/CreateRootMap", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/CreateRootMapResponse")]
        System.IAsyncResult BeginCreateRootMap(string callingUrl, System.Guid domainId, string name, TransactionalNodeService.Service.NT nodeType, string originalId, System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.QueryResponse EndCreateRootMap(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/DeleteDomain", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/DeleteDomainResponse")]
        System.IAsyncResult BeginDeleteDomain(string callingUrl, System.Guid domainId, System.AsyncCallback callback, object asyncState);
        
        int EndDeleteDomain(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/DeleteRootMap", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/DeleteRootMapResponse")]
        System.IAsyncResult BeginDeleteRootMap(string callingUrl, System.Guid domainId, System.Guid rootMapId, System.AsyncCallback callback, object asyncState);
        
        int EndDeleteRootMap(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/BeginTransaction", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/BeginTransactionResponse")]
        System.IAsyncResult BeginBeginTransaction(string callingUrl, System.AsyncCallback callback, object asyncState);
        
        System.Guid EndBeginTransaction(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/CompleteTransaction", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/CompleteTransactionResponse")]
        System.IAsyncResult BeginCompleteTransaction(string callingUrl, System.Guid sessionId, System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.RS EndCompleteTransaction(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/GetAllMapTypes", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/GetAllMapTypesResponse")]
        System.IAsyncResult BeginGetAllMapTypes(string callingUrl, System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.TypeResponse EndGetAllMapTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/QueryDomains", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/QueryDomainsResponse")]
        System.IAsyncResult BeginQueryDomains(string callingUrl, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.QueryResponse> EndQueryDomains(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/QueryMap", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/QueryMapResponse")]
        System.IAsyncResult BeginQueryMap(string callingUrl, System.Guid domainId, System.Guid nodeId, int maxDepth, TransactionalNodeService.Service.EdgeConditions edgeConditions, TransactionalNodeService.Service.FilterConditions filterConditions, System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.QueryResponse EndQueryMap(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/QueryMapPaged", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/QueryMapPagedResponse")]
        System.IAsyncResult BeginQueryMapPaged(string callingUrl, System.Guid domainId, System.Guid nodeId, int maxDepth, TransactionalNodeService.Service.EdgeConditions edgeConditions, TransactionalNodeService.Service.FilterConditions filterConditions, int objectIndex, System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.QueryResponse EndQueryMapPaged(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/QueryMapByDomain", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/QueryMapByDomainResponse")]
        System.IAsyncResult BeginQueryMapByDomain(string callingUrl, System.Guid domainId, int maxDepth, TransactionalNodeService.Service.EdgeConditions edgeConditions, TransactionalNodeService.Service.FilterConditions filterConditions, System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.QueryResponse EndQueryMapByDomain(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/SearchMap", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/SearchMapResponse")]
        System.IAsyncResult BeginSearchMap(string callingUrl, System.Guid domainId, System.Guid rootMapUid, TransactionalNodeService.Service.SearchConditions conditions, int pageNumber, int pageSize, System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.SearchMapResult EndSearchMap(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/NA", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/NAResponse")]
        System.IAsyncResult BeginNA(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, TransactionalNodeService.Service.NT nodeType, string originalId, System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.MP EndNA(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/BNA", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/BNAResponse")]
        System.IAsyncResult BeginBNA(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, TransactionalNodeService.Service.NT nodeType, string originalId, System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.MP EndBNA(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/ND", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/NDResponse")]
        System.IAsyncResult BeginND(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP nodeId, System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.MP EndND(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/BND", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/BNDResponse")]
        System.IAsyncResult BeginBND(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP nodeId, System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.MP EndBND(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/NU", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/NUResponse")]
        System.IAsyncResult BeginNU(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP nodeId, TransactionalNodeService.Service.NT nodeType, System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.MP EndNU(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/BNU", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/BNUResponse")]
        System.IAsyncResult BeginBNU(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP nodeId, TransactionalNodeService.Service.NT nodeType, System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.MP EndBNU(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/RA", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/RAResponse")]
        System.IAsyncResult BeginRA(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> nodes, TransactionalNodeService.Service.RT relationshipType, string originalId, System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.MP EndRA(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/BRA", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/BRAResponse")]
        System.IAsyncResult BeginBRA(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> nodes, TransactionalNodeService.Service.RT relationshipType, string originalId, System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.MP EndBRA(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/RD", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/RDResponse")]
        System.IAsyncResult BeginRD(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP relationshipId, System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.MP EndRD(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/BRD", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/BRDResponse")]
        System.IAsyncResult BeginBRD(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP relationshipId, System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.MP EndBRD(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/RU", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/RUResponse")]
        System.IAsyncResult BeginRU(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP relationshipId, System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> nodes, TransactionalNodeService.Service.RT relationshipType, System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.MP EndRU(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/BRU", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/BRUResponse")]
        System.IAsyncResult BeginBRU(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP relationshipId, System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> nodes, TransactionalNodeService.Service.RT relationshipType, System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.MP EndBRU(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/MA", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/MAResponse")]
        System.IAsyncResult BeginMA(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, TransactionalNodeService.Service.MP node, TransactionalNodeService.Service.MP relationship, TransactionalNodeService.Service.DT descriptorType, TransactionalNodeService.Service.MetadataType metadataType, string name, string value, System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.MP EndMA(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/BMA", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/BMAResponse")]
        System.IAsyncResult BeginBMA(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, TransactionalNodeService.Service.MP node, TransactionalNodeService.Service.MP relationship, TransactionalNodeService.Service.DT descriptorType, TransactionalNodeService.Service.MetadataType metadataType, string name, string value, System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.MP EndBMA(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/MD", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/MDResponse")]
        System.IAsyncResult BeginMD(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP metadata, System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.MP EndMD(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/BMD", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/BMDResponse")]
        System.IAsyncResult BeginBMD(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP metadata, System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.MP EndBMD(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/MU", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/MUResponse")]
        System.IAsyncResult BeginMU(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP metadata, string name, string value, System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.MP EndMU(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/BMU", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/BMUResponse")]
        System.IAsyncResult BeginBMU(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP metadata, string name, string value, System.AsyncCallback callback, object asyncState);
        
        TransactionalNodeService.Service.MP EndBMU(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/BO", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/BOResponse")]
        System.IAsyncResult BeginBO(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.OPS operations, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.BOR> EndBO(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/BOC", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/BOCResponse")]
        System.IAsyncResult BeginBOC(string callingUrl, System.Guid sessionId, string compressedOperations, System.AsyncCallback callback, object asyncState);
        
        string EndBOC(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/IsSessionCompleted", ReplyAction="http://sevensigma.com.au/TransactionalNodeService/ITransactionalMappingToolServic" +
            "e/IsSessionCompletedResponse")]
        System.IAsyncResult BeginIsSessionCompleted(string callingUrl, System.Guid sessionId, System.AsyncCallback callback, object asyncState);
        
        bool EndIsSessionCompleted(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITransactionalMappingToolServiceChannel : TransactionalNodeService.Service.ITransactionalMappingToolService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetApplicationVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetApplicationVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.GlymaVersion Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.GlymaVersion)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.RS Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.RS)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateRootMapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateRootMapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.QueryResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.QueryResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteRootMapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteRootMapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BeginTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BeginTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Guid Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CompleteTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CompleteTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.RS Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.RS)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllMapTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllMapTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.TypeResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.TypeResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class QueryDomainsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public QueryDomainsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.QueryResponse> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.QueryResponse>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class QueryMapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public QueryMapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.QueryResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.QueryResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class QueryMapPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public QueryMapPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.QueryResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.QueryResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class QueryMapByDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public QueryMapByDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.QueryResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.QueryResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SearchMapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SearchMapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.SearchMapResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.SearchMapResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public NACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.MP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.MP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BNACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BNACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.MP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.MP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public NDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.MP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.MP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BNDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BNDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.MP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.MP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NUCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public NUCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.MP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.MP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BNUCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BNUCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.MP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.MP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.MP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.MP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BRACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BRACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.MP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.MP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.MP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.MP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BRDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BRDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.MP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.MP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RUCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RUCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.MP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.MP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BRUCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BRUCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.MP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.MP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.MP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.MP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BMACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BMACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.MP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.MP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.MP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.MP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BMDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BMDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.MP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.MP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MUCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MUCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.MP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.MP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BMUCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BMUCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TransactionalNodeService.Service.MP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TransactionalNodeService.Service.MP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BOCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BOCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.BOR> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.BOR>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BOCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BOCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsSessionCompletedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsSessionCompletedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TransactionalMappingToolServiceClient : System.ServiceModel.ClientBase<TransactionalNodeService.Service.ITransactionalMappingToolService>, TransactionalNodeService.Service.ITransactionalMappingToolService {
        
        private BeginOperationDelegate onBeginGetApplicationVersionDelegate;
        
        private EndOperationDelegate onEndGetApplicationVersionDelegate;
        
        private System.Threading.SendOrPostCallback onGetApplicationVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateDomainDelegate;
        
        private EndOperationDelegate onEndCreateDomainDelegate;
        
        private System.Threading.SendOrPostCallback onCreateDomainCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateRootMapDelegate;
        
        private EndOperationDelegate onEndCreateRootMapDelegate;
        
        private System.Threading.SendOrPostCallback onCreateRootMapCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteDomainDelegate;
        
        private EndOperationDelegate onEndDeleteDomainDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteDomainCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteRootMapDelegate;
        
        private EndOperationDelegate onEndDeleteRootMapDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteRootMapCompletedDelegate;
        
        private BeginOperationDelegate onBeginBeginTransactionDelegate;
        
        private EndOperationDelegate onEndBeginTransactionDelegate;
        
        private System.Threading.SendOrPostCallback onBeginTransactionCompletedDelegate;
        
        private BeginOperationDelegate onBeginCompleteTransactionDelegate;
        
        private EndOperationDelegate onEndCompleteTransactionDelegate;
        
        private System.Threading.SendOrPostCallback onCompleteTransactionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllMapTypesDelegate;
        
        private EndOperationDelegate onEndGetAllMapTypesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllMapTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginQueryDomainsDelegate;
        
        private EndOperationDelegate onEndQueryDomainsDelegate;
        
        private System.Threading.SendOrPostCallback onQueryDomainsCompletedDelegate;
        
        private BeginOperationDelegate onBeginQueryMapDelegate;
        
        private EndOperationDelegate onEndQueryMapDelegate;
        
        private System.Threading.SendOrPostCallback onQueryMapCompletedDelegate;
        
        private BeginOperationDelegate onBeginQueryMapPagedDelegate;
        
        private EndOperationDelegate onEndQueryMapPagedDelegate;
        
        private System.Threading.SendOrPostCallback onQueryMapPagedCompletedDelegate;
        
        private BeginOperationDelegate onBeginQueryMapByDomainDelegate;
        
        private EndOperationDelegate onEndQueryMapByDomainDelegate;
        
        private System.Threading.SendOrPostCallback onQueryMapByDomainCompletedDelegate;
        
        private BeginOperationDelegate onBeginSearchMapDelegate;
        
        private EndOperationDelegate onEndSearchMapDelegate;
        
        private System.Threading.SendOrPostCallback onSearchMapCompletedDelegate;
        
        private BeginOperationDelegate onBeginNADelegate;
        
        private EndOperationDelegate onEndNADelegate;
        
        private System.Threading.SendOrPostCallback onNACompletedDelegate;
        
        private BeginOperationDelegate onBeginBNADelegate;
        
        private EndOperationDelegate onEndBNADelegate;
        
        private System.Threading.SendOrPostCallback onBNACompletedDelegate;
        
        private BeginOperationDelegate onBeginNDDelegate;
        
        private EndOperationDelegate onEndNDDelegate;
        
        private System.Threading.SendOrPostCallback onNDCompletedDelegate;
        
        private BeginOperationDelegate onBeginBNDDelegate;
        
        private EndOperationDelegate onEndBNDDelegate;
        
        private System.Threading.SendOrPostCallback onBNDCompletedDelegate;
        
        private BeginOperationDelegate onBeginNUDelegate;
        
        private EndOperationDelegate onEndNUDelegate;
        
        private System.Threading.SendOrPostCallback onNUCompletedDelegate;
        
        private BeginOperationDelegate onBeginBNUDelegate;
        
        private EndOperationDelegate onEndBNUDelegate;
        
        private System.Threading.SendOrPostCallback onBNUCompletedDelegate;
        
        private BeginOperationDelegate onBeginRADelegate;
        
        private EndOperationDelegate onEndRADelegate;
        
        private System.Threading.SendOrPostCallback onRACompletedDelegate;
        
        private BeginOperationDelegate onBeginBRADelegate;
        
        private EndOperationDelegate onEndBRADelegate;
        
        private System.Threading.SendOrPostCallback onBRACompletedDelegate;
        
        private BeginOperationDelegate onBeginRDDelegate;
        
        private EndOperationDelegate onEndRDDelegate;
        
        private System.Threading.SendOrPostCallback onRDCompletedDelegate;
        
        private BeginOperationDelegate onBeginBRDDelegate;
        
        private EndOperationDelegate onEndBRDDelegate;
        
        private System.Threading.SendOrPostCallback onBRDCompletedDelegate;
        
        private BeginOperationDelegate onBeginRUDelegate;
        
        private EndOperationDelegate onEndRUDelegate;
        
        private System.Threading.SendOrPostCallback onRUCompletedDelegate;
        
        private BeginOperationDelegate onBeginBRUDelegate;
        
        private EndOperationDelegate onEndBRUDelegate;
        
        private System.Threading.SendOrPostCallback onBRUCompletedDelegate;
        
        private BeginOperationDelegate onBeginMADelegate;
        
        private EndOperationDelegate onEndMADelegate;
        
        private System.Threading.SendOrPostCallback onMACompletedDelegate;
        
        private BeginOperationDelegate onBeginBMADelegate;
        
        private EndOperationDelegate onEndBMADelegate;
        
        private System.Threading.SendOrPostCallback onBMACompletedDelegate;
        
        private BeginOperationDelegate onBeginMDDelegate;
        
        private EndOperationDelegate onEndMDDelegate;
        
        private System.Threading.SendOrPostCallback onMDCompletedDelegate;
        
        private BeginOperationDelegate onBeginBMDDelegate;
        
        private EndOperationDelegate onEndBMDDelegate;
        
        private System.Threading.SendOrPostCallback onBMDCompletedDelegate;
        
        private BeginOperationDelegate onBeginMUDelegate;
        
        private EndOperationDelegate onEndMUDelegate;
        
        private System.Threading.SendOrPostCallback onMUCompletedDelegate;
        
        private BeginOperationDelegate onBeginBMUDelegate;
        
        private EndOperationDelegate onEndBMUDelegate;
        
        private System.Threading.SendOrPostCallback onBMUCompletedDelegate;
        
        private BeginOperationDelegate onBeginBODelegate;
        
        private EndOperationDelegate onEndBODelegate;
        
        private System.Threading.SendOrPostCallback onBOCompletedDelegate;
        
        private BeginOperationDelegate onBeginBOCDelegate;
        
        private EndOperationDelegate onEndBOCDelegate;
        
        private System.Threading.SendOrPostCallback onBOCCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsSessionCompletedDelegate;
        
        private EndOperationDelegate onEndIsSessionCompletedDelegate;
        
        private System.Threading.SendOrPostCallback onIsSessionCompletedCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public TransactionalMappingToolServiceClient() {
        }
        
        public TransactionalMappingToolServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TransactionalMappingToolServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransactionalMappingToolServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransactionalMappingToolServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetApplicationVersionCompletedEventArgs> GetApplicationVersionCompleted;
        
        public event System.EventHandler<CreateDomainCompletedEventArgs> CreateDomainCompleted;
        
        public event System.EventHandler<CreateRootMapCompletedEventArgs> CreateRootMapCompleted;
        
        public event System.EventHandler<DeleteDomainCompletedEventArgs> DeleteDomainCompleted;
        
        public event System.EventHandler<DeleteRootMapCompletedEventArgs> DeleteRootMapCompleted;
        
        public event System.EventHandler<BeginTransactionCompletedEventArgs> BeginTransactionCompleted;
        
        public event System.EventHandler<CompleteTransactionCompletedEventArgs> CompleteTransactionCompleted;
        
        public event System.EventHandler<GetAllMapTypesCompletedEventArgs> GetAllMapTypesCompleted;
        
        public event System.EventHandler<QueryDomainsCompletedEventArgs> QueryDomainsCompleted;
        
        public event System.EventHandler<QueryMapCompletedEventArgs> QueryMapCompleted;
        
        public event System.EventHandler<QueryMapPagedCompletedEventArgs> QueryMapPagedCompleted;
        
        public event System.EventHandler<QueryMapByDomainCompletedEventArgs> QueryMapByDomainCompleted;
        
        public event System.EventHandler<SearchMapCompletedEventArgs> SearchMapCompleted;
        
        public event System.EventHandler<NACompletedEventArgs> NACompleted;
        
        public event System.EventHandler<BNACompletedEventArgs> BNACompleted;
        
        public event System.EventHandler<NDCompletedEventArgs> NDCompleted;
        
        public event System.EventHandler<BNDCompletedEventArgs> BNDCompleted;
        
        public event System.EventHandler<NUCompletedEventArgs> NUCompleted;
        
        public event System.EventHandler<BNUCompletedEventArgs> BNUCompleted;
        
        public event System.EventHandler<RACompletedEventArgs> RACompleted;
        
        public event System.EventHandler<BRACompletedEventArgs> BRACompleted;
        
        public event System.EventHandler<RDCompletedEventArgs> RDCompleted;
        
        public event System.EventHandler<BRDCompletedEventArgs> BRDCompleted;
        
        public event System.EventHandler<RUCompletedEventArgs> RUCompleted;
        
        public event System.EventHandler<BRUCompletedEventArgs> BRUCompleted;
        
        public event System.EventHandler<MACompletedEventArgs> MACompleted;
        
        public event System.EventHandler<BMACompletedEventArgs> BMACompleted;
        
        public event System.EventHandler<MDCompletedEventArgs> MDCompleted;
        
        public event System.EventHandler<BMDCompletedEventArgs> BMDCompleted;
        
        public event System.EventHandler<MUCompletedEventArgs> MUCompleted;
        
        public event System.EventHandler<BMUCompletedEventArgs> BMUCompleted;
        
        public event System.EventHandler<BOCompletedEventArgs> BOCompleted;
        
        public event System.EventHandler<BOCCompletedEventArgs> BOCCompleted;
        
        public event System.EventHandler<IsSessionCompletedCompletedEventArgs> IsSessionCompletedCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginGetApplicationVersion(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetApplicationVersion(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.GlymaVersion TransactionalNodeService.Service.ITransactionalMappingToolService.EndGetApplicationVersion(System.IAsyncResult result) {
            return base.Channel.EndGetApplicationVersion(result);
        }
        
        private System.IAsyncResult OnBeginGetApplicationVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginGetApplicationVersion(callback, asyncState);
        }
        
        private object[] OnEndGetApplicationVersion(System.IAsyncResult result) {
            TransactionalNodeService.Service.GlymaVersion retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndGetApplicationVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetApplicationVersionCompleted(object state) {
            if ((this.GetApplicationVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetApplicationVersionCompleted(this, new GetApplicationVersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetApplicationVersionAsync() {
            this.GetApplicationVersionAsync(null);
        }
        
        public void GetApplicationVersionAsync(object userState) {
            if ((this.onBeginGetApplicationVersionDelegate == null)) {
                this.onBeginGetApplicationVersionDelegate = new BeginOperationDelegate(this.OnBeginGetApplicationVersion);
            }
            if ((this.onEndGetApplicationVersionDelegate == null)) {
                this.onEndGetApplicationVersionDelegate = new EndOperationDelegate(this.OnEndGetApplicationVersion);
            }
            if ((this.onGetApplicationVersionCompletedDelegate == null)) {
                this.onGetApplicationVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetApplicationVersionCompleted);
            }
            base.InvokeAsync(this.onBeginGetApplicationVersionDelegate, null, this.onEndGetApplicationVersionDelegate, this.onGetApplicationVersionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginCreateDomain(string callingUrl, string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateDomain(callingUrl, name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.RS TransactionalNodeService.Service.ITransactionalMappingToolService.EndCreateDomain(System.IAsyncResult result) {
            return base.Channel.EndCreateDomain(result);
        }
        
        private System.IAsyncResult OnBeginCreateDomain(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            string name = ((string)(inValues[1]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginCreateDomain(callingUrl, name, callback, asyncState);
        }
        
        private object[] OnEndCreateDomain(System.IAsyncResult result) {
            TransactionalNodeService.Service.RS retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndCreateDomain(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateDomainCompleted(object state) {
            if ((this.CreateDomainCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateDomainCompleted(this, new CreateDomainCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateDomainAsync(string callingUrl, string name) {
            this.CreateDomainAsync(callingUrl, name, null);
        }
        
        public void CreateDomainAsync(string callingUrl, string name, object userState) {
            if ((this.onBeginCreateDomainDelegate == null)) {
                this.onBeginCreateDomainDelegate = new BeginOperationDelegate(this.OnBeginCreateDomain);
            }
            if ((this.onEndCreateDomainDelegate == null)) {
                this.onEndCreateDomainDelegate = new EndOperationDelegate(this.OnEndCreateDomain);
            }
            if ((this.onCreateDomainCompletedDelegate == null)) {
                this.onCreateDomainCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateDomainCompleted);
            }
            base.InvokeAsync(this.onBeginCreateDomainDelegate, new object[] {
                        callingUrl,
                        name}, this.onEndCreateDomainDelegate, this.onCreateDomainCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginCreateRootMap(string callingUrl, System.Guid domainId, string name, TransactionalNodeService.Service.NT nodeType, string originalId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateRootMap(callingUrl, domainId, name, nodeType, originalId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.QueryResponse TransactionalNodeService.Service.ITransactionalMappingToolService.EndCreateRootMap(System.IAsyncResult result) {
            return base.Channel.EndCreateRootMap(result);
        }
        
        private System.IAsyncResult OnBeginCreateRootMap(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid domainId = ((System.Guid)(inValues[1]));
            string name = ((string)(inValues[2]));
            TransactionalNodeService.Service.NT nodeType = ((TransactionalNodeService.Service.NT)(inValues[3]));
            string originalId = ((string)(inValues[4]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginCreateRootMap(callingUrl, domainId, name, nodeType, originalId, callback, asyncState);
        }
        
        private object[] OnEndCreateRootMap(System.IAsyncResult result) {
            TransactionalNodeService.Service.QueryResponse retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndCreateRootMap(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateRootMapCompleted(object state) {
            if ((this.CreateRootMapCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateRootMapCompleted(this, new CreateRootMapCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateRootMapAsync(string callingUrl, System.Guid domainId, string name, TransactionalNodeService.Service.NT nodeType, string originalId) {
            this.CreateRootMapAsync(callingUrl, domainId, name, nodeType, originalId, null);
        }
        
        public void CreateRootMapAsync(string callingUrl, System.Guid domainId, string name, TransactionalNodeService.Service.NT nodeType, string originalId, object userState) {
            if ((this.onBeginCreateRootMapDelegate == null)) {
                this.onBeginCreateRootMapDelegate = new BeginOperationDelegate(this.OnBeginCreateRootMap);
            }
            if ((this.onEndCreateRootMapDelegate == null)) {
                this.onEndCreateRootMapDelegate = new EndOperationDelegate(this.OnEndCreateRootMap);
            }
            if ((this.onCreateRootMapCompletedDelegate == null)) {
                this.onCreateRootMapCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateRootMapCompleted);
            }
            base.InvokeAsync(this.onBeginCreateRootMapDelegate, new object[] {
                        callingUrl,
                        domainId,
                        name,
                        nodeType,
                        originalId}, this.onEndCreateRootMapDelegate, this.onCreateRootMapCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginDeleteDomain(string callingUrl, System.Guid domainId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteDomain(callingUrl, domainId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int TransactionalNodeService.Service.ITransactionalMappingToolService.EndDeleteDomain(System.IAsyncResult result) {
            return base.Channel.EndDeleteDomain(result);
        }
        
        private System.IAsyncResult OnBeginDeleteDomain(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid domainId = ((System.Guid)(inValues[1]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginDeleteDomain(callingUrl, domainId, callback, asyncState);
        }
        
        private object[] OnEndDeleteDomain(System.IAsyncResult result) {
            int retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndDeleteDomain(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteDomainCompleted(object state) {
            if ((this.DeleteDomainCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteDomainCompleted(this, new DeleteDomainCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteDomainAsync(string callingUrl, System.Guid domainId) {
            this.DeleteDomainAsync(callingUrl, domainId, null);
        }
        
        public void DeleteDomainAsync(string callingUrl, System.Guid domainId, object userState) {
            if ((this.onBeginDeleteDomainDelegate == null)) {
                this.onBeginDeleteDomainDelegate = new BeginOperationDelegate(this.OnBeginDeleteDomain);
            }
            if ((this.onEndDeleteDomainDelegate == null)) {
                this.onEndDeleteDomainDelegate = new EndOperationDelegate(this.OnEndDeleteDomain);
            }
            if ((this.onDeleteDomainCompletedDelegate == null)) {
                this.onDeleteDomainCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteDomainCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteDomainDelegate, new object[] {
                        callingUrl,
                        domainId}, this.onEndDeleteDomainDelegate, this.onDeleteDomainCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginDeleteRootMap(string callingUrl, System.Guid domainId, System.Guid rootMapId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteRootMap(callingUrl, domainId, rootMapId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int TransactionalNodeService.Service.ITransactionalMappingToolService.EndDeleteRootMap(System.IAsyncResult result) {
            return base.Channel.EndDeleteRootMap(result);
        }
        
        private System.IAsyncResult OnBeginDeleteRootMap(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid domainId = ((System.Guid)(inValues[1]));
            System.Guid rootMapId = ((System.Guid)(inValues[2]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginDeleteRootMap(callingUrl, domainId, rootMapId, callback, asyncState);
        }
        
        private object[] OnEndDeleteRootMap(System.IAsyncResult result) {
            int retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndDeleteRootMap(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteRootMapCompleted(object state) {
            if ((this.DeleteRootMapCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteRootMapCompleted(this, new DeleteRootMapCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteRootMapAsync(string callingUrl, System.Guid domainId, System.Guid rootMapId) {
            this.DeleteRootMapAsync(callingUrl, domainId, rootMapId, null);
        }
        
        public void DeleteRootMapAsync(string callingUrl, System.Guid domainId, System.Guid rootMapId, object userState) {
            if ((this.onBeginDeleteRootMapDelegate == null)) {
                this.onBeginDeleteRootMapDelegate = new BeginOperationDelegate(this.OnBeginDeleteRootMap);
            }
            if ((this.onEndDeleteRootMapDelegate == null)) {
                this.onEndDeleteRootMapDelegate = new EndOperationDelegate(this.OnEndDeleteRootMap);
            }
            if ((this.onDeleteRootMapCompletedDelegate == null)) {
                this.onDeleteRootMapCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteRootMapCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteRootMapDelegate, new object[] {
                        callingUrl,
                        domainId,
                        rootMapId}, this.onEndDeleteRootMapDelegate, this.onDeleteRootMapCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginBeginTransaction(string callingUrl, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBeginTransaction(callingUrl, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Guid TransactionalNodeService.Service.ITransactionalMappingToolService.EndBeginTransaction(System.IAsyncResult result) {
            return base.Channel.EndBeginTransaction(result);
        }
        
        private System.IAsyncResult OnBeginBeginTransaction(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginBeginTransaction(callingUrl, callback, asyncState);
        }
        
        private object[] OnEndBeginTransaction(System.IAsyncResult result) {
            System.Guid retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndBeginTransaction(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBeginTransactionCompleted(object state) {
            if ((this.BeginTransactionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BeginTransactionCompleted(this, new BeginTransactionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BeginTransactionAsync(string callingUrl) {
            this.BeginTransactionAsync(callingUrl, null);
        }
        
        public void BeginTransactionAsync(string callingUrl, object userState) {
            if ((this.onBeginBeginTransactionDelegate == null)) {
                this.onBeginBeginTransactionDelegate = new BeginOperationDelegate(this.OnBeginBeginTransaction);
            }
            if ((this.onEndBeginTransactionDelegate == null)) {
                this.onEndBeginTransactionDelegate = new EndOperationDelegate(this.OnEndBeginTransaction);
            }
            if ((this.onBeginTransactionCompletedDelegate == null)) {
                this.onBeginTransactionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBeginTransactionCompleted);
            }
            base.InvokeAsync(this.onBeginBeginTransactionDelegate, new object[] {
                        callingUrl}, this.onEndBeginTransactionDelegate, this.onBeginTransactionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginCompleteTransaction(string callingUrl, System.Guid sessionId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCompleteTransaction(callingUrl, sessionId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.RS TransactionalNodeService.Service.ITransactionalMappingToolService.EndCompleteTransaction(System.IAsyncResult result) {
            return base.Channel.EndCompleteTransaction(result);
        }
        
        private System.IAsyncResult OnBeginCompleteTransaction(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid sessionId = ((System.Guid)(inValues[1]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginCompleteTransaction(callingUrl, sessionId, callback, asyncState);
        }
        
        private object[] OnEndCompleteTransaction(System.IAsyncResult result) {
            TransactionalNodeService.Service.RS retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndCompleteTransaction(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCompleteTransactionCompleted(object state) {
            if ((this.CompleteTransactionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CompleteTransactionCompleted(this, new CompleteTransactionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CompleteTransactionAsync(string callingUrl, System.Guid sessionId) {
            this.CompleteTransactionAsync(callingUrl, sessionId, null);
        }
        
        public void CompleteTransactionAsync(string callingUrl, System.Guid sessionId, object userState) {
            if ((this.onBeginCompleteTransactionDelegate == null)) {
                this.onBeginCompleteTransactionDelegate = new BeginOperationDelegate(this.OnBeginCompleteTransaction);
            }
            if ((this.onEndCompleteTransactionDelegate == null)) {
                this.onEndCompleteTransactionDelegate = new EndOperationDelegate(this.OnEndCompleteTransaction);
            }
            if ((this.onCompleteTransactionCompletedDelegate == null)) {
                this.onCompleteTransactionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCompleteTransactionCompleted);
            }
            base.InvokeAsync(this.onBeginCompleteTransactionDelegate, new object[] {
                        callingUrl,
                        sessionId}, this.onEndCompleteTransactionDelegate, this.onCompleteTransactionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginGetAllMapTypes(string callingUrl, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllMapTypes(callingUrl, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.TypeResponse TransactionalNodeService.Service.ITransactionalMappingToolService.EndGetAllMapTypes(System.IAsyncResult result) {
            return base.Channel.EndGetAllMapTypes(result);
        }
        
        private System.IAsyncResult OnBeginGetAllMapTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginGetAllMapTypes(callingUrl, callback, asyncState);
        }
        
        private object[] OnEndGetAllMapTypes(System.IAsyncResult result) {
            TransactionalNodeService.Service.TypeResponse retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndGetAllMapTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllMapTypesCompleted(object state) {
            if ((this.GetAllMapTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllMapTypesCompleted(this, new GetAllMapTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllMapTypesAsync(string callingUrl) {
            this.GetAllMapTypesAsync(callingUrl, null);
        }
        
        public void GetAllMapTypesAsync(string callingUrl, object userState) {
            if ((this.onBeginGetAllMapTypesDelegate == null)) {
                this.onBeginGetAllMapTypesDelegate = new BeginOperationDelegate(this.OnBeginGetAllMapTypes);
            }
            if ((this.onEndGetAllMapTypesDelegate == null)) {
                this.onEndGetAllMapTypesDelegate = new EndOperationDelegate(this.OnEndGetAllMapTypes);
            }
            if ((this.onGetAllMapTypesCompletedDelegate == null)) {
                this.onGetAllMapTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllMapTypesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllMapTypesDelegate, new object[] {
                        callingUrl}, this.onEndGetAllMapTypesDelegate, this.onGetAllMapTypesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginQueryDomains(string callingUrl, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginQueryDomains(callingUrl, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.QueryResponse> TransactionalNodeService.Service.ITransactionalMappingToolService.EndQueryDomains(System.IAsyncResult result) {
            return base.Channel.EndQueryDomains(result);
        }
        
        private System.IAsyncResult OnBeginQueryDomains(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginQueryDomains(callingUrl, callback, asyncState);
        }
        
        private object[] OnEndQueryDomains(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.QueryResponse> retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndQueryDomains(result);
            return new object[] {
                    retVal};
        }
        
        private void OnQueryDomainsCompleted(object state) {
            if ((this.QueryDomainsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.QueryDomainsCompleted(this, new QueryDomainsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void QueryDomainsAsync(string callingUrl) {
            this.QueryDomainsAsync(callingUrl, null);
        }
        
        public void QueryDomainsAsync(string callingUrl, object userState) {
            if ((this.onBeginQueryDomainsDelegate == null)) {
                this.onBeginQueryDomainsDelegate = new BeginOperationDelegate(this.OnBeginQueryDomains);
            }
            if ((this.onEndQueryDomainsDelegate == null)) {
                this.onEndQueryDomainsDelegate = new EndOperationDelegate(this.OnEndQueryDomains);
            }
            if ((this.onQueryDomainsCompletedDelegate == null)) {
                this.onQueryDomainsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnQueryDomainsCompleted);
            }
            base.InvokeAsync(this.onBeginQueryDomainsDelegate, new object[] {
                        callingUrl}, this.onEndQueryDomainsDelegate, this.onQueryDomainsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginQueryMap(string callingUrl, System.Guid domainId, System.Guid nodeId, int maxDepth, TransactionalNodeService.Service.EdgeConditions edgeConditions, TransactionalNodeService.Service.FilterConditions filterConditions, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginQueryMap(callingUrl, domainId, nodeId, maxDepth, edgeConditions, filterConditions, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.QueryResponse TransactionalNodeService.Service.ITransactionalMappingToolService.EndQueryMap(System.IAsyncResult result) {
            return base.Channel.EndQueryMap(result);
        }
        
        private System.IAsyncResult OnBeginQueryMap(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid domainId = ((System.Guid)(inValues[1]));
            System.Guid nodeId = ((System.Guid)(inValues[2]));
            int maxDepth = ((int)(inValues[3]));
            TransactionalNodeService.Service.EdgeConditions edgeConditions = ((TransactionalNodeService.Service.EdgeConditions)(inValues[4]));
            TransactionalNodeService.Service.FilterConditions filterConditions = ((TransactionalNodeService.Service.FilterConditions)(inValues[5]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginQueryMap(callingUrl, domainId, nodeId, maxDepth, edgeConditions, filterConditions, callback, asyncState);
        }
        
        private object[] OnEndQueryMap(System.IAsyncResult result) {
            TransactionalNodeService.Service.QueryResponse retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndQueryMap(result);
            return new object[] {
                    retVal};
        }
        
        private void OnQueryMapCompleted(object state) {
            if ((this.QueryMapCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.QueryMapCompleted(this, new QueryMapCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void QueryMapAsync(string callingUrl, System.Guid domainId, System.Guid nodeId, int maxDepth, TransactionalNodeService.Service.EdgeConditions edgeConditions, TransactionalNodeService.Service.FilterConditions filterConditions) {
            this.QueryMapAsync(callingUrl, domainId, nodeId, maxDepth, edgeConditions, filterConditions, null);
        }
        
        public void QueryMapAsync(string callingUrl, System.Guid domainId, System.Guid nodeId, int maxDepth, TransactionalNodeService.Service.EdgeConditions edgeConditions, TransactionalNodeService.Service.FilterConditions filterConditions, object userState) {
            if ((this.onBeginQueryMapDelegate == null)) {
                this.onBeginQueryMapDelegate = new BeginOperationDelegate(this.OnBeginQueryMap);
            }
            if ((this.onEndQueryMapDelegate == null)) {
                this.onEndQueryMapDelegate = new EndOperationDelegate(this.OnEndQueryMap);
            }
            if ((this.onQueryMapCompletedDelegate == null)) {
                this.onQueryMapCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnQueryMapCompleted);
            }
            base.InvokeAsync(this.onBeginQueryMapDelegate, new object[] {
                        callingUrl,
                        domainId,
                        nodeId,
                        maxDepth,
                        edgeConditions,
                        filterConditions}, this.onEndQueryMapDelegate, this.onQueryMapCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginQueryMapPaged(string callingUrl, System.Guid domainId, System.Guid nodeId, int maxDepth, TransactionalNodeService.Service.EdgeConditions edgeConditions, TransactionalNodeService.Service.FilterConditions filterConditions, int objectIndex, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginQueryMapPaged(callingUrl, domainId, nodeId, maxDepth, edgeConditions, filterConditions, objectIndex, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.QueryResponse TransactionalNodeService.Service.ITransactionalMappingToolService.EndQueryMapPaged(System.IAsyncResult result) {
            return base.Channel.EndQueryMapPaged(result);
        }
        
        private System.IAsyncResult OnBeginQueryMapPaged(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid domainId = ((System.Guid)(inValues[1]));
            System.Guid nodeId = ((System.Guid)(inValues[2]));
            int maxDepth = ((int)(inValues[3]));
            TransactionalNodeService.Service.EdgeConditions edgeConditions = ((TransactionalNodeService.Service.EdgeConditions)(inValues[4]));
            TransactionalNodeService.Service.FilterConditions filterConditions = ((TransactionalNodeService.Service.FilterConditions)(inValues[5]));
            int objectIndex = ((int)(inValues[6]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginQueryMapPaged(callingUrl, domainId, nodeId, maxDepth, edgeConditions, filterConditions, objectIndex, callback, asyncState);
        }
        
        private object[] OnEndQueryMapPaged(System.IAsyncResult result) {
            TransactionalNodeService.Service.QueryResponse retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndQueryMapPaged(result);
            return new object[] {
                    retVal};
        }
        
        private void OnQueryMapPagedCompleted(object state) {
            if ((this.QueryMapPagedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.QueryMapPagedCompleted(this, new QueryMapPagedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void QueryMapPagedAsync(string callingUrl, System.Guid domainId, System.Guid nodeId, int maxDepth, TransactionalNodeService.Service.EdgeConditions edgeConditions, TransactionalNodeService.Service.FilterConditions filterConditions, int objectIndex) {
            this.QueryMapPagedAsync(callingUrl, domainId, nodeId, maxDepth, edgeConditions, filterConditions, objectIndex, null);
        }
        
        public void QueryMapPagedAsync(string callingUrl, System.Guid domainId, System.Guid nodeId, int maxDepth, TransactionalNodeService.Service.EdgeConditions edgeConditions, TransactionalNodeService.Service.FilterConditions filterConditions, int objectIndex, object userState) {
            if ((this.onBeginQueryMapPagedDelegate == null)) {
                this.onBeginQueryMapPagedDelegate = new BeginOperationDelegate(this.OnBeginQueryMapPaged);
            }
            if ((this.onEndQueryMapPagedDelegate == null)) {
                this.onEndQueryMapPagedDelegate = new EndOperationDelegate(this.OnEndQueryMapPaged);
            }
            if ((this.onQueryMapPagedCompletedDelegate == null)) {
                this.onQueryMapPagedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnQueryMapPagedCompleted);
            }
            base.InvokeAsync(this.onBeginQueryMapPagedDelegate, new object[] {
                        callingUrl,
                        domainId,
                        nodeId,
                        maxDepth,
                        edgeConditions,
                        filterConditions,
                        objectIndex}, this.onEndQueryMapPagedDelegate, this.onQueryMapPagedCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginQueryMapByDomain(string callingUrl, System.Guid domainId, int maxDepth, TransactionalNodeService.Service.EdgeConditions edgeConditions, TransactionalNodeService.Service.FilterConditions filterConditions, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginQueryMapByDomain(callingUrl, domainId, maxDepth, edgeConditions, filterConditions, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.QueryResponse TransactionalNodeService.Service.ITransactionalMappingToolService.EndQueryMapByDomain(System.IAsyncResult result) {
            return base.Channel.EndQueryMapByDomain(result);
        }
        
        private System.IAsyncResult OnBeginQueryMapByDomain(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid domainId = ((System.Guid)(inValues[1]));
            int maxDepth = ((int)(inValues[2]));
            TransactionalNodeService.Service.EdgeConditions edgeConditions = ((TransactionalNodeService.Service.EdgeConditions)(inValues[3]));
            TransactionalNodeService.Service.FilterConditions filterConditions = ((TransactionalNodeService.Service.FilterConditions)(inValues[4]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginQueryMapByDomain(callingUrl, domainId, maxDepth, edgeConditions, filterConditions, callback, asyncState);
        }
        
        private object[] OnEndQueryMapByDomain(System.IAsyncResult result) {
            TransactionalNodeService.Service.QueryResponse retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndQueryMapByDomain(result);
            return new object[] {
                    retVal};
        }
        
        private void OnQueryMapByDomainCompleted(object state) {
            if ((this.QueryMapByDomainCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.QueryMapByDomainCompleted(this, new QueryMapByDomainCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void QueryMapByDomainAsync(string callingUrl, System.Guid domainId, int maxDepth, TransactionalNodeService.Service.EdgeConditions edgeConditions, TransactionalNodeService.Service.FilterConditions filterConditions) {
            this.QueryMapByDomainAsync(callingUrl, domainId, maxDepth, edgeConditions, filterConditions, null);
        }
        
        public void QueryMapByDomainAsync(string callingUrl, System.Guid domainId, int maxDepth, TransactionalNodeService.Service.EdgeConditions edgeConditions, TransactionalNodeService.Service.FilterConditions filterConditions, object userState) {
            if ((this.onBeginQueryMapByDomainDelegate == null)) {
                this.onBeginQueryMapByDomainDelegate = new BeginOperationDelegate(this.OnBeginQueryMapByDomain);
            }
            if ((this.onEndQueryMapByDomainDelegate == null)) {
                this.onEndQueryMapByDomainDelegate = new EndOperationDelegate(this.OnEndQueryMapByDomain);
            }
            if ((this.onQueryMapByDomainCompletedDelegate == null)) {
                this.onQueryMapByDomainCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnQueryMapByDomainCompleted);
            }
            base.InvokeAsync(this.onBeginQueryMapByDomainDelegate, new object[] {
                        callingUrl,
                        domainId,
                        maxDepth,
                        edgeConditions,
                        filterConditions}, this.onEndQueryMapByDomainDelegate, this.onQueryMapByDomainCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginSearchMap(string callingUrl, System.Guid domainId, System.Guid rootMapUid, TransactionalNodeService.Service.SearchConditions conditions, int pageNumber, int pageSize, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSearchMap(callingUrl, domainId, rootMapUid, conditions, pageNumber, pageSize, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.SearchMapResult TransactionalNodeService.Service.ITransactionalMappingToolService.EndSearchMap(System.IAsyncResult result) {
            return base.Channel.EndSearchMap(result);
        }
        
        private System.IAsyncResult OnBeginSearchMap(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid domainId = ((System.Guid)(inValues[1]));
            System.Guid rootMapUid = ((System.Guid)(inValues[2]));
            TransactionalNodeService.Service.SearchConditions conditions = ((TransactionalNodeService.Service.SearchConditions)(inValues[3]));
            int pageNumber = ((int)(inValues[4]));
            int pageSize = ((int)(inValues[5]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginSearchMap(callingUrl, domainId, rootMapUid, conditions, pageNumber, pageSize, callback, asyncState);
        }
        
        private object[] OnEndSearchMap(System.IAsyncResult result) {
            TransactionalNodeService.Service.SearchMapResult retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndSearchMap(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSearchMapCompleted(object state) {
            if ((this.SearchMapCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SearchMapCompleted(this, new SearchMapCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SearchMapAsync(string callingUrl, System.Guid domainId, System.Guid rootMapUid, TransactionalNodeService.Service.SearchConditions conditions, int pageNumber, int pageSize) {
            this.SearchMapAsync(callingUrl, domainId, rootMapUid, conditions, pageNumber, pageSize, null);
        }
        
        public void SearchMapAsync(string callingUrl, System.Guid domainId, System.Guid rootMapUid, TransactionalNodeService.Service.SearchConditions conditions, int pageNumber, int pageSize, object userState) {
            if ((this.onBeginSearchMapDelegate == null)) {
                this.onBeginSearchMapDelegate = new BeginOperationDelegate(this.OnBeginSearchMap);
            }
            if ((this.onEndSearchMapDelegate == null)) {
                this.onEndSearchMapDelegate = new EndOperationDelegate(this.OnEndSearchMap);
            }
            if ((this.onSearchMapCompletedDelegate == null)) {
                this.onSearchMapCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSearchMapCompleted);
            }
            base.InvokeAsync(this.onBeginSearchMapDelegate, new object[] {
                        callingUrl,
                        domainId,
                        rootMapUid,
                        conditions,
                        pageNumber,
                        pageSize}, this.onEndSearchMapDelegate, this.onSearchMapCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginNA(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, TransactionalNodeService.Service.NT nodeType, string originalId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginNA(callingUrl, sessionId, domainId, rootMapId, nodeType, originalId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.MP TransactionalNodeService.Service.ITransactionalMappingToolService.EndNA(System.IAsyncResult result) {
            return base.Channel.EndNA(result);
        }
        
        private System.IAsyncResult OnBeginNA(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid sessionId = ((System.Guid)(inValues[1]));
            TransactionalNodeService.Service.MP domainId = ((TransactionalNodeService.Service.MP)(inValues[2]));
            TransactionalNodeService.Service.MP rootMapId = ((TransactionalNodeService.Service.MP)(inValues[3]));
            TransactionalNodeService.Service.NT nodeType = ((TransactionalNodeService.Service.NT)(inValues[4]));
            string originalId = ((string)(inValues[5]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginNA(callingUrl, sessionId, domainId, rootMapId, nodeType, originalId, callback, asyncState);
        }
        
        private object[] OnEndNA(System.IAsyncResult result) {
            TransactionalNodeService.Service.MP retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndNA(result);
            return new object[] {
                    retVal};
        }
        
        private void OnNACompleted(object state) {
            if ((this.NACompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.NACompleted(this, new NACompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void NAAsync(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, TransactionalNodeService.Service.NT nodeType, string originalId) {
            this.NAAsync(callingUrl, sessionId, domainId, rootMapId, nodeType, originalId, null);
        }
        
        public void NAAsync(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, TransactionalNodeService.Service.NT nodeType, string originalId, object userState) {
            if ((this.onBeginNADelegate == null)) {
                this.onBeginNADelegate = new BeginOperationDelegate(this.OnBeginNA);
            }
            if ((this.onEndNADelegate == null)) {
                this.onEndNADelegate = new EndOperationDelegate(this.OnEndNA);
            }
            if ((this.onNACompletedDelegate == null)) {
                this.onNACompletedDelegate = new System.Threading.SendOrPostCallback(this.OnNACompleted);
            }
            base.InvokeAsync(this.onBeginNADelegate, new object[] {
                        callingUrl,
                        sessionId,
                        domainId,
                        rootMapId,
                        nodeType,
                        originalId}, this.onEndNADelegate, this.onNACompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginBNA(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, TransactionalNodeService.Service.NT nodeType, string originalId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBNA(callingUrl, sessionId, responseParameter, domainId, rootMapId, nodeType, originalId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.MP TransactionalNodeService.Service.ITransactionalMappingToolService.EndBNA(System.IAsyncResult result) {
            return base.Channel.EndBNA(result);
        }
        
        private System.IAsyncResult OnBeginBNA(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid sessionId = ((System.Guid)(inValues[1]));
            System.Guid responseParameter = ((System.Guid)(inValues[2]));
            TransactionalNodeService.Service.MP domainId = ((TransactionalNodeService.Service.MP)(inValues[3]));
            TransactionalNodeService.Service.MP rootMapId = ((TransactionalNodeService.Service.MP)(inValues[4]));
            TransactionalNodeService.Service.NT nodeType = ((TransactionalNodeService.Service.NT)(inValues[5]));
            string originalId = ((string)(inValues[6]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginBNA(callingUrl, sessionId, responseParameter, domainId, rootMapId, nodeType, originalId, callback, asyncState);
        }
        
        private object[] OnEndBNA(System.IAsyncResult result) {
            TransactionalNodeService.Service.MP retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndBNA(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBNACompleted(object state) {
            if ((this.BNACompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BNACompleted(this, new BNACompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BNAAsync(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, TransactionalNodeService.Service.NT nodeType, string originalId) {
            this.BNAAsync(callingUrl, sessionId, responseParameter, domainId, rootMapId, nodeType, originalId, null);
        }
        
        public void BNAAsync(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, TransactionalNodeService.Service.NT nodeType, string originalId, object userState) {
            if ((this.onBeginBNADelegate == null)) {
                this.onBeginBNADelegate = new BeginOperationDelegate(this.OnBeginBNA);
            }
            if ((this.onEndBNADelegate == null)) {
                this.onEndBNADelegate = new EndOperationDelegate(this.OnEndBNA);
            }
            if ((this.onBNACompletedDelegate == null)) {
                this.onBNACompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBNACompleted);
            }
            base.InvokeAsync(this.onBeginBNADelegate, new object[] {
                        callingUrl,
                        sessionId,
                        responseParameter,
                        domainId,
                        rootMapId,
                        nodeType,
                        originalId}, this.onEndBNADelegate, this.onBNACompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginND(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP nodeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginND(callingUrl, sessionId, domainId, nodeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.MP TransactionalNodeService.Service.ITransactionalMappingToolService.EndND(System.IAsyncResult result) {
            return base.Channel.EndND(result);
        }
        
        private System.IAsyncResult OnBeginND(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid sessionId = ((System.Guid)(inValues[1]));
            TransactionalNodeService.Service.MP domainId = ((TransactionalNodeService.Service.MP)(inValues[2]));
            TransactionalNodeService.Service.MP nodeId = ((TransactionalNodeService.Service.MP)(inValues[3]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginND(callingUrl, sessionId, domainId, nodeId, callback, asyncState);
        }
        
        private object[] OnEndND(System.IAsyncResult result) {
            TransactionalNodeService.Service.MP retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndND(result);
            return new object[] {
                    retVal};
        }
        
        private void OnNDCompleted(object state) {
            if ((this.NDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.NDCompleted(this, new NDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void NDAsync(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP nodeId) {
            this.NDAsync(callingUrl, sessionId, domainId, nodeId, null);
        }
        
        public void NDAsync(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP nodeId, object userState) {
            if ((this.onBeginNDDelegate == null)) {
                this.onBeginNDDelegate = new BeginOperationDelegate(this.OnBeginND);
            }
            if ((this.onEndNDDelegate == null)) {
                this.onEndNDDelegate = new EndOperationDelegate(this.OnEndND);
            }
            if ((this.onNDCompletedDelegate == null)) {
                this.onNDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnNDCompleted);
            }
            base.InvokeAsync(this.onBeginNDDelegate, new object[] {
                        callingUrl,
                        sessionId,
                        domainId,
                        nodeId}, this.onEndNDDelegate, this.onNDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginBND(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP nodeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBND(callingUrl, sessionId, responseParameter, domainId, nodeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.MP TransactionalNodeService.Service.ITransactionalMappingToolService.EndBND(System.IAsyncResult result) {
            return base.Channel.EndBND(result);
        }
        
        private System.IAsyncResult OnBeginBND(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid sessionId = ((System.Guid)(inValues[1]));
            System.Guid responseParameter = ((System.Guid)(inValues[2]));
            TransactionalNodeService.Service.MP domainId = ((TransactionalNodeService.Service.MP)(inValues[3]));
            TransactionalNodeService.Service.MP nodeId = ((TransactionalNodeService.Service.MP)(inValues[4]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginBND(callingUrl, sessionId, responseParameter, domainId, nodeId, callback, asyncState);
        }
        
        private object[] OnEndBND(System.IAsyncResult result) {
            TransactionalNodeService.Service.MP retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndBND(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBNDCompleted(object state) {
            if ((this.BNDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BNDCompleted(this, new BNDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BNDAsync(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP nodeId) {
            this.BNDAsync(callingUrl, sessionId, responseParameter, domainId, nodeId, null);
        }
        
        public void BNDAsync(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP nodeId, object userState) {
            if ((this.onBeginBNDDelegate == null)) {
                this.onBeginBNDDelegate = new BeginOperationDelegate(this.OnBeginBND);
            }
            if ((this.onEndBNDDelegate == null)) {
                this.onEndBNDDelegate = new EndOperationDelegate(this.OnEndBND);
            }
            if ((this.onBNDCompletedDelegate == null)) {
                this.onBNDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBNDCompleted);
            }
            base.InvokeAsync(this.onBeginBNDDelegate, new object[] {
                        callingUrl,
                        sessionId,
                        responseParameter,
                        domainId,
                        nodeId}, this.onEndBNDDelegate, this.onBNDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginNU(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP nodeId, TransactionalNodeService.Service.NT nodeType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginNU(callingUrl, sessionId, domainId, nodeId, nodeType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.MP TransactionalNodeService.Service.ITransactionalMappingToolService.EndNU(System.IAsyncResult result) {
            return base.Channel.EndNU(result);
        }
        
        private System.IAsyncResult OnBeginNU(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid sessionId = ((System.Guid)(inValues[1]));
            TransactionalNodeService.Service.MP domainId = ((TransactionalNodeService.Service.MP)(inValues[2]));
            TransactionalNodeService.Service.MP nodeId = ((TransactionalNodeService.Service.MP)(inValues[3]));
            TransactionalNodeService.Service.NT nodeType = ((TransactionalNodeService.Service.NT)(inValues[4]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginNU(callingUrl, sessionId, domainId, nodeId, nodeType, callback, asyncState);
        }
        
        private object[] OnEndNU(System.IAsyncResult result) {
            TransactionalNodeService.Service.MP retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndNU(result);
            return new object[] {
                    retVal};
        }
        
        private void OnNUCompleted(object state) {
            if ((this.NUCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.NUCompleted(this, new NUCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void NUAsync(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP nodeId, TransactionalNodeService.Service.NT nodeType) {
            this.NUAsync(callingUrl, sessionId, domainId, nodeId, nodeType, null);
        }
        
        public void NUAsync(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP nodeId, TransactionalNodeService.Service.NT nodeType, object userState) {
            if ((this.onBeginNUDelegate == null)) {
                this.onBeginNUDelegate = new BeginOperationDelegate(this.OnBeginNU);
            }
            if ((this.onEndNUDelegate == null)) {
                this.onEndNUDelegate = new EndOperationDelegate(this.OnEndNU);
            }
            if ((this.onNUCompletedDelegate == null)) {
                this.onNUCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnNUCompleted);
            }
            base.InvokeAsync(this.onBeginNUDelegate, new object[] {
                        callingUrl,
                        sessionId,
                        domainId,
                        nodeId,
                        nodeType}, this.onEndNUDelegate, this.onNUCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginBNU(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP nodeId, TransactionalNodeService.Service.NT nodeType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBNU(callingUrl, sessionId, responseParameter, domainId, nodeId, nodeType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.MP TransactionalNodeService.Service.ITransactionalMappingToolService.EndBNU(System.IAsyncResult result) {
            return base.Channel.EndBNU(result);
        }
        
        private System.IAsyncResult OnBeginBNU(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid sessionId = ((System.Guid)(inValues[1]));
            System.Guid responseParameter = ((System.Guid)(inValues[2]));
            TransactionalNodeService.Service.MP domainId = ((TransactionalNodeService.Service.MP)(inValues[3]));
            TransactionalNodeService.Service.MP nodeId = ((TransactionalNodeService.Service.MP)(inValues[4]));
            TransactionalNodeService.Service.NT nodeType = ((TransactionalNodeService.Service.NT)(inValues[5]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginBNU(callingUrl, sessionId, responseParameter, domainId, nodeId, nodeType, callback, asyncState);
        }
        
        private object[] OnEndBNU(System.IAsyncResult result) {
            TransactionalNodeService.Service.MP retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndBNU(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBNUCompleted(object state) {
            if ((this.BNUCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BNUCompleted(this, new BNUCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BNUAsync(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP nodeId, TransactionalNodeService.Service.NT nodeType) {
            this.BNUAsync(callingUrl, sessionId, responseParameter, domainId, nodeId, nodeType, null);
        }
        
        public void BNUAsync(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP nodeId, TransactionalNodeService.Service.NT nodeType, object userState) {
            if ((this.onBeginBNUDelegate == null)) {
                this.onBeginBNUDelegate = new BeginOperationDelegate(this.OnBeginBNU);
            }
            if ((this.onEndBNUDelegate == null)) {
                this.onEndBNUDelegate = new EndOperationDelegate(this.OnEndBNU);
            }
            if ((this.onBNUCompletedDelegate == null)) {
                this.onBNUCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBNUCompleted);
            }
            base.InvokeAsync(this.onBeginBNUDelegate, new object[] {
                        callingUrl,
                        sessionId,
                        responseParameter,
                        domainId,
                        nodeId,
                        nodeType}, this.onEndBNUDelegate, this.onBNUCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginRA(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> nodes, TransactionalNodeService.Service.RT relationshipType, string originalId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRA(callingUrl, sessionId, domainId, rootMapId, nodes, relationshipType, originalId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.MP TransactionalNodeService.Service.ITransactionalMappingToolService.EndRA(System.IAsyncResult result) {
            return base.Channel.EndRA(result);
        }
        
        private System.IAsyncResult OnBeginRA(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid sessionId = ((System.Guid)(inValues[1]));
            TransactionalNodeService.Service.MP domainId = ((TransactionalNodeService.Service.MP)(inValues[2]));
            TransactionalNodeService.Service.MP rootMapId = ((TransactionalNodeService.Service.MP)(inValues[3]));
            System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> nodes = ((System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP>)(inValues[4]));
            TransactionalNodeService.Service.RT relationshipType = ((TransactionalNodeService.Service.RT)(inValues[5]));
            string originalId = ((string)(inValues[6]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginRA(callingUrl, sessionId, domainId, rootMapId, nodes, relationshipType, originalId, callback, asyncState);
        }
        
        private object[] OnEndRA(System.IAsyncResult result) {
            TransactionalNodeService.Service.MP retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndRA(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRACompleted(object state) {
            if ((this.RACompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RACompleted(this, new RACompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RAAsync(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> nodes, TransactionalNodeService.Service.RT relationshipType, string originalId) {
            this.RAAsync(callingUrl, sessionId, domainId, rootMapId, nodes, relationshipType, originalId, null);
        }
        
        public void RAAsync(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> nodes, TransactionalNodeService.Service.RT relationshipType, string originalId, object userState) {
            if ((this.onBeginRADelegate == null)) {
                this.onBeginRADelegate = new BeginOperationDelegate(this.OnBeginRA);
            }
            if ((this.onEndRADelegate == null)) {
                this.onEndRADelegate = new EndOperationDelegate(this.OnEndRA);
            }
            if ((this.onRACompletedDelegate == null)) {
                this.onRACompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRACompleted);
            }
            base.InvokeAsync(this.onBeginRADelegate, new object[] {
                        callingUrl,
                        sessionId,
                        domainId,
                        rootMapId,
                        nodes,
                        relationshipType,
                        originalId}, this.onEndRADelegate, this.onRACompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginBRA(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> nodes, TransactionalNodeService.Service.RT relationshipType, string originalId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBRA(callingUrl, sessionId, responseParameter, domainId, rootMapId, nodes, relationshipType, originalId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.MP TransactionalNodeService.Service.ITransactionalMappingToolService.EndBRA(System.IAsyncResult result) {
            return base.Channel.EndBRA(result);
        }
        
        private System.IAsyncResult OnBeginBRA(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid sessionId = ((System.Guid)(inValues[1]));
            System.Guid responseParameter = ((System.Guid)(inValues[2]));
            TransactionalNodeService.Service.MP domainId = ((TransactionalNodeService.Service.MP)(inValues[3]));
            TransactionalNodeService.Service.MP rootMapId = ((TransactionalNodeService.Service.MP)(inValues[4]));
            System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> nodes = ((System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP>)(inValues[5]));
            TransactionalNodeService.Service.RT relationshipType = ((TransactionalNodeService.Service.RT)(inValues[6]));
            string originalId = ((string)(inValues[7]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginBRA(callingUrl, sessionId, responseParameter, domainId, rootMapId, nodes, relationshipType, originalId, callback, asyncState);
        }
        
        private object[] OnEndBRA(System.IAsyncResult result) {
            TransactionalNodeService.Service.MP retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndBRA(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBRACompleted(object state) {
            if ((this.BRACompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BRACompleted(this, new BRACompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BRAAsync(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> nodes, TransactionalNodeService.Service.RT relationshipType, string originalId) {
            this.BRAAsync(callingUrl, sessionId, responseParameter, domainId, rootMapId, nodes, relationshipType, originalId, null);
        }
        
        public void BRAAsync(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> nodes, TransactionalNodeService.Service.RT relationshipType, string originalId, object userState) {
            if ((this.onBeginBRADelegate == null)) {
                this.onBeginBRADelegate = new BeginOperationDelegate(this.OnBeginBRA);
            }
            if ((this.onEndBRADelegate == null)) {
                this.onEndBRADelegate = new EndOperationDelegate(this.OnEndBRA);
            }
            if ((this.onBRACompletedDelegate == null)) {
                this.onBRACompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBRACompleted);
            }
            base.InvokeAsync(this.onBeginBRADelegate, new object[] {
                        callingUrl,
                        sessionId,
                        responseParameter,
                        domainId,
                        rootMapId,
                        nodes,
                        relationshipType,
                        originalId}, this.onEndBRADelegate, this.onBRACompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginRD(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP relationshipId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRD(callingUrl, sessionId, domainId, relationshipId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.MP TransactionalNodeService.Service.ITransactionalMappingToolService.EndRD(System.IAsyncResult result) {
            return base.Channel.EndRD(result);
        }
        
        private System.IAsyncResult OnBeginRD(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid sessionId = ((System.Guid)(inValues[1]));
            TransactionalNodeService.Service.MP domainId = ((TransactionalNodeService.Service.MP)(inValues[2]));
            TransactionalNodeService.Service.MP relationshipId = ((TransactionalNodeService.Service.MP)(inValues[3]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginRD(callingUrl, sessionId, domainId, relationshipId, callback, asyncState);
        }
        
        private object[] OnEndRD(System.IAsyncResult result) {
            TransactionalNodeService.Service.MP retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndRD(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRDCompleted(object state) {
            if ((this.RDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RDCompleted(this, new RDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RDAsync(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP relationshipId) {
            this.RDAsync(callingUrl, sessionId, domainId, relationshipId, null);
        }
        
        public void RDAsync(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP relationshipId, object userState) {
            if ((this.onBeginRDDelegate == null)) {
                this.onBeginRDDelegate = new BeginOperationDelegate(this.OnBeginRD);
            }
            if ((this.onEndRDDelegate == null)) {
                this.onEndRDDelegate = new EndOperationDelegate(this.OnEndRD);
            }
            if ((this.onRDCompletedDelegate == null)) {
                this.onRDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRDCompleted);
            }
            base.InvokeAsync(this.onBeginRDDelegate, new object[] {
                        callingUrl,
                        sessionId,
                        domainId,
                        relationshipId}, this.onEndRDDelegate, this.onRDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginBRD(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP relationshipId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBRD(callingUrl, sessionId, responseParameter, domainId, relationshipId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.MP TransactionalNodeService.Service.ITransactionalMappingToolService.EndBRD(System.IAsyncResult result) {
            return base.Channel.EndBRD(result);
        }
        
        private System.IAsyncResult OnBeginBRD(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid sessionId = ((System.Guid)(inValues[1]));
            System.Guid responseParameter = ((System.Guid)(inValues[2]));
            TransactionalNodeService.Service.MP domainId = ((TransactionalNodeService.Service.MP)(inValues[3]));
            TransactionalNodeService.Service.MP relationshipId = ((TransactionalNodeService.Service.MP)(inValues[4]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginBRD(callingUrl, sessionId, responseParameter, domainId, relationshipId, callback, asyncState);
        }
        
        private object[] OnEndBRD(System.IAsyncResult result) {
            TransactionalNodeService.Service.MP retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndBRD(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBRDCompleted(object state) {
            if ((this.BRDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BRDCompleted(this, new BRDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BRDAsync(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP relationshipId) {
            this.BRDAsync(callingUrl, sessionId, responseParameter, domainId, relationshipId, null);
        }
        
        public void BRDAsync(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP relationshipId, object userState) {
            if ((this.onBeginBRDDelegate == null)) {
                this.onBeginBRDDelegate = new BeginOperationDelegate(this.OnBeginBRD);
            }
            if ((this.onEndBRDDelegate == null)) {
                this.onEndBRDDelegate = new EndOperationDelegate(this.OnEndBRD);
            }
            if ((this.onBRDCompletedDelegate == null)) {
                this.onBRDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBRDCompleted);
            }
            base.InvokeAsync(this.onBeginBRDDelegate, new object[] {
                        callingUrl,
                        sessionId,
                        responseParameter,
                        domainId,
                        relationshipId}, this.onEndBRDDelegate, this.onBRDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginRU(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP relationshipId, System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> nodes, TransactionalNodeService.Service.RT relationshipType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRU(callingUrl, sessionId, domainId, relationshipId, nodes, relationshipType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.MP TransactionalNodeService.Service.ITransactionalMappingToolService.EndRU(System.IAsyncResult result) {
            return base.Channel.EndRU(result);
        }
        
        private System.IAsyncResult OnBeginRU(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid sessionId = ((System.Guid)(inValues[1]));
            TransactionalNodeService.Service.MP domainId = ((TransactionalNodeService.Service.MP)(inValues[2]));
            TransactionalNodeService.Service.MP relationshipId = ((TransactionalNodeService.Service.MP)(inValues[3]));
            System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> nodes = ((System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP>)(inValues[4]));
            TransactionalNodeService.Service.RT relationshipType = ((TransactionalNodeService.Service.RT)(inValues[5]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginRU(callingUrl, sessionId, domainId, relationshipId, nodes, relationshipType, callback, asyncState);
        }
        
        private object[] OnEndRU(System.IAsyncResult result) {
            TransactionalNodeService.Service.MP retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndRU(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRUCompleted(object state) {
            if ((this.RUCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RUCompleted(this, new RUCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RUAsync(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP relationshipId, System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> nodes, TransactionalNodeService.Service.RT relationshipType) {
            this.RUAsync(callingUrl, sessionId, domainId, relationshipId, nodes, relationshipType, null);
        }
        
        public void RUAsync(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP relationshipId, System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> nodes, TransactionalNodeService.Service.RT relationshipType, object userState) {
            if ((this.onBeginRUDelegate == null)) {
                this.onBeginRUDelegate = new BeginOperationDelegate(this.OnBeginRU);
            }
            if ((this.onEndRUDelegate == null)) {
                this.onEndRUDelegate = new EndOperationDelegate(this.OnEndRU);
            }
            if ((this.onRUCompletedDelegate == null)) {
                this.onRUCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRUCompleted);
            }
            base.InvokeAsync(this.onBeginRUDelegate, new object[] {
                        callingUrl,
                        sessionId,
                        domainId,
                        relationshipId,
                        nodes,
                        relationshipType}, this.onEndRUDelegate, this.onRUCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginBRU(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP relationshipId, System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> nodes, TransactionalNodeService.Service.RT relationshipType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBRU(callingUrl, sessionId, responseParameter, domainId, relationshipId, nodes, relationshipType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.MP TransactionalNodeService.Service.ITransactionalMappingToolService.EndBRU(System.IAsyncResult result) {
            return base.Channel.EndBRU(result);
        }
        
        private System.IAsyncResult OnBeginBRU(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid sessionId = ((System.Guid)(inValues[1]));
            System.Guid responseParameter = ((System.Guid)(inValues[2]));
            TransactionalNodeService.Service.MP domainId = ((TransactionalNodeService.Service.MP)(inValues[3]));
            TransactionalNodeService.Service.MP relationshipId = ((TransactionalNodeService.Service.MP)(inValues[4]));
            System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> nodes = ((System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP>)(inValues[5]));
            TransactionalNodeService.Service.RT relationshipType = ((TransactionalNodeService.Service.RT)(inValues[6]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginBRU(callingUrl, sessionId, responseParameter, domainId, relationshipId, nodes, relationshipType, callback, asyncState);
        }
        
        private object[] OnEndBRU(System.IAsyncResult result) {
            TransactionalNodeService.Service.MP retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndBRU(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBRUCompleted(object state) {
            if ((this.BRUCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BRUCompleted(this, new BRUCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BRUAsync(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP relationshipId, System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> nodes, TransactionalNodeService.Service.RT relationshipType) {
            this.BRUAsync(callingUrl, sessionId, responseParameter, domainId, relationshipId, nodes, relationshipType, null);
        }
        
        public void BRUAsync(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP relationshipId, System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> nodes, TransactionalNodeService.Service.RT relationshipType, object userState) {
            if ((this.onBeginBRUDelegate == null)) {
                this.onBeginBRUDelegate = new BeginOperationDelegate(this.OnBeginBRU);
            }
            if ((this.onEndBRUDelegate == null)) {
                this.onEndBRUDelegate = new EndOperationDelegate(this.OnEndBRU);
            }
            if ((this.onBRUCompletedDelegate == null)) {
                this.onBRUCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBRUCompleted);
            }
            base.InvokeAsync(this.onBeginBRUDelegate, new object[] {
                        callingUrl,
                        sessionId,
                        responseParameter,
                        domainId,
                        relationshipId,
                        nodes,
                        relationshipType}, this.onEndBRUDelegate, this.onBRUCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginMA(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, TransactionalNodeService.Service.MP node, TransactionalNodeService.Service.MP relationship, TransactionalNodeService.Service.DT descriptorType, TransactionalNodeService.Service.MetadataType metadataType, string name, string value, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMA(callingUrl, sessionId, domainId, rootMapId, node, relationship, descriptorType, metadataType, name, value, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.MP TransactionalNodeService.Service.ITransactionalMappingToolService.EndMA(System.IAsyncResult result) {
            return base.Channel.EndMA(result);
        }
        
        private System.IAsyncResult OnBeginMA(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid sessionId = ((System.Guid)(inValues[1]));
            TransactionalNodeService.Service.MP domainId = ((TransactionalNodeService.Service.MP)(inValues[2]));
            TransactionalNodeService.Service.MP rootMapId = ((TransactionalNodeService.Service.MP)(inValues[3]));
            TransactionalNodeService.Service.MP node = ((TransactionalNodeService.Service.MP)(inValues[4]));
            TransactionalNodeService.Service.MP relationship = ((TransactionalNodeService.Service.MP)(inValues[5]));
            TransactionalNodeService.Service.DT descriptorType = ((TransactionalNodeService.Service.DT)(inValues[6]));
            TransactionalNodeService.Service.MetadataType metadataType = ((TransactionalNodeService.Service.MetadataType)(inValues[7]));
            string name = ((string)(inValues[8]));
            string value = ((string)(inValues[9]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginMA(callingUrl, sessionId, domainId, rootMapId, node, relationship, descriptorType, metadataType, name, value, callback, asyncState);
        }
        
        private object[] OnEndMA(System.IAsyncResult result) {
            TransactionalNodeService.Service.MP retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndMA(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMACompleted(object state) {
            if ((this.MACompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MACompleted(this, new MACompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MAAsync(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, TransactionalNodeService.Service.MP node, TransactionalNodeService.Service.MP relationship, TransactionalNodeService.Service.DT descriptorType, TransactionalNodeService.Service.MetadataType metadataType, string name, string value) {
            this.MAAsync(callingUrl, sessionId, domainId, rootMapId, node, relationship, descriptorType, metadataType, name, value, null);
        }
        
        public void MAAsync(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, TransactionalNodeService.Service.MP node, TransactionalNodeService.Service.MP relationship, TransactionalNodeService.Service.DT descriptorType, TransactionalNodeService.Service.MetadataType metadataType, string name, string value, object userState) {
            if ((this.onBeginMADelegate == null)) {
                this.onBeginMADelegate = new BeginOperationDelegate(this.OnBeginMA);
            }
            if ((this.onEndMADelegate == null)) {
                this.onEndMADelegate = new EndOperationDelegate(this.OnEndMA);
            }
            if ((this.onMACompletedDelegate == null)) {
                this.onMACompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMACompleted);
            }
            base.InvokeAsync(this.onBeginMADelegate, new object[] {
                        callingUrl,
                        sessionId,
                        domainId,
                        rootMapId,
                        node,
                        relationship,
                        descriptorType,
                        metadataType,
                        name,
                        value}, this.onEndMADelegate, this.onMACompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginBMA(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, TransactionalNodeService.Service.MP node, TransactionalNodeService.Service.MP relationship, TransactionalNodeService.Service.DT descriptorType, TransactionalNodeService.Service.MetadataType metadataType, string name, string value, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBMA(callingUrl, sessionId, responseParameter, domainId, rootMapId, node, relationship, descriptorType, metadataType, name, value, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.MP TransactionalNodeService.Service.ITransactionalMappingToolService.EndBMA(System.IAsyncResult result) {
            return base.Channel.EndBMA(result);
        }
        
        private System.IAsyncResult OnBeginBMA(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid sessionId = ((System.Guid)(inValues[1]));
            System.Guid responseParameter = ((System.Guid)(inValues[2]));
            TransactionalNodeService.Service.MP domainId = ((TransactionalNodeService.Service.MP)(inValues[3]));
            TransactionalNodeService.Service.MP rootMapId = ((TransactionalNodeService.Service.MP)(inValues[4]));
            TransactionalNodeService.Service.MP node = ((TransactionalNodeService.Service.MP)(inValues[5]));
            TransactionalNodeService.Service.MP relationship = ((TransactionalNodeService.Service.MP)(inValues[6]));
            TransactionalNodeService.Service.DT descriptorType = ((TransactionalNodeService.Service.DT)(inValues[7]));
            TransactionalNodeService.Service.MetadataType metadataType = ((TransactionalNodeService.Service.MetadataType)(inValues[8]));
            string name = ((string)(inValues[9]));
            string value = ((string)(inValues[10]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginBMA(callingUrl, sessionId, responseParameter, domainId, rootMapId, node, relationship, descriptorType, metadataType, name, value, callback, asyncState);
        }
        
        private object[] OnEndBMA(System.IAsyncResult result) {
            TransactionalNodeService.Service.MP retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndBMA(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBMACompleted(object state) {
            if ((this.BMACompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BMACompleted(this, new BMACompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BMAAsync(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, TransactionalNodeService.Service.MP node, TransactionalNodeService.Service.MP relationship, TransactionalNodeService.Service.DT descriptorType, TransactionalNodeService.Service.MetadataType metadataType, string name, string value) {
            this.BMAAsync(callingUrl, sessionId, responseParameter, domainId, rootMapId, node, relationship, descriptorType, metadataType, name, value, null);
        }
        
        public void BMAAsync(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, TransactionalNodeService.Service.MP node, TransactionalNodeService.Service.MP relationship, TransactionalNodeService.Service.DT descriptorType, TransactionalNodeService.Service.MetadataType metadataType, string name, string value, object userState) {
            if ((this.onBeginBMADelegate == null)) {
                this.onBeginBMADelegate = new BeginOperationDelegate(this.OnBeginBMA);
            }
            if ((this.onEndBMADelegate == null)) {
                this.onEndBMADelegate = new EndOperationDelegate(this.OnEndBMA);
            }
            if ((this.onBMACompletedDelegate == null)) {
                this.onBMACompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBMACompleted);
            }
            base.InvokeAsync(this.onBeginBMADelegate, new object[] {
                        callingUrl,
                        sessionId,
                        responseParameter,
                        domainId,
                        rootMapId,
                        node,
                        relationship,
                        descriptorType,
                        metadataType,
                        name,
                        value}, this.onEndBMADelegate, this.onBMACompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginMD(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP metadata, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMD(callingUrl, sessionId, domainId, metadata, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.MP TransactionalNodeService.Service.ITransactionalMappingToolService.EndMD(System.IAsyncResult result) {
            return base.Channel.EndMD(result);
        }
        
        private System.IAsyncResult OnBeginMD(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid sessionId = ((System.Guid)(inValues[1]));
            TransactionalNodeService.Service.MP domainId = ((TransactionalNodeService.Service.MP)(inValues[2]));
            TransactionalNodeService.Service.MP metadata = ((TransactionalNodeService.Service.MP)(inValues[3]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginMD(callingUrl, sessionId, domainId, metadata, callback, asyncState);
        }
        
        private object[] OnEndMD(System.IAsyncResult result) {
            TransactionalNodeService.Service.MP retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndMD(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMDCompleted(object state) {
            if ((this.MDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MDCompleted(this, new MDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MDAsync(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP metadata) {
            this.MDAsync(callingUrl, sessionId, domainId, metadata, null);
        }
        
        public void MDAsync(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP metadata, object userState) {
            if ((this.onBeginMDDelegate == null)) {
                this.onBeginMDDelegate = new BeginOperationDelegate(this.OnBeginMD);
            }
            if ((this.onEndMDDelegate == null)) {
                this.onEndMDDelegate = new EndOperationDelegate(this.OnEndMD);
            }
            if ((this.onMDCompletedDelegate == null)) {
                this.onMDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMDCompleted);
            }
            base.InvokeAsync(this.onBeginMDDelegate, new object[] {
                        callingUrl,
                        sessionId,
                        domainId,
                        metadata}, this.onEndMDDelegate, this.onMDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginBMD(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP metadata, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBMD(callingUrl, sessionId, responseParameter, domainId, metadata, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.MP TransactionalNodeService.Service.ITransactionalMappingToolService.EndBMD(System.IAsyncResult result) {
            return base.Channel.EndBMD(result);
        }
        
        private System.IAsyncResult OnBeginBMD(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid sessionId = ((System.Guid)(inValues[1]));
            System.Guid responseParameter = ((System.Guid)(inValues[2]));
            TransactionalNodeService.Service.MP domainId = ((TransactionalNodeService.Service.MP)(inValues[3]));
            TransactionalNodeService.Service.MP metadata = ((TransactionalNodeService.Service.MP)(inValues[4]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginBMD(callingUrl, sessionId, responseParameter, domainId, metadata, callback, asyncState);
        }
        
        private object[] OnEndBMD(System.IAsyncResult result) {
            TransactionalNodeService.Service.MP retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndBMD(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBMDCompleted(object state) {
            if ((this.BMDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BMDCompleted(this, new BMDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BMDAsync(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP metadata) {
            this.BMDAsync(callingUrl, sessionId, responseParameter, domainId, metadata, null);
        }
        
        public void BMDAsync(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP metadata, object userState) {
            if ((this.onBeginBMDDelegate == null)) {
                this.onBeginBMDDelegate = new BeginOperationDelegate(this.OnBeginBMD);
            }
            if ((this.onEndBMDDelegate == null)) {
                this.onEndBMDDelegate = new EndOperationDelegate(this.OnEndBMD);
            }
            if ((this.onBMDCompletedDelegate == null)) {
                this.onBMDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBMDCompleted);
            }
            base.InvokeAsync(this.onBeginBMDDelegate, new object[] {
                        callingUrl,
                        sessionId,
                        responseParameter,
                        domainId,
                        metadata}, this.onEndBMDDelegate, this.onBMDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginMU(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP metadata, string name, string value, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMU(callingUrl, sessionId, domainId, metadata, name, value, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.MP TransactionalNodeService.Service.ITransactionalMappingToolService.EndMU(System.IAsyncResult result) {
            return base.Channel.EndMU(result);
        }
        
        private System.IAsyncResult OnBeginMU(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid sessionId = ((System.Guid)(inValues[1]));
            TransactionalNodeService.Service.MP domainId = ((TransactionalNodeService.Service.MP)(inValues[2]));
            TransactionalNodeService.Service.MP metadata = ((TransactionalNodeService.Service.MP)(inValues[3]));
            string name = ((string)(inValues[4]));
            string value = ((string)(inValues[5]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginMU(callingUrl, sessionId, domainId, metadata, name, value, callback, asyncState);
        }
        
        private object[] OnEndMU(System.IAsyncResult result) {
            TransactionalNodeService.Service.MP retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndMU(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMUCompleted(object state) {
            if ((this.MUCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MUCompleted(this, new MUCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MUAsync(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP metadata, string name, string value) {
            this.MUAsync(callingUrl, sessionId, domainId, metadata, name, value, null);
        }
        
        public void MUAsync(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP metadata, string name, string value, object userState) {
            if ((this.onBeginMUDelegate == null)) {
                this.onBeginMUDelegate = new BeginOperationDelegate(this.OnBeginMU);
            }
            if ((this.onEndMUDelegate == null)) {
                this.onEndMUDelegate = new EndOperationDelegate(this.OnEndMU);
            }
            if ((this.onMUCompletedDelegate == null)) {
                this.onMUCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMUCompleted);
            }
            base.InvokeAsync(this.onBeginMUDelegate, new object[] {
                        callingUrl,
                        sessionId,
                        domainId,
                        metadata,
                        name,
                        value}, this.onEndMUDelegate, this.onMUCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginBMU(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP metadata, string name, string value, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBMU(callingUrl, sessionId, responseParameter, domainId, metadata, name, value, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TransactionalNodeService.Service.MP TransactionalNodeService.Service.ITransactionalMappingToolService.EndBMU(System.IAsyncResult result) {
            return base.Channel.EndBMU(result);
        }
        
        private System.IAsyncResult OnBeginBMU(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid sessionId = ((System.Guid)(inValues[1]));
            System.Guid responseParameter = ((System.Guid)(inValues[2]));
            TransactionalNodeService.Service.MP domainId = ((TransactionalNodeService.Service.MP)(inValues[3]));
            TransactionalNodeService.Service.MP metadata = ((TransactionalNodeService.Service.MP)(inValues[4]));
            string name = ((string)(inValues[5]));
            string value = ((string)(inValues[6]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginBMU(callingUrl, sessionId, responseParameter, domainId, metadata, name, value, callback, asyncState);
        }
        
        private object[] OnEndBMU(System.IAsyncResult result) {
            TransactionalNodeService.Service.MP retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndBMU(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBMUCompleted(object state) {
            if ((this.BMUCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BMUCompleted(this, new BMUCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BMUAsync(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP metadata, string name, string value) {
            this.BMUAsync(callingUrl, sessionId, responseParameter, domainId, metadata, name, value, null);
        }
        
        public void BMUAsync(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP metadata, string name, string value, object userState) {
            if ((this.onBeginBMUDelegate == null)) {
                this.onBeginBMUDelegate = new BeginOperationDelegate(this.OnBeginBMU);
            }
            if ((this.onEndBMUDelegate == null)) {
                this.onEndBMUDelegate = new EndOperationDelegate(this.OnEndBMU);
            }
            if ((this.onBMUCompletedDelegate == null)) {
                this.onBMUCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBMUCompleted);
            }
            base.InvokeAsync(this.onBeginBMUDelegate, new object[] {
                        callingUrl,
                        sessionId,
                        responseParameter,
                        domainId,
                        metadata,
                        name,
                        value}, this.onEndBMUDelegate, this.onBMUCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginBO(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.OPS operations, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBO(callingUrl, sessionId, operations, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.BOR> TransactionalNodeService.Service.ITransactionalMappingToolService.EndBO(System.IAsyncResult result) {
            return base.Channel.EndBO(result);
        }
        
        private System.IAsyncResult OnBeginBO(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid sessionId = ((System.Guid)(inValues[1]));
            TransactionalNodeService.Service.OPS operations = ((TransactionalNodeService.Service.OPS)(inValues[2]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginBO(callingUrl, sessionId, operations, callback, asyncState);
        }
        
        private object[] OnEndBO(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.BOR> retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndBO(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBOCompleted(object state) {
            if ((this.BOCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BOCompleted(this, new BOCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BOAsync(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.OPS operations) {
            this.BOAsync(callingUrl, sessionId, operations, null);
        }
        
        public void BOAsync(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.OPS operations, object userState) {
            if ((this.onBeginBODelegate == null)) {
                this.onBeginBODelegate = new BeginOperationDelegate(this.OnBeginBO);
            }
            if ((this.onEndBODelegate == null)) {
                this.onEndBODelegate = new EndOperationDelegate(this.OnEndBO);
            }
            if ((this.onBOCompletedDelegate == null)) {
                this.onBOCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBOCompleted);
            }
            base.InvokeAsync(this.onBeginBODelegate, new object[] {
                        callingUrl,
                        sessionId,
                        operations}, this.onEndBODelegate, this.onBOCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginBOC(string callingUrl, System.Guid sessionId, string compressedOperations, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBOC(callingUrl, sessionId, compressedOperations, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string TransactionalNodeService.Service.ITransactionalMappingToolService.EndBOC(System.IAsyncResult result) {
            return base.Channel.EndBOC(result);
        }
        
        private System.IAsyncResult OnBeginBOC(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid sessionId = ((System.Guid)(inValues[1]));
            string compressedOperations = ((string)(inValues[2]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginBOC(callingUrl, sessionId, compressedOperations, callback, asyncState);
        }
        
        private object[] OnEndBOC(System.IAsyncResult result) {
            string retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndBOC(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBOCCompleted(object state) {
            if ((this.BOCCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BOCCompleted(this, new BOCCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BOCAsync(string callingUrl, System.Guid sessionId, string compressedOperations) {
            this.BOCAsync(callingUrl, sessionId, compressedOperations, null);
        }
        
        public void BOCAsync(string callingUrl, System.Guid sessionId, string compressedOperations, object userState) {
            if ((this.onBeginBOCDelegate == null)) {
                this.onBeginBOCDelegate = new BeginOperationDelegate(this.OnBeginBOC);
            }
            if ((this.onEndBOCDelegate == null)) {
                this.onEndBOCDelegate = new EndOperationDelegate(this.OnEndBOC);
            }
            if ((this.onBOCCompletedDelegate == null)) {
                this.onBOCCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBOCCompleted);
            }
            base.InvokeAsync(this.onBeginBOCDelegate, new object[] {
                        callingUrl,
                        sessionId,
                        compressedOperations}, this.onEndBOCDelegate, this.onBOCCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TransactionalNodeService.Service.ITransactionalMappingToolService.BeginIsSessionCompleted(string callingUrl, System.Guid sessionId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsSessionCompleted(callingUrl, sessionId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool TransactionalNodeService.Service.ITransactionalMappingToolService.EndIsSessionCompleted(System.IAsyncResult result) {
            return base.Channel.EndIsSessionCompleted(result);
        }
        
        private System.IAsyncResult OnBeginIsSessionCompleted(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string callingUrl = ((string)(inValues[0]));
            System.Guid sessionId = ((System.Guid)(inValues[1]));
            return ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).BeginIsSessionCompleted(callingUrl, sessionId, callback, asyncState);
        }
        
        private object[] OnEndIsSessionCompleted(System.IAsyncResult result) {
            bool retVal = ((TransactionalNodeService.Service.ITransactionalMappingToolService)(this)).EndIsSessionCompleted(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsSessionCompletedCompleted(object state) {
            if ((this.IsSessionCompletedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsSessionCompletedCompleted(this, new IsSessionCompletedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsSessionCompletedAsync(string callingUrl, System.Guid sessionId) {
            this.IsSessionCompletedAsync(callingUrl, sessionId, null);
        }
        
        public void IsSessionCompletedAsync(string callingUrl, System.Guid sessionId, object userState) {
            if ((this.onBeginIsSessionCompletedDelegate == null)) {
                this.onBeginIsSessionCompletedDelegate = new BeginOperationDelegate(this.OnBeginIsSessionCompleted);
            }
            if ((this.onEndIsSessionCompletedDelegate == null)) {
                this.onEndIsSessionCompletedDelegate = new EndOperationDelegate(this.OnEndIsSessionCompleted);
            }
            if ((this.onIsSessionCompletedCompletedDelegate == null)) {
                this.onIsSessionCompletedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsSessionCompletedCompleted);
            }
            base.InvokeAsync(this.onBeginIsSessionCompletedDelegate, new object[] {
                        callingUrl,
                        sessionId}, this.onEndIsSessionCompletedDelegate, this.onIsSessionCompletedCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override TransactionalNodeService.Service.ITransactionalMappingToolService CreateChannel() {
            return new TransactionalMappingToolServiceClientChannel(this);
        }
        
        private class TransactionalMappingToolServiceClientChannel : ChannelBase<TransactionalNodeService.Service.ITransactionalMappingToolService>, TransactionalNodeService.Service.ITransactionalMappingToolService {
            
            public TransactionalMappingToolServiceClientChannel(System.ServiceModel.ClientBase<TransactionalNodeService.Service.ITransactionalMappingToolService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetApplicationVersion(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetApplicationVersion", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.GlymaVersion EndGetApplicationVersion(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.GlymaVersion _result = ((TransactionalNodeService.Service.GlymaVersion)(base.EndInvoke("GetApplicationVersion", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateDomain(string callingUrl, string name, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = callingUrl;
                _args[1] = name;
                System.IAsyncResult _result = base.BeginInvoke("CreateDomain", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.RS EndCreateDomain(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.RS _result = ((TransactionalNodeService.Service.RS)(base.EndInvoke("CreateDomain", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateRootMap(string callingUrl, System.Guid domainId, string name, TransactionalNodeService.Service.NT nodeType, string originalId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = callingUrl;
                _args[1] = domainId;
                _args[2] = name;
                _args[3] = nodeType;
                _args[4] = originalId;
                System.IAsyncResult _result = base.BeginInvoke("CreateRootMap", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.QueryResponse EndCreateRootMap(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.QueryResponse _result = ((TransactionalNodeService.Service.QueryResponse)(base.EndInvoke("CreateRootMap", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteDomain(string callingUrl, System.Guid domainId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = callingUrl;
                _args[1] = domainId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteDomain", _args, callback, asyncState);
                return _result;
            }
            
            public int EndDeleteDomain(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("DeleteDomain", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteRootMap(string callingUrl, System.Guid domainId, System.Guid rootMapId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = callingUrl;
                _args[1] = domainId;
                _args[2] = rootMapId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteRootMap", _args, callback, asyncState);
                return _result;
            }
            
            public int EndDeleteRootMap(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("DeleteRootMap", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBeginTransaction(string callingUrl, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = callingUrl;
                System.IAsyncResult _result = base.BeginInvoke("BeginTransaction", _args, callback, asyncState);
                return _result;
            }
            
            public System.Guid EndBeginTransaction(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Guid _result = ((System.Guid)(base.EndInvoke("BeginTransaction", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCompleteTransaction(string callingUrl, System.Guid sessionId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = callingUrl;
                _args[1] = sessionId;
                System.IAsyncResult _result = base.BeginInvoke("CompleteTransaction", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.RS EndCompleteTransaction(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.RS _result = ((TransactionalNodeService.Service.RS)(base.EndInvoke("CompleteTransaction", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllMapTypes(string callingUrl, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = callingUrl;
                System.IAsyncResult _result = base.BeginInvoke("GetAllMapTypes", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.TypeResponse EndGetAllMapTypes(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.TypeResponse _result = ((TransactionalNodeService.Service.TypeResponse)(base.EndInvoke("GetAllMapTypes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginQueryDomains(string callingUrl, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = callingUrl;
                System.IAsyncResult _result = base.BeginInvoke("QueryDomains", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.QueryResponse> EndQueryDomains(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.QueryResponse> _result = ((System.Collections.Generic.Dictionary<System.Guid, TransactionalNodeService.Service.QueryResponse>)(base.EndInvoke("QueryDomains", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginQueryMap(string callingUrl, System.Guid domainId, System.Guid nodeId, int maxDepth, TransactionalNodeService.Service.EdgeConditions edgeConditions, TransactionalNodeService.Service.FilterConditions filterConditions, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = callingUrl;
                _args[1] = domainId;
                _args[2] = nodeId;
                _args[3] = maxDepth;
                _args[4] = edgeConditions;
                _args[5] = filterConditions;
                System.IAsyncResult _result = base.BeginInvoke("QueryMap", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.QueryResponse EndQueryMap(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.QueryResponse _result = ((TransactionalNodeService.Service.QueryResponse)(base.EndInvoke("QueryMap", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginQueryMapPaged(string callingUrl, System.Guid domainId, System.Guid nodeId, int maxDepth, TransactionalNodeService.Service.EdgeConditions edgeConditions, TransactionalNodeService.Service.FilterConditions filterConditions, int objectIndex, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = callingUrl;
                _args[1] = domainId;
                _args[2] = nodeId;
                _args[3] = maxDepth;
                _args[4] = edgeConditions;
                _args[5] = filterConditions;
                _args[6] = objectIndex;
                System.IAsyncResult _result = base.BeginInvoke("QueryMapPaged", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.QueryResponse EndQueryMapPaged(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.QueryResponse _result = ((TransactionalNodeService.Service.QueryResponse)(base.EndInvoke("QueryMapPaged", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginQueryMapByDomain(string callingUrl, System.Guid domainId, int maxDepth, TransactionalNodeService.Service.EdgeConditions edgeConditions, TransactionalNodeService.Service.FilterConditions filterConditions, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = callingUrl;
                _args[1] = domainId;
                _args[2] = maxDepth;
                _args[3] = edgeConditions;
                _args[4] = filterConditions;
                System.IAsyncResult _result = base.BeginInvoke("QueryMapByDomain", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.QueryResponse EndQueryMapByDomain(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.QueryResponse _result = ((TransactionalNodeService.Service.QueryResponse)(base.EndInvoke("QueryMapByDomain", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSearchMap(string callingUrl, System.Guid domainId, System.Guid rootMapUid, TransactionalNodeService.Service.SearchConditions conditions, int pageNumber, int pageSize, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = callingUrl;
                _args[1] = domainId;
                _args[2] = rootMapUid;
                _args[3] = conditions;
                _args[4] = pageNumber;
                _args[5] = pageSize;
                System.IAsyncResult _result = base.BeginInvoke("SearchMap", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.SearchMapResult EndSearchMap(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.SearchMapResult _result = ((TransactionalNodeService.Service.SearchMapResult)(base.EndInvoke("SearchMap", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginNA(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, TransactionalNodeService.Service.NT nodeType, string originalId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = callingUrl;
                _args[1] = sessionId;
                _args[2] = domainId;
                _args[3] = rootMapId;
                _args[4] = nodeType;
                _args[5] = originalId;
                System.IAsyncResult _result = base.BeginInvoke("NA", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.MP EndNA(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.MP _result = ((TransactionalNodeService.Service.MP)(base.EndInvoke("NA", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBNA(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, TransactionalNodeService.Service.NT nodeType, string originalId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = callingUrl;
                _args[1] = sessionId;
                _args[2] = responseParameter;
                _args[3] = domainId;
                _args[4] = rootMapId;
                _args[5] = nodeType;
                _args[6] = originalId;
                System.IAsyncResult _result = base.BeginInvoke("BNA", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.MP EndBNA(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.MP _result = ((TransactionalNodeService.Service.MP)(base.EndInvoke("BNA", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginND(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP nodeId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = callingUrl;
                _args[1] = sessionId;
                _args[2] = domainId;
                _args[3] = nodeId;
                System.IAsyncResult _result = base.BeginInvoke("ND", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.MP EndND(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.MP _result = ((TransactionalNodeService.Service.MP)(base.EndInvoke("ND", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBND(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP nodeId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = callingUrl;
                _args[1] = sessionId;
                _args[2] = responseParameter;
                _args[3] = domainId;
                _args[4] = nodeId;
                System.IAsyncResult _result = base.BeginInvoke("BND", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.MP EndBND(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.MP _result = ((TransactionalNodeService.Service.MP)(base.EndInvoke("BND", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginNU(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP nodeId, TransactionalNodeService.Service.NT nodeType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = callingUrl;
                _args[1] = sessionId;
                _args[2] = domainId;
                _args[3] = nodeId;
                _args[4] = nodeType;
                System.IAsyncResult _result = base.BeginInvoke("NU", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.MP EndNU(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.MP _result = ((TransactionalNodeService.Service.MP)(base.EndInvoke("NU", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBNU(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP nodeId, TransactionalNodeService.Service.NT nodeType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = callingUrl;
                _args[1] = sessionId;
                _args[2] = responseParameter;
                _args[3] = domainId;
                _args[4] = nodeId;
                _args[5] = nodeType;
                System.IAsyncResult _result = base.BeginInvoke("BNU", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.MP EndBNU(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.MP _result = ((TransactionalNodeService.Service.MP)(base.EndInvoke("BNU", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRA(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> nodes, TransactionalNodeService.Service.RT relationshipType, string originalId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = callingUrl;
                _args[1] = sessionId;
                _args[2] = domainId;
                _args[3] = rootMapId;
                _args[4] = nodes;
                _args[5] = relationshipType;
                _args[6] = originalId;
                System.IAsyncResult _result = base.BeginInvoke("RA", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.MP EndRA(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.MP _result = ((TransactionalNodeService.Service.MP)(base.EndInvoke("RA", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBRA(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> nodes, TransactionalNodeService.Service.RT relationshipType, string originalId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[8];
                _args[0] = callingUrl;
                _args[1] = sessionId;
                _args[2] = responseParameter;
                _args[3] = domainId;
                _args[4] = rootMapId;
                _args[5] = nodes;
                _args[6] = relationshipType;
                _args[7] = originalId;
                System.IAsyncResult _result = base.BeginInvoke("BRA", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.MP EndBRA(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.MP _result = ((TransactionalNodeService.Service.MP)(base.EndInvoke("BRA", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRD(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP relationshipId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = callingUrl;
                _args[1] = sessionId;
                _args[2] = domainId;
                _args[3] = relationshipId;
                System.IAsyncResult _result = base.BeginInvoke("RD", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.MP EndRD(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.MP _result = ((TransactionalNodeService.Service.MP)(base.EndInvoke("RD", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBRD(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP relationshipId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = callingUrl;
                _args[1] = sessionId;
                _args[2] = responseParameter;
                _args[3] = domainId;
                _args[4] = relationshipId;
                System.IAsyncResult _result = base.BeginInvoke("BRD", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.MP EndBRD(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.MP _result = ((TransactionalNodeService.Service.MP)(base.EndInvoke("BRD", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRU(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP relationshipId, System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> nodes, TransactionalNodeService.Service.RT relationshipType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = callingUrl;
                _args[1] = sessionId;
                _args[2] = domainId;
                _args[3] = relationshipId;
                _args[4] = nodes;
                _args[5] = relationshipType;
                System.IAsyncResult _result = base.BeginInvoke("RU", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.MP EndRU(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.MP _result = ((TransactionalNodeService.Service.MP)(base.EndInvoke("RU", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBRU(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP relationshipId, System.Collections.Generic.Dictionary<TransactionalNodeService.Service.DT, TransactionalNodeService.Service.MP> nodes, TransactionalNodeService.Service.RT relationshipType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = callingUrl;
                _args[1] = sessionId;
                _args[2] = responseParameter;
                _args[3] = domainId;
                _args[4] = relationshipId;
                _args[5] = nodes;
                _args[6] = relationshipType;
                System.IAsyncResult _result = base.BeginInvoke("BRU", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.MP EndBRU(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.MP _result = ((TransactionalNodeService.Service.MP)(base.EndInvoke("BRU", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMA(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, TransactionalNodeService.Service.MP node, TransactionalNodeService.Service.MP relationship, TransactionalNodeService.Service.DT descriptorType, TransactionalNodeService.Service.MetadataType metadataType, string name, string value, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[10];
                _args[0] = callingUrl;
                _args[1] = sessionId;
                _args[2] = domainId;
                _args[3] = rootMapId;
                _args[4] = node;
                _args[5] = relationship;
                _args[6] = descriptorType;
                _args[7] = metadataType;
                _args[8] = name;
                _args[9] = value;
                System.IAsyncResult _result = base.BeginInvoke("MA", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.MP EndMA(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.MP _result = ((TransactionalNodeService.Service.MP)(base.EndInvoke("MA", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBMA(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP rootMapId, TransactionalNodeService.Service.MP node, TransactionalNodeService.Service.MP relationship, TransactionalNodeService.Service.DT descriptorType, TransactionalNodeService.Service.MetadataType metadataType, string name, string value, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[11];
                _args[0] = callingUrl;
                _args[1] = sessionId;
                _args[2] = responseParameter;
                _args[3] = domainId;
                _args[4] = rootMapId;
                _args[5] = node;
                _args[6] = relationship;
                _args[7] = descriptorType;
                _args[8] = metadataType;
                _args[9] = name;
                _args[10] = value;
                System.IAsyncResult _result = base.BeginInvoke("BMA", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.MP EndBMA(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.MP _result = ((TransactionalNodeService.Service.MP)(base.EndInvoke("BMA", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMD(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP metadata, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = callingUrl;
                _args[1] = sessionId;
                _args[2] = domainId;
                _args[3] = metadata;
                System.IAsyncResult _result = base.BeginInvoke("MD", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.MP EndMD(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.MP _result = ((TransactionalNodeService.Service.MP)(base.EndInvoke("MD", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBMD(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP metadata, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = callingUrl;
                _args[1] = sessionId;
                _args[2] = responseParameter;
                _args[3] = domainId;
                _args[4] = metadata;
                System.IAsyncResult _result = base.BeginInvoke("BMD", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.MP EndBMD(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.MP _result = ((TransactionalNodeService.Service.MP)(base.EndInvoke("BMD", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMU(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP metadata, string name, string value, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = callingUrl;
                _args[1] = sessionId;
                _args[2] = domainId;
                _args[3] = metadata;
                _args[4] = name;
                _args[5] = value;
                System.IAsyncResult _result = base.BeginInvoke("MU", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.MP EndMU(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.MP _result = ((TransactionalNodeService.Service.MP)(base.EndInvoke("MU", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBMU(string callingUrl, System.Guid sessionId, System.Guid responseParameter, TransactionalNodeService.Service.MP domainId, TransactionalNodeService.Service.MP metadata, string name, string value, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = callingUrl;
                _args[1] = sessionId;
                _args[2] = responseParameter;
                _args[3] = domainId;
                _args[4] = metadata;
                _args[5] = name;
                _args[6] = value;
                System.IAsyncResult _result = base.BeginInvoke("BMU", _args, callback, asyncState);
                return _result;
            }
            
            public TransactionalNodeService.Service.MP EndBMU(System.IAsyncResult result) {
                object[] _args = new object[0];
                TransactionalNodeService.Service.MP _result = ((TransactionalNodeService.Service.MP)(base.EndInvoke("BMU", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBO(string callingUrl, System.Guid sessionId, TransactionalNodeService.Service.OPS operations, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = callingUrl;
                _args[1] = sessionId;
                _args[2] = operations;
                System.IAsyncResult _result = base.BeginInvoke("BO", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.BOR> EndBO(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.BOR> _result = ((System.Collections.ObjectModel.ObservableCollection<TransactionalNodeService.Service.BOR>)(base.EndInvoke("BO", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBOC(string callingUrl, System.Guid sessionId, string compressedOperations, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = callingUrl;
                _args[1] = sessionId;
                _args[2] = compressedOperations;
                System.IAsyncResult _result = base.BeginInvoke("BOC", _args, callback, asyncState);
                return _result;
            }
            
            public string EndBOC(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("BOC", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsSessionCompleted(string callingUrl, System.Guid sessionId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = callingUrl;
                _args[1] = sessionId;
                System.IAsyncResult _result = base.BeginInvoke("IsSessionCompleted", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndIsSessionCompleted(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("IsSessionCompleted", _args, result)));
                return _result;
            }
        }
    }
}
