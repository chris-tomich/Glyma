using System;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Shapes;
using System.Collections.Generic;
using TransactionalNodeService.Service;
using Proxy = TransactionalNodeService.Proxy;
using TransactionFramework = TransactionalNodeService.Soap.TransactionFramework;

namespace SilverlightMappingToolBasic.UI.SuperGraph.Controller.Operations
{
    public class BatchConnectTranscludedNodesOperation : ISuperGraphOperation
    {
        private Queue<ConnectTranscludedNodesOperation> _operations;
        private TransactionFramework.InProcessTransactionResponse _response;

        public BatchConnectTranscludedNodesOperation()
        {
        }

        private Queue<ConnectTranscludedNodesOperation> Operations
        {
            get
            {
                if (_operations == null)
                {
                    _operations = new Queue<ConnectTranscludedNodesOperation>();
                }

                return _operations;
            }
        }

        public TransactionFramework.InProcessTransactionResponse Response
        {
            get { return _response; }
            set { _response = value; }
        }

        public Proxy.IMapManager MapManager
        {
            get;
            set;
        }

        public void AddConnectTranscludedNodesOperation(ConnectTranscludedNodesOperation operation)
        {
            Operations.Enqueue(operation);
        }

<<<<<<< HEAD
        public event EventHandler<NodeOperationCompletedArgs> OperationCompleted;

        public void ExecuteOperation()
=======
        public TransactionFramework.InProcessTransactionResponse ExecuteOperation()
>>>>>>> master
        {
            _response = new TransactionFramework.InProcessTransactionResponse();

            TransactionFramework.TransactionChain chain = new TransactionFramework.TransactionChain();
            chain.TransactionCompleted += ChainOnTransactionCompleted;
            while (Operations.Count > 0)
            {
                ConnectTranscludedNodesOperation operation = Operations.Dequeue();

                TransactionFramework.InProcessTransactionResponse newResponse = operation.OperationBuilder.BuildTransactionChain(ref chain);

                _response.Add(newResponse);
            }

            MapManager.ExecuteTransaction(chain);
        }

        private void ChainOnTransactionCompleted(object sender, CompleteTransactionCompletedEventArgs completeTransactionCompletedEventArgs)
        {
            if (OperationCompleted != null)
            {
                OperationCompleted(sender, new NodeOperationCompletedArgs{Response = _response});
            }
        }
    }
}
