//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace SilverlightMappingToolBasic.MappingService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SoapNode", Namespace="http://schemas.datacontract.org/2004/07/NodeService")]
    public partial class SoapNode : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Guid DomainField;
        
        private System.Guid IdField;
        
        private System.Collections.Generic.Dictionary<SilverlightMappingToolBasic.MappingService.MetadataContext, SilverlightMappingToolBasic.MappingService.SoapMetadata> MetadataField;
        
        private SilverlightMappingToolBasic.MappingService.SoapNodeType NodeTypeField;
        
        private System.Collections.Generic.Dictionary<System.Guid, SilverlightMappingToolBasic.MappingService.SoapRelationship> RelationshipsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Domain {
            get {
                return this.DomainField;
            }
            set {
                if ((this.DomainField.Equals(value) != true)) {
                    this.DomainField = value;
                    this.RaisePropertyChanged("Domain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<SilverlightMappingToolBasic.MappingService.MetadataContext, SilverlightMappingToolBasic.MappingService.SoapMetadata> Metadata {
            get {
                return this.MetadataField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataField, value) != true)) {
                    this.MetadataField = value;
                    this.RaisePropertyChanged("Metadata");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SilverlightMappingToolBasic.MappingService.SoapNodeType NodeType {
            get {
                return this.NodeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeTypeField, value) != true)) {
                    this.NodeTypeField = value;
                    this.RaisePropertyChanged("NodeType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<System.Guid, SilverlightMappingToolBasic.MappingService.SoapRelationship> Relationships {
            get {
                return this.RelationshipsField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationshipsField, value) != true)) {
                    this.RelationshipsField = value;
                    this.RaisePropertyChanged("Relationships");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SoapNodeType", Namespace="http://schemas.datacontract.org/2004/07/NodeService")]
    public partial class SoapNodeType : SilverlightMappingToolBasic.MappingService.SoapTypeElement {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MetadataContext", Namespace="http://schemas.datacontract.org/2004/07/NodeService")]
    public partial class MetadataContext : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<System.Guid> DescriptorTypeUidField;
        
        private string MetadataNameField;
        
        private System.Nullable<System.Guid> NodeUidField;
        
        private System.Nullable<System.Guid> RelationshipUidField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> DescriptorTypeUid {
            get {
                return this.DescriptorTypeUidField;
            }
            set {
                if ((this.DescriptorTypeUidField.Equals(value) != true)) {
                    this.DescriptorTypeUidField = value;
                    this.RaisePropertyChanged("DescriptorTypeUid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MetadataName {
            get {
                return this.MetadataNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataNameField, value) != true)) {
                    this.MetadataNameField = value;
                    this.RaisePropertyChanged("MetadataName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> NodeUid {
            get {
                return this.NodeUidField;
            }
            set {
                if ((this.NodeUidField.Equals(value) != true)) {
                    this.NodeUidField = value;
                    this.RaisePropertyChanged("NodeUid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> RelationshipUid {
            get {
                return this.RelationshipUidField;
            }
            set {
                if ((this.RelationshipUidField.Equals(value) != true)) {
                    this.RelationshipUidField = value;
                    this.RaisePropertyChanged("RelationshipUid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SoapMetadata", Namespace="http://schemas.datacontract.org/2004/07/NodeService")]
    public partial class SoapMetadata : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string MetadataNameField;
        
        private SilverlightMappingToolBasic.MappingService.SoapMetadataType MetadataTypeField;
        
        private string MetadataValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MetadataName {
            get {
                return this.MetadataNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataNameField, value) != true)) {
                    this.MetadataNameField = value;
                    this.RaisePropertyChanged("MetadataName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SilverlightMappingToolBasic.MappingService.SoapMetadataType MetadataType {
            get {
                return this.MetadataTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataTypeField, value) != true)) {
                    this.MetadataTypeField = value;
                    this.RaisePropertyChanged("MetadataType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MetadataValue {
            get {
                return this.MetadataValueField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataValueField, value) != true)) {
                    this.MetadataValueField = value;
                    this.RaisePropertyChanged("MetadataValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SoapRelationship", Namespace="http://schemas.datacontract.org/2004/07/NodeService")]
    public partial class SoapRelationship : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Guid IdField;
        
        private System.Collections.Generic.Dictionary<string, SilverlightMappingToolBasic.MappingService.SoapMetadata> MetadataField;
        
        private System.Collections.Generic.Dictionary<SilverlightMappingToolBasic.MappingService.SoapDescriptorType, System.Guid> NodesField;
        
        private SilverlightMappingToolBasic.MappingService.SoapRelationshipType RelationshipTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, SilverlightMappingToolBasic.MappingService.SoapMetadata> Metadata {
            get {
                return this.MetadataField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataField, value) != true)) {
                    this.MetadataField = value;
                    this.RaisePropertyChanged("Metadata");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<SilverlightMappingToolBasic.MappingService.SoapDescriptorType, System.Guid> Nodes {
            get {
                return this.NodesField;
            }
            set {
                if ((object.ReferenceEquals(this.NodesField, value) != true)) {
                    this.NodesField = value;
                    this.RaisePropertyChanged("Nodes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SilverlightMappingToolBasic.MappingService.SoapRelationshipType RelationshipType {
            get {
                return this.RelationshipTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationshipTypeField, value) != true)) {
                    this.RelationshipTypeField = value;
                    this.RaisePropertyChanged("RelationshipType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SoapMetadataType", Namespace="http://schemas.datacontract.org/2004/07/NodeService")]
    public partial class SoapMetadataType : SilverlightMappingToolBasic.MappingService.SoapTypeElement {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SoapTypeElement", Namespace="http://schemas.datacontract.org/2004/07/NodeService")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SilverlightMappingToolBasic.MappingService.SoapRelationshipType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SilverlightMappingToolBasic.MappingService.SoapNodeType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SilverlightMappingToolBasic.MappingService.SoapDescriptorType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SilverlightMappingToolBasic.MappingService.SoapMetadataType))]
    public partial class SoapTypeElement : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Guid IdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SoapRelationshipType", Namespace="http://schemas.datacontract.org/2004/07/NodeService")]
    public partial class SoapRelationshipType : SilverlightMappingToolBasic.MappingService.SoapTypeElement {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SoapDescriptorType", Namespace="http://schemas.datacontract.org/2004/07/NodeService")]
    public partial class SoapDescriptorType : SilverlightMappingToolBasic.MappingService.SoapTypeElement {
        
        private System.Collections.Generic.Dictionary<string, SilverlightMappingToolBasic.MappingService.SoapMetadata> MetadataField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, SilverlightMappingToolBasic.MappingService.SoapMetadata> Metadata {
            get {
                return this.MetadataField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataField, value) != true)) {
                    this.MetadataField = value;
                    this.RaisePropertyChanged("Metadata");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeleteResult", Namespace="http://schemas.datacontract.org/2004/07/NodeService")]
    public partial class DeleteResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool DeleteSuccessfulField;
        
        private System.Guid DeletedIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DeleteSuccessful {
            get {
                return this.DeleteSuccessfulField;
            }
            set {
                if ((this.DeleteSuccessfulField.Equals(value) != true)) {
                    this.DeleteSuccessfulField = value;
                    this.RaisePropertyChanged("DeleteSuccessful");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid DeletedId {
            get {
                return this.DeletedIdField;
            }
            set {
                if ((this.DeletedIdField.Equals(value) != true)) {
                    this.DeletedIdField = value;
                    this.RaisePropertyChanged("DeletedId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectedNodesResult", Namespace="http://schemas.datacontract.org/2004/07/NodeService")]
    public partial class ConnectedNodesResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.Dictionary<System.Guid, SilverlightMappingToolBasic.MappingService.SoapNode> NodesField;
        
        private SilverlightMappingToolBasic.MappingService.SoapRelationship RelationshipField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<System.Guid, SilverlightMappingToolBasic.MappingService.SoapNode> Nodes {
            get {
                return this.NodesField;
            }
            set {
                if ((object.ReferenceEquals(this.NodesField, value) != true)) {
                    this.NodesField = value;
                    this.RaisePropertyChanged("Nodes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SilverlightMappingToolBasic.MappingService.SoapRelationship Relationship {
            get {
                return this.RelationshipField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationshipField, value) != true)) {
                    this.RelationshipField = value;
                    this.RaisePropertyChanged("Relationship");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectNodesFailureFault", Namespace="http://schemas.datacontract.org/2004/07/NodeService")]
    public partial class ConnectNodesFailureFault : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RelatedNodesSearchResult", Namespace="http://schemas.datacontract.org/2004/07/NodeService")]
    public partial class RelatedNodesSearchResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.Dictionary<System.Guid, SilverlightMappingToolBasic.MappingService.SoapNode> NodesField;
        
        private System.Guid SearchedNodeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<System.Guid, SilverlightMappingToolBasic.MappingService.SoapNode> Nodes {
            get {
                return this.NodesField;
            }
            set {
                if ((object.ReferenceEquals(this.NodesField, value) != true)) {
                    this.NodesField = value;
                    this.RaisePropertyChanged("Nodes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SearchedNode {
            get {
                return this.SearchedNodeField;
            }
            set {
                if ((this.SearchedNodeField.Equals(value) != true)) {
                    this.SearchedNodeField = value;
                    this.RaisePropertyChanged("SearchedNode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://sevensigma.com.au/NodeService", ConfigurationName="MappingService.IMappingToolService")]
    public interface IMappingToolService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/NodeService/IMappingToolService/CreateNewDomain", ReplyAction="http://sevensigma.com.au/NodeService/IMappingToolService/CreateNewDomainResponse")]
        System.IAsyncResult BeginCreateNewDomain(string domainName, System.AsyncCallback callback, object asyncState);
        
        SilverlightMappingToolBasic.MappingService.SoapNode EndCreateNewDomain(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/NodeService/IMappingToolService/CreateNewMap", ReplyAction="http://sevensigma.com.au/NodeService/IMappingToolService/CreateNewMapResponse")]
        System.IAsyncResult BeginCreateNewMap(System.Guid domainId, string mapName, System.AsyncCallback callback, object asyncState);
        
        System.Guid EndCreateNewMap(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/NodeService/IMappingToolService/InsertNodes", ReplyAction="http://sevensigma.com.au/NodeService/IMappingToolService/InsertNodesResponse")]
        System.IAsyncResult BeginInsertNodes(System.Guid domainId, System.Guid mapId, string siteUrl, byte[] userToken, System.Guid webId, System.Guid listId, int itemId, System.AsyncCallback callback, object asyncState);
        
        void EndInsertNodes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/NodeService/IMappingToolService/AddNode", ReplyAction="http://sevensigma.com.au/NodeService/IMappingToolService/AddNodeResponse")]
        System.IAsyncResult BeginAddNode(System.Guid domainId, SilverlightMappingToolBasic.MappingService.SoapNodeType nodeType, string originalId, System.AsyncCallback callback, object asyncState);
        
        SilverlightMappingToolBasic.MappingService.SoapNode EndAddNode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/NodeService/IMappingToolService/RenameNodeMetadata", ReplyAction="http://sevensigma.com.au/NodeService/IMappingToolService/RenameNodeMetadataRespon" +
            "se")]
        System.IAsyncResult BeginRenameNodeMetadata(System.Guid domainId, System.Guid soapNodeId, System.Guid soapRelationshipId, SilverlightMappingToolBasic.MappingService.SoapDescriptorType soapDescriptorType, string originalMetadataName, string newMetadataName, System.AsyncCallback callback, object asyncState);
        
        bool EndRenameNodeMetadata(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/NodeService/IMappingToolService/PasteNodeClone", ReplyAction="http://sevensigma.com.au/NodeService/IMappingToolService/PasteNodeCloneResponse")]
        System.IAsyncResult BeginPasteNodeClone(System.Guid domainId, System.Guid copiedNodeId, System.AsyncCallback callback, object asyncState);
        
        SilverlightMappingToolBasic.MappingService.SoapNode EndPasteNodeClone(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/NodeService/IMappingToolService/DeleteNode", ReplyAction="http://sevensigma.com.au/NodeService/IMappingToolService/DeleteNodeResponse")]
        System.IAsyncResult BeginDeleteNode(System.Guid domainId, System.Guid nodeId, System.AsyncCallback callback, object asyncState);
        
        SilverlightMappingToolBasic.MappingService.DeleteResult EndDeleteNode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/NodeService/IMappingToolService/DeleteNodePromoteTranscl" +
            "usion", ReplyAction="http://sevensigma.com.au/NodeService/IMappingToolService/DeleteNodePromoteTranscl" +
            "usionResponse")]
        System.IAsyncResult BeginDeleteNodePromoteTransclusion(System.Guid domainId, System.Guid mapIdToDeleteFrom, System.Guid nodeIdToDelete, System.AsyncCallback callback, object asyncState);
        
        SilverlightMappingToolBasic.MappingService.DeleteResult EndDeleteNodePromoteTransclusion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/NodeService/IMappingToolService/DeleteNodeTransclusion", ReplyAction="http://sevensigma.com.au/NodeService/IMappingToolService/DeleteNodeTransclusionRe" +
            "sponse")]
        System.IAsyncResult BeginDeleteNodeTransclusion(System.Guid domainId, System.Guid mapIdToDeleteFrom, System.Guid nodeIdToDelete, System.AsyncCallback callback, object asyncState);
        
        SilverlightMappingToolBasic.MappingService.DeleteResult EndDeleteNodeTransclusion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/NodeService/IMappingToolService/DeleteRelationship", ReplyAction="http://sevensigma.com.au/NodeService/IMappingToolService/DeleteRelationshipRespon" +
            "se")]
        System.IAsyncResult BeginDeleteRelationship(System.Guid domainId, System.Guid relationshipId, System.AsyncCallback callback, object asyncState);
        
        SilverlightMappingToolBasic.MappingService.DeleteResult EndDeleteRelationship(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/NodeService/IMappingToolService/DeleteMetadata", ReplyAction="http://sevensigma.com.au/NodeService/IMappingToolService/DeleteMetadataResponse")]
        System.IAsyncResult BeginDeleteMetadata(SilverlightMappingToolBasic.MappingService.MetadataContext key, System.AsyncCallback callback, object asyncState);
        
        SilverlightMappingToolBasic.MappingService.DeleteResult EndDeleteMetadata(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/NodeService/IMappingToolService/ConnectNodes", ReplyAction="http://sevensigma.com.au/NodeService/IMappingToolService/ConnectNodesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SilverlightMappingToolBasic.MappingService.ConnectNodesFailureFault), Action="http://sevensigma.com.au/NodeService/IMappingToolService/ConnectNodesConnectNodes" +
            "FailureFaultFault", Name="ConnectNodesFailureFault", Namespace="http://schemas.datacontract.org/2004/07/NodeService")]
        System.IAsyncResult BeginConnectNodes(System.Guid domainId, System.Collections.Generic.Dictionary<SilverlightMappingToolBasic.MappingService.SoapDescriptorType, System.Guid> nodes, SilverlightMappingToolBasic.MappingService.SoapRelationshipType relationshipType, string originalId, System.AsyncCallback callback, object asyncState);
        
        SilverlightMappingToolBasic.MappingService.ConnectedNodesResult EndConnectNodes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/NodeService/IMappingToolService/UpdateNodeMetadata", ReplyAction="http://sevensigma.com.au/NodeService/IMappingToolService/UpdateNodeMetadataRespon" +
            "se")]
        System.IAsyncResult BeginUpdateNodeMetadata(System.Guid domainId, System.Guid soapNodeId, System.Guid soapRelationshipId, SilverlightMappingToolBasic.MappingService.SoapDescriptorType soapDescriptorType, string metadataName, string metadataValue, SilverlightMappingToolBasic.MappingService.SoapMetadataType soapMetadataType, System.AsyncCallback callback, object asyncState);
        
        SilverlightMappingToolBasic.MappingService.SoapNode EndUpdateNodeMetadata(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/NodeService/IMappingToolService/GetDomainNodeIds", ReplyAction="http://sevensigma.com.au/NodeService/IMappingToolService/GetDomainNodeIdsResponse" +
            "")]
        System.IAsyncResult BeginGetDomainNodeIds(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<string, System.Guid> EndGetDomainNodeIds(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/NodeService/IMappingToolService/GetDomainNodeId", ReplyAction="http://sevensigma.com.au/NodeService/IMappingToolService/GetDomainNodeIdResponse")]
        System.IAsyncResult BeginGetDomainNodeId(System.Guid domainId, System.AsyncCallback callback, object asyncState);
        
        System.Guid EndGetDomainNodeId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/NodeService/IMappingToolService/GetDomainMapNodes", ReplyAction="http://sevensigma.com.au/NodeService/IMappingToolService/GetDomainMapNodesRespons" +
            "e")]
        System.IAsyncResult BeginGetDomainMapNodes(System.Guid domainId, System.AsyncCallback callback, object asyncState);
        
        SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult EndGetDomainMapNodes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/NodeService/IMappingToolService/GetDomainMapNodesPaged", ReplyAction="http://sevensigma.com.au/NodeService/IMappingToolService/GetDomainMapNodesPagedRe" +
            "sponse")]
        System.IAsyncResult BeginGetDomainMapNodesPaged(System.Guid domainId, int page, int pageSize, System.AsyncCallback callback, object asyncState);
        
        SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult EndGetDomainMapNodesPaged(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/NodeService/IMappingToolService/GetAllSoapTypes", ReplyAction="http://sevensigma.com.au/NodeService/IMappingToolService/GetAllSoapTypesResponse")]
        System.IAsyncResult BeginGetAllSoapTypes(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<SilverlightMappingToolBasic.MappingService.SoapTypeElement> EndGetAllSoapTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/NodeService/IMappingToolService/GetAllNodes", ReplyAction="http://sevensigma.com.au/NodeService/IMappingToolService/GetAllNodesResponse")]
        System.IAsyncResult BeginGetAllNodes(System.Guid domainId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<System.Guid, SilverlightMappingToolBasic.MappingService.SoapNode> EndGetAllNodes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/NodeService/IMappingToolService/GetNodes", ReplyAction="http://sevensigma.com.au/NodeService/IMappingToolService/GetNodesResponse")]
        System.IAsyncResult BeginGetNodes(System.Collections.Generic.Dictionary<System.Guid, System.Guid> nodeIds, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<System.Guid, SilverlightMappingToolBasic.MappingService.SoapNode> EndGetNodes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/NodeService/IMappingToolService/GetRelatedNodes", ReplyAction="http://sevensigma.com.au/NodeService/IMappingToolService/GetRelatedNodesResponse")]
        System.IAsyncResult BeginGetRelatedNodes(System.Guid domainId, System.Guid nodeId, int depth, System.AsyncCallback callback, object asyncState);
        
        SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult EndGetRelatedNodes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/NodeService/IMappingToolService/GetMapsNodes", ReplyAction="http://sevensigma.com.au/NodeService/IMappingToolService/GetMapsNodesResponse")]
        System.IAsyncResult BeginGetMapsNodes(System.Guid domainId, System.Guid mapNodeId, System.AsyncCallback callback, object asyncState);
        
        SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult EndGetMapsNodes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/NodeService/IMappingToolService/GetContainerMapNodeId", ReplyAction="http://sevensigma.com.au/NodeService/IMappingToolService/GetContainerMapNodeIdRes" +
            "ponse")]
        System.IAsyncResult BeginGetContainerMapNodeId(System.Guid domainId, System.Guid nodeId, System.AsyncCallback callback, object asyncState);
        
        System.Guid EndGetContainerMapNodeId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sevensigma.com.au/NodeService/IMappingToolService/GetNodesXmlQuery", ReplyAction="http://sevensigma.com.au/NodeService/IMappingToolService/GetNodesXmlQueryResponse" +
            "")]
        System.IAsyncResult BeginGetNodesXmlQuery(string graphQueryXml, System.AsyncCallback callback, object asyncState);
        
        SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult EndGetNodesXmlQuery(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMappingToolServiceChannel : SilverlightMappingToolBasic.MappingService.IMappingToolService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateNewDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateNewDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightMappingToolBasic.MappingService.SoapNode Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightMappingToolBasic.MappingService.SoapNode)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateNewMapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateNewMapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Guid Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddNodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddNodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightMappingToolBasic.MappingService.SoapNode Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightMappingToolBasic.MappingService.SoapNode)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RenameNodeMetadataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RenameNodeMetadataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PasteNodeCloneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PasteNodeCloneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightMappingToolBasic.MappingService.SoapNode Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightMappingToolBasic.MappingService.SoapNode)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteNodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteNodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightMappingToolBasic.MappingService.DeleteResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightMappingToolBasic.MappingService.DeleteResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteNodePromoteTransclusionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteNodePromoteTransclusionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightMappingToolBasic.MappingService.DeleteResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightMappingToolBasic.MappingService.DeleteResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteNodeTransclusionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteNodeTransclusionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightMappingToolBasic.MappingService.DeleteResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightMappingToolBasic.MappingService.DeleteResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteRelationshipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteRelationshipCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightMappingToolBasic.MappingService.DeleteResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightMappingToolBasic.MappingService.DeleteResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteMetadataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteMetadataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightMappingToolBasic.MappingService.DeleteResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightMappingToolBasic.MappingService.DeleteResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConnectNodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConnectNodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightMappingToolBasic.MappingService.ConnectedNodesResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightMappingToolBasic.MappingService.ConnectedNodesResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateNodeMetadataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateNodeMetadataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightMappingToolBasic.MappingService.SoapNode Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightMappingToolBasic.MappingService.SoapNode)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDomainNodeIdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDomainNodeIdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<string, System.Guid> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<string, System.Guid>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDomainNodeIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDomainNodeIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Guid Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDomainMapNodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDomainMapNodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDomainMapNodesPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDomainMapNodesPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllSoapTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllSoapTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<SilverlightMappingToolBasic.MappingService.SoapTypeElement> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<SilverlightMappingToolBasic.MappingService.SoapTypeElement>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllNodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllNodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<System.Guid, SilverlightMappingToolBasic.MappingService.SoapNode> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<System.Guid, SilverlightMappingToolBasic.MappingService.SoapNode>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<System.Guid, SilverlightMappingToolBasic.MappingService.SoapNode> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<System.Guid, SilverlightMappingToolBasic.MappingService.SoapNode>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRelatedNodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRelatedNodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMapsNodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMapsNodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetContainerMapNodeIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetContainerMapNodeIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Guid Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNodesXmlQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNodesXmlQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MappingToolServiceClient : System.ServiceModel.ClientBase<SilverlightMappingToolBasic.MappingService.IMappingToolService>, SilverlightMappingToolBasic.MappingService.IMappingToolService {
        
        private BeginOperationDelegate onBeginCreateNewDomainDelegate;
        
        private EndOperationDelegate onEndCreateNewDomainDelegate;
        
        private System.Threading.SendOrPostCallback onCreateNewDomainCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateNewMapDelegate;
        
        private EndOperationDelegate onEndCreateNewMapDelegate;
        
        private System.Threading.SendOrPostCallback onCreateNewMapCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertNodesDelegate;
        
        private EndOperationDelegate onEndInsertNodesDelegate;
        
        private System.Threading.SendOrPostCallback onInsertNodesCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddNodeDelegate;
        
        private EndOperationDelegate onEndAddNodeDelegate;
        
        private System.Threading.SendOrPostCallback onAddNodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginRenameNodeMetadataDelegate;
        
        private EndOperationDelegate onEndRenameNodeMetadataDelegate;
        
        private System.Threading.SendOrPostCallback onRenameNodeMetadataCompletedDelegate;
        
        private BeginOperationDelegate onBeginPasteNodeCloneDelegate;
        
        private EndOperationDelegate onEndPasteNodeCloneDelegate;
        
        private System.Threading.SendOrPostCallback onPasteNodeCloneCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteNodeDelegate;
        
        private EndOperationDelegate onEndDeleteNodeDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteNodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteNodePromoteTransclusionDelegate;
        
        private EndOperationDelegate onEndDeleteNodePromoteTransclusionDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteNodePromoteTransclusionCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteNodeTransclusionDelegate;
        
        private EndOperationDelegate onEndDeleteNodeTransclusionDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteNodeTransclusionCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteRelationshipDelegate;
        
        private EndOperationDelegate onEndDeleteRelationshipDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteRelationshipCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteMetadataDelegate;
        
        private EndOperationDelegate onEndDeleteMetadataDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteMetadataCompletedDelegate;
        
        private BeginOperationDelegate onBeginConnectNodesDelegate;
        
        private EndOperationDelegate onEndConnectNodesDelegate;
        
        private System.Threading.SendOrPostCallback onConnectNodesCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateNodeMetadataDelegate;
        
        private EndOperationDelegate onEndUpdateNodeMetadataDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateNodeMetadataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDomainNodeIdsDelegate;
        
        private EndOperationDelegate onEndGetDomainNodeIdsDelegate;
        
        private System.Threading.SendOrPostCallback onGetDomainNodeIdsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDomainNodeIdDelegate;
        
        private EndOperationDelegate onEndGetDomainNodeIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetDomainNodeIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDomainMapNodesDelegate;
        
        private EndOperationDelegate onEndGetDomainMapNodesDelegate;
        
        private System.Threading.SendOrPostCallback onGetDomainMapNodesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDomainMapNodesPagedDelegate;
        
        private EndOperationDelegate onEndGetDomainMapNodesPagedDelegate;
        
        private System.Threading.SendOrPostCallback onGetDomainMapNodesPagedCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllSoapTypesDelegate;
        
        private EndOperationDelegate onEndGetAllSoapTypesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllSoapTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllNodesDelegate;
        
        private EndOperationDelegate onEndGetAllNodesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllNodesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNodesDelegate;
        
        private EndOperationDelegate onEndGetNodesDelegate;
        
        private System.Threading.SendOrPostCallback onGetNodesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRelatedNodesDelegate;
        
        private EndOperationDelegate onEndGetRelatedNodesDelegate;
        
        private System.Threading.SendOrPostCallback onGetRelatedNodesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMapsNodesDelegate;
        
        private EndOperationDelegate onEndGetMapsNodesDelegate;
        
        private System.Threading.SendOrPostCallback onGetMapsNodesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetContainerMapNodeIdDelegate;
        
        private EndOperationDelegate onEndGetContainerMapNodeIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetContainerMapNodeIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNodesXmlQueryDelegate;
        
        private EndOperationDelegate onEndGetNodesXmlQueryDelegate;
        
        private System.Threading.SendOrPostCallback onGetNodesXmlQueryCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public MappingToolServiceClient() {
        }
        
        public MappingToolServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MappingToolServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MappingToolServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MappingToolServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<CreateNewDomainCompletedEventArgs> CreateNewDomainCompleted;
        
        public event System.EventHandler<CreateNewMapCompletedEventArgs> CreateNewMapCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> InsertNodesCompleted;
        
        public event System.EventHandler<AddNodeCompletedEventArgs> AddNodeCompleted;
        
        public event System.EventHandler<RenameNodeMetadataCompletedEventArgs> RenameNodeMetadataCompleted;
        
        public event System.EventHandler<PasteNodeCloneCompletedEventArgs> PasteNodeCloneCompleted;
        
        public event System.EventHandler<DeleteNodeCompletedEventArgs> DeleteNodeCompleted;
        
        public event System.EventHandler<DeleteNodePromoteTransclusionCompletedEventArgs> DeleteNodePromoteTransclusionCompleted;
        
        public event System.EventHandler<DeleteNodeTransclusionCompletedEventArgs> DeleteNodeTransclusionCompleted;
        
        public event System.EventHandler<DeleteRelationshipCompletedEventArgs> DeleteRelationshipCompleted;
        
        public event System.EventHandler<DeleteMetadataCompletedEventArgs> DeleteMetadataCompleted;
        
        public event System.EventHandler<ConnectNodesCompletedEventArgs> ConnectNodesCompleted;
        
        public event System.EventHandler<UpdateNodeMetadataCompletedEventArgs> UpdateNodeMetadataCompleted;
        
        public event System.EventHandler<GetDomainNodeIdsCompletedEventArgs> GetDomainNodeIdsCompleted;
        
        public event System.EventHandler<GetDomainNodeIdCompletedEventArgs> GetDomainNodeIdCompleted;
        
        public event System.EventHandler<GetDomainMapNodesCompletedEventArgs> GetDomainMapNodesCompleted;
        
        public event System.EventHandler<GetDomainMapNodesPagedCompletedEventArgs> GetDomainMapNodesPagedCompleted;
        
        public event System.EventHandler<GetAllSoapTypesCompletedEventArgs> GetAllSoapTypesCompleted;
        
        public event System.EventHandler<GetAllNodesCompletedEventArgs> GetAllNodesCompleted;
        
        public event System.EventHandler<GetNodesCompletedEventArgs> GetNodesCompleted;
        
        public event System.EventHandler<GetRelatedNodesCompletedEventArgs> GetRelatedNodesCompleted;
        
        public event System.EventHandler<GetMapsNodesCompletedEventArgs> GetMapsNodesCompleted;
        
        public event System.EventHandler<GetContainerMapNodeIdCompletedEventArgs> GetContainerMapNodeIdCompleted;
        
        public event System.EventHandler<GetNodesXmlQueryCompletedEventArgs> GetNodesXmlQueryCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMappingToolBasic.MappingService.IMappingToolService.BeginCreateNewDomain(string domainName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateNewDomain(domainName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightMappingToolBasic.MappingService.SoapNode SilverlightMappingToolBasic.MappingService.IMappingToolService.EndCreateNewDomain(System.IAsyncResult result) {
            return base.Channel.EndCreateNewDomain(result);
        }
        
        private System.IAsyncResult OnBeginCreateNewDomain(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string domainName = ((string)(inValues[0]));
            return ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).BeginCreateNewDomain(domainName, callback, asyncState);
        }
        
        private object[] OnEndCreateNewDomain(System.IAsyncResult result) {
            SilverlightMappingToolBasic.MappingService.SoapNode retVal = ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).EndCreateNewDomain(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateNewDomainCompleted(object state) {
            if ((this.CreateNewDomainCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateNewDomainCompleted(this, new CreateNewDomainCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateNewDomainAsync(string domainName) {
            this.CreateNewDomainAsync(domainName, null);
        }
        
        public void CreateNewDomainAsync(string domainName, object userState) {
            if ((this.onBeginCreateNewDomainDelegate == null)) {
                this.onBeginCreateNewDomainDelegate = new BeginOperationDelegate(this.OnBeginCreateNewDomain);
            }
            if ((this.onEndCreateNewDomainDelegate == null)) {
                this.onEndCreateNewDomainDelegate = new EndOperationDelegate(this.OnEndCreateNewDomain);
            }
            if ((this.onCreateNewDomainCompletedDelegate == null)) {
                this.onCreateNewDomainCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateNewDomainCompleted);
            }
            base.InvokeAsync(this.onBeginCreateNewDomainDelegate, new object[] {
                        domainName}, this.onEndCreateNewDomainDelegate, this.onCreateNewDomainCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMappingToolBasic.MappingService.IMappingToolService.BeginCreateNewMap(System.Guid domainId, string mapName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateNewMap(domainId, mapName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Guid SilverlightMappingToolBasic.MappingService.IMappingToolService.EndCreateNewMap(System.IAsyncResult result) {
            return base.Channel.EndCreateNewMap(result);
        }
        
        private System.IAsyncResult OnBeginCreateNewMap(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid domainId = ((System.Guid)(inValues[0]));
            string mapName = ((string)(inValues[1]));
            return ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).BeginCreateNewMap(domainId, mapName, callback, asyncState);
        }
        
        private object[] OnEndCreateNewMap(System.IAsyncResult result) {
            System.Guid retVal = ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).EndCreateNewMap(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateNewMapCompleted(object state) {
            if ((this.CreateNewMapCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateNewMapCompleted(this, new CreateNewMapCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateNewMapAsync(System.Guid domainId, string mapName) {
            this.CreateNewMapAsync(domainId, mapName, null);
        }
        
        public void CreateNewMapAsync(System.Guid domainId, string mapName, object userState) {
            if ((this.onBeginCreateNewMapDelegate == null)) {
                this.onBeginCreateNewMapDelegate = new BeginOperationDelegate(this.OnBeginCreateNewMap);
            }
            if ((this.onEndCreateNewMapDelegate == null)) {
                this.onEndCreateNewMapDelegate = new EndOperationDelegate(this.OnEndCreateNewMap);
            }
            if ((this.onCreateNewMapCompletedDelegate == null)) {
                this.onCreateNewMapCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateNewMapCompleted);
            }
            base.InvokeAsync(this.onBeginCreateNewMapDelegate, new object[] {
                        domainId,
                        mapName}, this.onEndCreateNewMapDelegate, this.onCreateNewMapCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMappingToolBasic.MappingService.IMappingToolService.BeginInsertNodes(System.Guid domainId, System.Guid mapId, string siteUrl, byte[] userToken, System.Guid webId, System.Guid listId, int itemId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertNodes(domainId, mapId, siteUrl, userToken, webId, listId, itemId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SilverlightMappingToolBasic.MappingService.IMappingToolService.EndInsertNodes(System.IAsyncResult result) {
            base.Channel.EndInsertNodes(result);
        }
        
        private System.IAsyncResult OnBeginInsertNodes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid domainId = ((System.Guid)(inValues[0]));
            System.Guid mapId = ((System.Guid)(inValues[1]));
            string siteUrl = ((string)(inValues[2]));
            byte[] userToken = ((byte[])(inValues[3]));
            System.Guid webId = ((System.Guid)(inValues[4]));
            System.Guid listId = ((System.Guid)(inValues[5]));
            int itemId = ((int)(inValues[6]));
            return ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).BeginInsertNodes(domainId, mapId, siteUrl, userToken, webId, listId, itemId, callback, asyncState);
        }
        
        private object[] OnEndInsertNodes(System.IAsyncResult result) {
            ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).EndInsertNodes(result);
            return null;
        }
        
        private void OnInsertNodesCompleted(object state) {
            if ((this.InsertNodesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertNodesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertNodesAsync(System.Guid domainId, System.Guid mapId, string siteUrl, byte[] userToken, System.Guid webId, System.Guid listId, int itemId) {
            this.InsertNodesAsync(domainId, mapId, siteUrl, userToken, webId, listId, itemId, null);
        }
        
        public void InsertNodesAsync(System.Guid domainId, System.Guid mapId, string siteUrl, byte[] userToken, System.Guid webId, System.Guid listId, int itemId, object userState) {
            if ((this.onBeginInsertNodesDelegate == null)) {
                this.onBeginInsertNodesDelegate = new BeginOperationDelegate(this.OnBeginInsertNodes);
            }
            if ((this.onEndInsertNodesDelegate == null)) {
                this.onEndInsertNodesDelegate = new EndOperationDelegate(this.OnEndInsertNodes);
            }
            if ((this.onInsertNodesCompletedDelegate == null)) {
                this.onInsertNodesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertNodesCompleted);
            }
            base.InvokeAsync(this.onBeginInsertNodesDelegate, new object[] {
                        domainId,
                        mapId,
                        siteUrl,
                        userToken,
                        webId,
                        listId,
                        itemId}, this.onEndInsertNodesDelegate, this.onInsertNodesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMappingToolBasic.MappingService.IMappingToolService.BeginAddNode(System.Guid domainId, SilverlightMappingToolBasic.MappingService.SoapNodeType nodeType, string originalId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddNode(domainId, nodeType, originalId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightMappingToolBasic.MappingService.SoapNode SilverlightMappingToolBasic.MappingService.IMappingToolService.EndAddNode(System.IAsyncResult result) {
            return base.Channel.EndAddNode(result);
        }
        
        private System.IAsyncResult OnBeginAddNode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid domainId = ((System.Guid)(inValues[0]));
            SilverlightMappingToolBasic.MappingService.SoapNodeType nodeType = ((SilverlightMappingToolBasic.MappingService.SoapNodeType)(inValues[1]));
            string originalId = ((string)(inValues[2]));
            return ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).BeginAddNode(domainId, nodeType, originalId, callback, asyncState);
        }
        
        private object[] OnEndAddNode(System.IAsyncResult result) {
            SilverlightMappingToolBasic.MappingService.SoapNode retVal = ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).EndAddNode(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddNodeCompleted(object state) {
            if ((this.AddNodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddNodeCompleted(this, new AddNodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddNodeAsync(System.Guid domainId, SilverlightMappingToolBasic.MappingService.SoapNodeType nodeType, string originalId) {
            this.AddNodeAsync(domainId, nodeType, originalId, null);
        }
        
        public void AddNodeAsync(System.Guid domainId, SilverlightMappingToolBasic.MappingService.SoapNodeType nodeType, string originalId, object userState) {
            if ((this.onBeginAddNodeDelegate == null)) {
                this.onBeginAddNodeDelegate = new BeginOperationDelegate(this.OnBeginAddNode);
            }
            if ((this.onEndAddNodeDelegate == null)) {
                this.onEndAddNodeDelegate = new EndOperationDelegate(this.OnEndAddNode);
            }
            if ((this.onAddNodeCompletedDelegate == null)) {
                this.onAddNodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddNodeCompleted);
            }
            base.InvokeAsync(this.onBeginAddNodeDelegate, new object[] {
                        domainId,
                        nodeType,
                        originalId}, this.onEndAddNodeDelegate, this.onAddNodeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMappingToolBasic.MappingService.IMappingToolService.BeginRenameNodeMetadata(System.Guid domainId, System.Guid soapNodeId, System.Guid soapRelationshipId, SilverlightMappingToolBasic.MappingService.SoapDescriptorType soapDescriptorType, string originalMetadataName, string newMetadataName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRenameNodeMetadata(domainId, soapNodeId, soapRelationshipId, soapDescriptorType, originalMetadataName, newMetadataName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightMappingToolBasic.MappingService.IMappingToolService.EndRenameNodeMetadata(System.IAsyncResult result) {
            return base.Channel.EndRenameNodeMetadata(result);
        }
        
        private System.IAsyncResult OnBeginRenameNodeMetadata(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid domainId = ((System.Guid)(inValues[0]));
            System.Guid soapNodeId = ((System.Guid)(inValues[1]));
            System.Guid soapRelationshipId = ((System.Guid)(inValues[2]));
            SilverlightMappingToolBasic.MappingService.SoapDescriptorType soapDescriptorType = ((SilverlightMappingToolBasic.MappingService.SoapDescriptorType)(inValues[3]));
            string originalMetadataName = ((string)(inValues[4]));
            string newMetadataName = ((string)(inValues[5]));
            return ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).BeginRenameNodeMetadata(domainId, soapNodeId, soapRelationshipId, soapDescriptorType, originalMetadataName, newMetadataName, callback, asyncState);
        }
        
        private object[] OnEndRenameNodeMetadata(System.IAsyncResult result) {
            bool retVal = ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).EndRenameNodeMetadata(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRenameNodeMetadataCompleted(object state) {
            if ((this.RenameNodeMetadataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RenameNodeMetadataCompleted(this, new RenameNodeMetadataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RenameNodeMetadataAsync(System.Guid domainId, System.Guid soapNodeId, System.Guid soapRelationshipId, SilverlightMappingToolBasic.MappingService.SoapDescriptorType soapDescriptorType, string originalMetadataName, string newMetadataName) {
            this.RenameNodeMetadataAsync(domainId, soapNodeId, soapRelationshipId, soapDescriptorType, originalMetadataName, newMetadataName, null);
        }
        
        public void RenameNodeMetadataAsync(System.Guid domainId, System.Guid soapNodeId, System.Guid soapRelationshipId, SilverlightMappingToolBasic.MappingService.SoapDescriptorType soapDescriptorType, string originalMetadataName, string newMetadataName, object userState) {
            if ((this.onBeginRenameNodeMetadataDelegate == null)) {
                this.onBeginRenameNodeMetadataDelegate = new BeginOperationDelegate(this.OnBeginRenameNodeMetadata);
            }
            if ((this.onEndRenameNodeMetadataDelegate == null)) {
                this.onEndRenameNodeMetadataDelegate = new EndOperationDelegate(this.OnEndRenameNodeMetadata);
            }
            if ((this.onRenameNodeMetadataCompletedDelegate == null)) {
                this.onRenameNodeMetadataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRenameNodeMetadataCompleted);
            }
            base.InvokeAsync(this.onBeginRenameNodeMetadataDelegate, new object[] {
                        domainId,
                        soapNodeId,
                        soapRelationshipId,
                        soapDescriptorType,
                        originalMetadataName,
                        newMetadataName}, this.onEndRenameNodeMetadataDelegate, this.onRenameNodeMetadataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMappingToolBasic.MappingService.IMappingToolService.BeginPasteNodeClone(System.Guid domainId, System.Guid copiedNodeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPasteNodeClone(domainId, copiedNodeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightMappingToolBasic.MappingService.SoapNode SilverlightMappingToolBasic.MappingService.IMappingToolService.EndPasteNodeClone(System.IAsyncResult result) {
            return base.Channel.EndPasteNodeClone(result);
        }
        
        private System.IAsyncResult OnBeginPasteNodeClone(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid domainId = ((System.Guid)(inValues[0]));
            System.Guid copiedNodeId = ((System.Guid)(inValues[1]));
            return ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).BeginPasteNodeClone(domainId, copiedNodeId, callback, asyncState);
        }
        
        private object[] OnEndPasteNodeClone(System.IAsyncResult result) {
            SilverlightMappingToolBasic.MappingService.SoapNode retVal = ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).EndPasteNodeClone(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPasteNodeCloneCompleted(object state) {
            if ((this.PasteNodeCloneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PasteNodeCloneCompleted(this, new PasteNodeCloneCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PasteNodeCloneAsync(System.Guid domainId, System.Guid copiedNodeId) {
            this.PasteNodeCloneAsync(domainId, copiedNodeId, null);
        }
        
        public void PasteNodeCloneAsync(System.Guid domainId, System.Guid copiedNodeId, object userState) {
            if ((this.onBeginPasteNodeCloneDelegate == null)) {
                this.onBeginPasteNodeCloneDelegate = new BeginOperationDelegate(this.OnBeginPasteNodeClone);
            }
            if ((this.onEndPasteNodeCloneDelegate == null)) {
                this.onEndPasteNodeCloneDelegate = new EndOperationDelegate(this.OnEndPasteNodeClone);
            }
            if ((this.onPasteNodeCloneCompletedDelegate == null)) {
                this.onPasteNodeCloneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPasteNodeCloneCompleted);
            }
            base.InvokeAsync(this.onBeginPasteNodeCloneDelegate, new object[] {
                        domainId,
                        copiedNodeId}, this.onEndPasteNodeCloneDelegate, this.onPasteNodeCloneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMappingToolBasic.MappingService.IMappingToolService.BeginDeleteNode(System.Guid domainId, System.Guid nodeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteNode(domainId, nodeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightMappingToolBasic.MappingService.DeleteResult SilverlightMappingToolBasic.MappingService.IMappingToolService.EndDeleteNode(System.IAsyncResult result) {
            return base.Channel.EndDeleteNode(result);
        }
        
        private System.IAsyncResult OnBeginDeleteNode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid domainId = ((System.Guid)(inValues[0]));
            System.Guid nodeId = ((System.Guid)(inValues[1]));
            return ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).BeginDeleteNode(domainId, nodeId, callback, asyncState);
        }
        
        private object[] OnEndDeleteNode(System.IAsyncResult result) {
            SilverlightMappingToolBasic.MappingService.DeleteResult retVal = ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).EndDeleteNode(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteNodeCompleted(object state) {
            if ((this.DeleteNodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteNodeCompleted(this, new DeleteNodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteNodeAsync(System.Guid domainId, System.Guid nodeId) {
            this.DeleteNodeAsync(domainId, nodeId, null);
        }
        
        public void DeleteNodeAsync(System.Guid domainId, System.Guid nodeId, object userState) {
            if ((this.onBeginDeleteNodeDelegate == null)) {
                this.onBeginDeleteNodeDelegate = new BeginOperationDelegate(this.OnBeginDeleteNode);
            }
            if ((this.onEndDeleteNodeDelegate == null)) {
                this.onEndDeleteNodeDelegate = new EndOperationDelegate(this.OnEndDeleteNode);
            }
            if ((this.onDeleteNodeCompletedDelegate == null)) {
                this.onDeleteNodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteNodeCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteNodeDelegate, new object[] {
                        domainId,
                        nodeId}, this.onEndDeleteNodeDelegate, this.onDeleteNodeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMappingToolBasic.MappingService.IMappingToolService.BeginDeleteNodePromoteTransclusion(System.Guid domainId, System.Guid mapIdToDeleteFrom, System.Guid nodeIdToDelete, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteNodePromoteTransclusion(domainId, mapIdToDeleteFrom, nodeIdToDelete, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightMappingToolBasic.MappingService.DeleteResult SilverlightMappingToolBasic.MappingService.IMappingToolService.EndDeleteNodePromoteTransclusion(System.IAsyncResult result) {
            return base.Channel.EndDeleteNodePromoteTransclusion(result);
        }
        
        private System.IAsyncResult OnBeginDeleteNodePromoteTransclusion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid domainId = ((System.Guid)(inValues[0]));
            System.Guid mapIdToDeleteFrom = ((System.Guid)(inValues[1]));
            System.Guid nodeIdToDelete = ((System.Guid)(inValues[2]));
            return ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).BeginDeleteNodePromoteTransclusion(domainId, mapIdToDeleteFrom, nodeIdToDelete, callback, asyncState);
        }
        
        private object[] OnEndDeleteNodePromoteTransclusion(System.IAsyncResult result) {
            SilverlightMappingToolBasic.MappingService.DeleteResult retVal = ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).EndDeleteNodePromoteTransclusion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteNodePromoteTransclusionCompleted(object state) {
            if ((this.DeleteNodePromoteTransclusionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteNodePromoteTransclusionCompleted(this, new DeleteNodePromoteTransclusionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteNodePromoteTransclusionAsync(System.Guid domainId, System.Guid mapIdToDeleteFrom, System.Guid nodeIdToDelete) {
            this.DeleteNodePromoteTransclusionAsync(domainId, mapIdToDeleteFrom, nodeIdToDelete, null);
        }
        
        public void DeleteNodePromoteTransclusionAsync(System.Guid domainId, System.Guid mapIdToDeleteFrom, System.Guid nodeIdToDelete, object userState) {
            if ((this.onBeginDeleteNodePromoteTransclusionDelegate == null)) {
                this.onBeginDeleteNodePromoteTransclusionDelegate = new BeginOperationDelegate(this.OnBeginDeleteNodePromoteTransclusion);
            }
            if ((this.onEndDeleteNodePromoteTransclusionDelegate == null)) {
                this.onEndDeleteNodePromoteTransclusionDelegate = new EndOperationDelegate(this.OnEndDeleteNodePromoteTransclusion);
            }
            if ((this.onDeleteNodePromoteTransclusionCompletedDelegate == null)) {
                this.onDeleteNodePromoteTransclusionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteNodePromoteTransclusionCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteNodePromoteTransclusionDelegate, new object[] {
                        domainId,
                        mapIdToDeleteFrom,
                        nodeIdToDelete}, this.onEndDeleteNodePromoteTransclusionDelegate, this.onDeleteNodePromoteTransclusionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMappingToolBasic.MappingService.IMappingToolService.BeginDeleteNodeTransclusion(System.Guid domainId, System.Guid mapIdToDeleteFrom, System.Guid nodeIdToDelete, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteNodeTransclusion(domainId, mapIdToDeleteFrom, nodeIdToDelete, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightMappingToolBasic.MappingService.DeleteResult SilverlightMappingToolBasic.MappingService.IMappingToolService.EndDeleteNodeTransclusion(System.IAsyncResult result) {
            return base.Channel.EndDeleteNodeTransclusion(result);
        }
        
        private System.IAsyncResult OnBeginDeleteNodeTransclusion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid domainId = ((System.Guid)(inValues[0]));
            System.Guid mapIdToDeleteFrom = ((System.Guid)(inValues[1]));
            System.Guid nodeIdToDelete = ((System.Guid)(inValues[2]));
            return ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).BeginDeleteNodeTransclusion(domainId, mapIdToDeleteFrom, nodeIdToDelete, callback, asyncState);
        }
        
        private object[] OnEndDeleteNodeTransclusion(System.IAsyncResult result) {
            SilverlightMappingToolBasic.MappingService.DeleteResult retVal = ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).EndDeleteNodeTransclusion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteNodeTransclusionCompleted(object state) {
            if ((this.DeleteNodeTransclusionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteNodeTransclusionCompleted(this, new DeleteNodeTransclusionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteNodeTransclusionAsync(System.Guid domainId, System.Guid mapIdToDeleteFrom, System.Guid nodeIdToDelete) {
            this.DeleteNodeTransclusionAsync(domainId, mapIdToDeleteFrom, nodeIdToDelete, null);
        }
        
        public void DeleteNodeTransclusionAsync(System.Guid domainId, System.Guid mapIdToDeleteFrom, System.Guid nodeIdToDelete, object userState) {
            if ((this.onBeginDeleteNodeTransclusionDelegate == null)) {
                this.onBeginDeleteNodeTransclusionDelegate = new BeginOperationDelegate(this.OnBeginDeleteNodeTransclusion);
            }
            if ((this.onEndDeleteNodeTransclusionDelegate == null)) {
                this.onEndDeleteNodeTransclusionDelegate = new EndOperationDelegate(this.OnEndDeleteNodeTransclusion);
            }
            if ((this.onDeleteNodeTransclusionCompletedDelegate == null)) {
                this.onDeleteNodeTransclusionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteNodeTransclusionCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteNodeTransclusionDelegate, new object[] {
                        domainId,
                        mapIdToDeleteFrom,
                        nodeIdToDelete}, this.onEndDeleteNodeTransclusionDelegate, this.onDeleteNodeTransclusionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMappingToolBasic.MappingService.IMappingToolService.BeginDeleteRelationship(System.Guid domainId, System.Guid relationshipId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteRelationship(domainId, relationshipId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightMappingToolBasic.MappingService.DeleteResult SilverlightMappingToolBasic.MappingService.IMappingToolService.EndDeleteRelationship(System.IAsyncResult result) {
            return base.Channel.EndDeleteRelationship(result);
        }
        
        private System.IAsyncResult OnBeginDeleteRelationship(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid domainId = ((System.Guid)(inValues[0]));
            System.Guid relationshipId = ((System.Guid)(inValues[1]));
            return ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).BeginDeleteRelationship(domainId, relationshipId, callback, asyncState);
        }
        
        private object[] OnEndDeleteRelationship(System.IAsyncResult result) {
            SilverlightMappingToolBasic.MappingService.DeleteResult retVal = ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).EndDeleteRelationship(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteRelationshipCompleted(object state) {
            if ((this.DeleteRelationshipCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteRelationshipCompleted(this, new DeleteRelationshipCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteRelationshipAsync(System.Guid domainId, System.Guid relationshipId) {
            this.DeleteRelationshipAsync(domainId, relationshipId, null);
        }
        
        public void DeleteRelationshipAsync(System.Guid domainId, System.Guid relationshipId, object userState) {
            if ((this.onBeginDeleteRelationshipDelegate == null)) {
                this.onBeginDeleteRelationshipDelegate = new BeginOperationDelegate(this.OnBeginDeleteRelationship);
            }
            if ((this.onEndDeleteRelationshipDelegate == null)) {
                this.onEndDeleteRelationshipDelegate = new EndOperationDelegate(this.OnEndDeleteRelationship);
            }
            if ((this.onDeleteRelationshipCompletedDelegate == null)) {
                this.onDeleteRelationshipCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteRelationshipCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteRelationshipDelegate, new object[] {
                        domainId,
                        relationshipId}, this.onEndDeleteRelationshipDelegate, this.onDeleteRelationshipCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMappingToolBasic.MappingService.IMappingToolService.BeginDeleteMetadata(SilverlightMappingToolBasic.MappingService.MetadataContext key, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteMetadata(key, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightMappingToolBasic.MappingService.DeleteResult SilverlightMappingToolBasic.MappingService.IMappingToolService.EndDeleteMetadata(System.IAsyncResult result) {
            return base.Channel.EndDeleteMetadata(result);
        }
        
        private System.IAsyncResult OnBeginDeleteMetadata(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SilverlightMappingToolBasic.MappingService.MetadataContext key = ((SilverlightMappingToolBasic.MappingService.MetadataContext)(inValues[0]));
            return ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).BeginDeleteMetadata(key, callback, asyncState);
        }
        
        private object[] OnEndDeleteMetadata(System.IAsyncResult result) {
            SilverlightMappingToolBasic.MappingService.DeleteResult retVal = ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).EndDeleteMetadata(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteMetadataCompleted(object state) {
            if ((this.DeleteMetadataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteMetadataCompleted(this, new DeleteMetadataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteMetadataAsync(SilverlightMappingToolBasic.MappingService.MetadataContext key) {
            this.DeleteMetadataAsync(key, null);
        }
        
        public void DeleteMetadataAsync(SilverlightMappingToolBasic.MappingService.MetadataContext key, object userState) {
            if ((this.onBeginDeleteMetadataDelegate == null)) {
                this.onBeginDeleteMetadataDelegate = new BeginOperationDelegate(this.OnBeginDeleteMetadata);
            }
            if ((this.onEndDeleteMetadataDelegate == null)) {
                this.onEndDeleteMetadataDelegate = new EndOperationDelegate(this.OnEndDeleteMetadata);
            }
            if ((this.onDeleteMetadataCompletedDelegate == null)) {
                this.onDeleteMetadataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteMetadataCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteMetadataDelegate, new object[] {
                        key}, this.onEndDeleteMetadataDelegate, this.onDeleteMetadataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMappingToolBasic.MappingService.IMappingToolService.BeginConnectNodes(System.Guid domainId, System.Collections.Generic.Dictionary<SilverlightMappingToolBasic.MappingService.SoapDescriptorType, System.Guid> nodes, SilverlightMappingToolBasic.MappingService.SoapRelationshipType relationshipType, string originalId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConnectNodes(domainId, nodes, relationshipType, originalId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightMappingToolBasic.MappingService.ConnectedNodesResult SilverlightMappingToolBasic.MappingService.IMappingToolService.EndConnectNodes(System.IAsyncResult result) {
            return base.Channel.EndConnectNodes(result);
        }
        
        private System.IAsyncResult OnBeginConnectNodes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid domainId = ((System.Guid)(inValues[0]));
            System.Collections.Generic.Dictionary<SilverlightMappingToolBasic.MappingService.SoapDescriptorType, System.Guid> nodes = ((System.Collections.Generic.Dictionary<SilverlightMappingToolBasic.MappingService.SoapDescriptorType, System.Guid>)(inValues[1]));
            SilverlightMappingToolBasic.MappingService.SoapRelationshipType relationshipType = ((SilverlightMappingToolBasic.MappingService.SoapRelationshipType)(inValues[2]));
            string originalId = ((string)(inValues[3]));
            return ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).BeginConnectNodes(domainId, nodes, relationshipType, originalId, callback, asyncState);
        }
        
        private object[] OnEndConnectNodes(System.IAsyncResult result) {
            SilverlightMappingToolBasic.MappingService.ConnectedNodesResult retVal = ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).EndConnectNodes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConnectNodesCompleted(object state) {
            if ((this.ConnectNodesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConnectNodesCompleted(this, new ConnectNodesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConnectNodesAsync(System.Guid domainId, System.Collections.Generic.Dictionary<SilverlightMappingToolBasic.MappingService.SoapDescriptorType, System.Guid> nodes, SilverlightMappingToolBasic.MappingService.SoapRelationshipType relationshipType, string originalId) {
            this.ConnectNodesAsync(domainId, nodes, relationshipType, originalId, null);
        }
        
        public void ConnectNodesAsync(System.Guid domainId, System.Collections.Generic.Dictionary<SilverlightMappingToolBasic.MappingService.SoapDescriptorType, System.Guid> nodes, SilverlightMappingToolBasic.MappingService.SoapRelationshipType relationshipType, string originalId, object userState) {
            if ((this.onBeginConnectNodesDelegate == null)) {
                this.onBeginConnectNodesDelegate = new BeginOperationDelegate(this.OnBeginConnectNodes);
            }
            if ((this.onEndConnectNodesDelegate == null)) {
                this.onEndConnectNodesDelegate = new EndOperationDelegate(this.OnEndConnectNodes);
            }
            if ((this.onConnectNodesCompletedDelegate == null)) {
                this.onConnectNodesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConnectNodesCompleted);
            }
            base.InvokeAsync(this.onBeginConnectNodesDelegate, new object[] {
                        domainId,
                        nodes,
                        relationshipType,
                        originalId}, this.onEndConnectNodesDelegate, this.onConnectNodesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMappingToolBasic.MappingService.IMappingToolService.BeginUpdateNodeMetadata(System.Guid domainId, System.Guid soapNodeId, System.Guid soapRelationshipId, SilverlightMappingToolBasic.MappingService.SoapDescriptorType soapDescriptorType, string metadataName, string metadataValue, SilverlightMappingToolBasic.MappingService.SoapMetadataType soapMetadataType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateNodeMetadata(domainId, soapNodeId, soapRelationshipId, soapDescriptorType, metadataName, metadataValue, soapMetadataType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightMappingToolBasic.MappingService.SoapNode SilverlightMappingToolBasic.MappingService.IMappingToolService.EndUpdateNodeMetadata(System.IAsyncResult result) {
            return base.Channel.EndUpdateNodeMetadata(result);
        }
        
        private System.IAsyncResult OnBeginUpdateNodeMetadata(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid domainId = ((System.Guid)(inValues[0]));
            System.Guid soapNodeId = ((System.Guid)(inValues[1]));
            System.Guid soapRelationshipId = ((System.Guid)(inValues[2]));
            SilverlightMappingToolBasic.MappingService.SoapDescriptorType soapDescriptorType = ((SilverlightMappingToolBasic.MappingService.SoapDescriptorType)(inValues[3]));
            string metadataName = ((string)(inValues[4]));
            string metadataValue = ((string)(inValues[5]));
            SilverlightMappingToolBasic.MappingService.SoapMetadataType soapMetadataType = ((SilverlightMappingToolBasic.MappingService.SoapMetadataType)(inValues[6]));
            return ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).BeginUpdateNodeMetadata(domainId, soapNodeId, soapRelationshipId, soapDescriptorType, metadataName, metadataValue, soapMetadataType, callback, asyncState);
        }
        
        private object[] OnEndUpdateNodeMetadata(System.IAsyncResult result) {
            SilverlightMappingToolBasic.MappingService.SoapNode retVal = ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).EndUpdateNodeMetadata(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateNodeMetadataCompleted(object state) {
            if ((this.UpdateNodeMetadataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateNodeMetadataCompleted(this, new UpdateNodeMetadataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateNodeMetadataAsync(System.Guid domainId, System.Guid soapNodeId, System.Guid soapRelationshipId, SilverlightMappingToolBasic.MappingService.SoapDescriptorType soapDescriptorType, string metadataName, string metadataValue, SilverlightMappingToolBasic.MappingService.SoapMetadataType soapMetadataType) {
            this.UpdateNodeMetadataAsync(domainId, soapNodeId, soapRelationshipId, soapDescriptorType, metadataName, metadataValue, soapMetadataType, null);
        }
        
        public void UpdateNodeMetadataAsync(System.Guid domainId, System.Guid soapNodeId, System.Guid soapRelationshipId, SilverlightMappingToolBasic.MappingService.SoapDescriptorType soapDescriptorType, string metadataName, string metadataValue, SilverlightMappingToolBasic.MappingService.SoapMetadataType soapMetadataType, object userState) {
            if ((this.onBeginUpdateNodeMetadataDelegate == null)) {
                this.onBeginUpdateNodeMetadataDelegate = new BeginOperationDelegate(this.OnBeginUpdateNodeMetadata);
            }
            if ((this.onEndUpdateNodeMetadataDelegate == null)) {
                this.onEndUpdateNodeMetadataDelegate = new EndOperationDelegate(this.OnEndUpdateNodeMetadata);
            }
            if ((this.onUpdateNodeMetadataCompletedDelegate == null)) {
                this.onUpdateNodeMetadataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateNodeMetadataCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateNodeMetadataDelegate, new object[] {
                        domainId,
                        soapNodeId,
                        soapRelationshipId,
                        soapDescriptorType,
                        metadataName,
                        metadataValue,
                        soapMetadataType}, this.onEndUpdateNodeMetadataDelegate, this.onUpdateNodeMetadataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMappingToolBasic.MappingService.IMappingToolService.BeginGetDomainNodeIds(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDomainNodeIds(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<string, System.Guid> SilverlightMappingToolBasic.MappingService.IMappingToolService.EndGetDomainNodeIds(System.IAsyncResult result) {
            return base.Channel.EndGetDomainNodeIds(result);
        }
        
        private System.IAsyncResult OnBeginGetDomainNodeIds(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).BeginGetDomainNodeIds(callback, asyncState);
        }
        
        private object[] OnEndGetDomainNodeIds(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<string, System.Guid> retVal = ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).EndGetDomainNodeIds(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDomainNodeIdsCompleted(object state) {
            if ((this.GetDomainNodeIdsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDomainNodeIdsCompleted(this, new GetDomainNodeIdsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDomainNodeIdsAsync() {
            this.GetDomainNodeIdsAsync(null);
        }
        
        public void GetDomainNodeIdsAsync(object userState) {
            if ((this.onBeginGetDomainNodeIdsDelegate == null)) {
                this.onBeginGetDomainNodeIdsDelegate = new BeginOperationDelegate(this.OnBeginGetDomainNodeIds);
            }
            if ((this.onEndGetDomainNodeIdsDelegate == null)) {
                this.onEndGetDomainNodeIdsDelegate = new EndOperationDelegate(this.OnEndGetDomainNodeIds);
            }
            if ((this.onGetDomainNodeIdsCompletedDelegate == null)) {
                this.onGetDomainNodeIdsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDomainNodeIdsCompleted);
            }
            base.InvokeAsync(this.onBeginGetDomainNodeIdsDelegate, null, this.onEndGetDomainNodeIdsDelegate, this.onGetDomainNodeIdsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMappingToolBasic.MappingService.IMappingToolService.BeginGetDomainNodeId(System.Guid domainId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDomainNodeId(domainId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Guid SilverlightMappingToolBasic.MappingService.IMappingToolService.EndGetDomainNodeId(System.IAsyncResult result) {
            return base.Channel.EndGetDomainNodeId(result);
        }
        
        private System.IAsyncResult OnBeginGetDomainNodeId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid domainId = ((System.Guid)(inValues[0]));
            return ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).BeginGetDomainNodeId(domainId, callback, asyncState);
        }
        
        private object[] OnEndGetDomainNodeId(System.IAsyncResult result) {
            System.Guid retVal = ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).EndGetDomainNodeId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDomainNodeIdCompleted(object state) {
            if ((this.GetDomainNodeIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDomainNodeIdCompleted(this, new GetDomainNodeIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDomainNodeIdAsync(System.Guid domainId) {
            this.GetDomainNodeIdAsync(domainId, null);
        }
        
        public void GetDomainNodeIdAsync(System.Guid domainId, object userState) {
            if ((this.onBeginGetDomainNodeIdDelegate == null)) {
                this.onBeginGetDomainNodeIdDelegate = new BeginOperationDelegate(this.OnBeginGetDomainNodeId);
            }
            if ((this.onEndGetDomainNodeIdDelegate == null)) {
                this.onEndGetDomainNodeIdDelegate = new EndOperationDelegate(this.OnEndGetDomainNodeId);
            }
            if ((this.onGetDomainNodeIdCompletedDelegate == null)) {
                this.onGetDomainNodeIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDomainNodeIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetDomainNodeIdDelegate, new object[] {
                        domainId}, this.onEndGetDomainNodeIdDelegate, this.onGetDomainNodeIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMappingToolBasic.MappingService.IMappingToolService.BeginGetDomainMapNodes(System.Guid domainId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDomainMapNodes(domainId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult SilverlightMappingToolBasic.MappingService.IMappingToolService.EndGetDomainMapNodes(System.IAsyncResult result) {
            return base.Channel.EndGetDomainMapNodes(result);
        }
        
        private System.IAsyncResult OnBeginGetDomainMapNodes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid domainId = ((System.Guid)(inValues[0]));
            return ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).BeginGetDomainMapNodes(domainId, callback, asyncState);
        }
        
        private object[] OnEndGetDomainMapNodes(System.IAsyncResult result) {
            SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult retVal = ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).EndGetDomainMapNodes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDomainMapNodesCompleted(object state) {
            if ((this.GetDomainMapNodesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDomainMapNodesCompleted(this, new GetDomainMapNodesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDomainMapNodesAsync(System.Guid domainId) {
            this.GetDomainMapNodesAsync(domainId, null);
        }
        
        public void GetDomainMapNodesAsync(System.Guid domainId, object userState) {
            if ((this.onBeginGetDomainMapNodesDelegate == null)) {
                this.onBeginGetDomainMapNodesDelegate = new BeginOperationDelegate(this.OnBeginGetDomainMapNodes);
            }
            if ((this.onEndGetDomainMapNodesDelegate == null)) {
                this.onEndGetDomainMapNodesDelegate = new EndOperationDelegate(this.OnEndGetDomainMapNodes);
            }
            if ((this.onGetDomainMapNodesCompletedDelegate == null)) {
                this.onGetDomainMapNodesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDomainMapNodesCompleted);
            }
            base.InvokeAsync(this.onBeginGetDomainMapNodesDelegate, new object[] {
                        domainId}, this.onEndGetDomainMapNodesDelegate, this.onGetDomainMapNodesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMappingToolBasic.MappingService.IMappingToolService.BeginGetDomainMapNodesPaged(System.Guid domainId, int page, int pageSize, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDomainMapNodesPaged(domainId, page, pageSize, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult SilverlightMappingToolBasic.MappingService.IMappingToolService.EndGetDomainMapNodesPaged(System.IAsyncResult result) {
            return base.Channel.EndGetDomainMapNodesPaged(result);
        }
        
        private System.IAsyncResult OnBeginGetDomainMapNodesPaged(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid domainId = ((System.Guid)(inValues[0]));
            int page = ((int)(inValues[1]));
            int pageSize = ((int)(inValues[2]));
            return ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).BeginGetDomainMapNodesPaged(domainId, page, pageSize, callback, asyncState);
        }
        
        private object[] OnEndGetDomainMapNodesPaged(System.IAsyncResult result) {
            SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult retVal = ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).EndGetDomainMapNodesPaged(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDomainMapNodesPagedCompleted(object state) {
            if ((this.GetDomainMapNodesPagedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDomainMapNodesPagedCompleted(this, new GetDomainMapNodesPagedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDomainMapNodesPagedAsync(System.Guid domainId, int page, int pageSize) {
            this.GetDomainMapNodesPagedAsync(domainId, page, pageSize, null);
        }
        
        public void GetDomainMapNodesPagedAsync(System.Guid domainId, int page, int pageSize, object userState) {
            if ((this.onBeginGetDomainMapNodesPagedDelegate == null)) {
                this.onBeginGetDomainMapNodesPagedDelegate = new BeginOperationDelegate(this.OnBeginGetDomainMapNodesPaged);
            }
            if ((this.onEndGetDomainMapNodesPagedDelegate == null)) {
                this.onEndGetDomainMapNodesPagedDelegate = new EndOperationDelegate(this.OnEndGetDomainMapNodesPaged);
            }
            if ((this.onGetDomainMapNodesPagedCompletedDelegate == null)) {
                this.onGetDomainMapNodesPagedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDomainMapNodesPagedCompleted);
            }
            base.InvokeAsync(this.onBeginGetDomainMapNodesPagedDelegate, new object[] {
                        domainId,
                        page,
                        pageSize}, this.onEndGetDomainMapNodesPagedDelegate, this.onGetDomainMapNodesPagedCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMappingToolBasic.MappingService.IMappingToolService.BeginGetAllSoapTypes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllSoapTypes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<SilverlightMappingToolBasic.MappingService.SoapTypeElement> SilverlightMappingToolBasic.MappingService.IMappingToolService.EndGetAllSoapTypes(System.IAsyncResult result) {
            return base.Channel.EndGetAllSoapTypes(result);
        }
        
        private System.IAsyncResult OnBeginGetAllSoapTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).BeginGetAllSoapTypes(callback, asyncState);
        }
        
        private object[] OnEndGetAllSoapTypes(System.IAsyncResult result) {
            System.Collections.Generic.List<SilverlightMappingToolBasic.MappingService.SoapTypeElement> retVal = ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).EndGetAllSoapTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllSoapTypesCompleted(object state) {
            if ((this.GetAllSoapTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllSoapTypesCompleted(this, new GetAllSoapTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllSoapTypesAsync() {
            this.GetAllSoapTypesAsync(null);
        }
        
        public void GetAllSoapTypesAsync(object userState) {
            if ((this.onBeginGetAllSoapTypesDelegate == null)) {
                this.onBeginGetAllSoapTypesDelegate = new BeginOperationDelegate(this.OnBeginGetAllSoapTypes);
            }
            if ((this.onEndGetAllSoapTypesDelegate == null)) {
                this.onEndGetAllSoapTypesDelegate = new EndOperationDelegate(this.OnEndGetAllSoapTypes);
            }
            if ((this.onGetAllSoapTypesCompletedDelegate == null)) {
                this.onGetAllSoapTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllSoapTypesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllSoapTypesDelegate, null, this.onEndGetAllSoapTypesDelegate, this.onGetAllSoapTypesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMappingToolBasic.MappingService.IMappingToolService.BeginGetAllNodes(System.Guid domainId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllNodes(domainId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<System.Guid, SilverlightMappingToolBasic.MappingService.SoapNode> SilverlightMappingToolBasic.MappingService.IMappingToolService.EndGetAllNodes(System.IAsyncResult result) {
            return base.Channel.EndGetAllNodes(result);
        }
        
        private System.IAsyncResult OnBeginGetAllNodes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid domainId = ((System.Guid)(inValues[0]));
            return ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).BeginGetAllNodes(domainId, callback, asyncState);
        }
        
        private object[] OnEndGetAllNodes(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<System.Guid, SilverlightMappingToolBasic.MappingService.SoapNode> retVal = ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).EndGetAllNodes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllNodesCompleted(object state) {
            if ((this.GetAllNodesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllNodesCompleted(this, new GetAllNodesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllNodesAsync(System.Guid domainId) {
            this.GetAllNodesAsync(domainId, null);
        }
        
        public void GetAllNodesAsync(System.Guid domainId, object userState) {
            if ((this.onBeginGetAllNodesDelegate == null)) {
                this.onBeginGetAllNodesDelegate = new BeginOperationDelegate(this.OnBeginGetAllNodes);
            }
            if ((this.onEndGetAllNodesDelegate == null)) {
                this.onEndGetAllNodesDelegate = new EndOperationDelegate(this.OnEndGetAllNodes);
            }
            if ((this.onGetAllNodesCompletedDelegate == null)) {
                this.onGetAllNodesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllNodesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllNodesDelegate, new object[] {
                        domainId}, this.onEndGetAllNodesDelegate, this.onGetAllNodesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMappingToolBasic.MappingService.IMappingToolService.BeginGetNodes(System.Collections.Generic.Dictionary<System.Guid, System.Guid> nodeIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNodes(nodeIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<System.Guid, SilverlightMappingToolBasic.MappingService.SoapNode> SilverlightMappingToolBasic.MappingService.IMappingToolService.EndGetNodes(System.IAsyncResult result) {
            return base.Channel.EndGetNodes(result);
        }
        
        private System.IAsyncResult OnBeginGetNodes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.Dictionary<System.Guid, System.Guid> nodeIds = ((System.Collections.Generic.Dictionary<System.Guid, System.Guid>)(inValues[0]));
            return ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).BeginGetNodes(nodeIds, callback, asyncState);
        }
        
        private object[] OnEndGetNodes(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<System.Guid, SilverlightMappingToolBasic.MappingService.SoapNode> retVal = ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).EndGetNodes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNodesCompleted(object state) {
            if ((this.GetNodesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNodesCompleted(this, new GetNodesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNodesAsync(System.Collections.Generic.Dictionary<System.Guid, System.Guid> nodeIds) {
            this.GetNodesAsync(nodeIds, null);
        }
        
        public void GetNodesAsync(System.Collections.Generic.Dictionary<System.Guid, System.Guid> nodeIds, object userState) {
            if ((this.onBeginGetNodesDelegate == null)) {
                this.onBeginGetNodesDelegate = new BeginOperationDelegate(this.OnBeginGetNodes);
            }
            if ((this.onEndGetNodesDelegate == null)) {
                this.onEndGetNodesDelegate = new EndOperationDelegate(this.OnEndGetNodes);
            }
            if ((this.onGetNodesCompletedDelegate == null)) {
                this.onGetNodesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNodesCompleted);
            }
            base.InvokeAsync(this.onBeginGetNodesDelegate, new object[] {
                        nodeIds}, this.onEndGetNodesDelegate, this.onGetNodesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMappingToolBasic.MappingService.IMappingToolService.BeginGetRelatedNodes(System.Guid domainId, System.Guid nodeId, int depth, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRelatedNodes(domainId, nodeId, depth, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult SilverlightMappingToolBasic.MappingService.IMappingToolService.EndGetRelatedNodes(System.IAsyncResult result) {
            return base.Channel.EndGetRelatedNodes(result);
        }
        
        private System.IAsyncResult OnBeginGetRelatedNodes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid domainId = ((System.Guid)(inValues[0]));
            System.Guid nodeId = ((System.Guid)(inValues[1]));
            int depth = ((int)(inValues[2]));
            return ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).BeginGetRelatedNodes(domainId, nodeId, depth, callback, asyncState);
        }
        
        private object[] OnEndGetRelatedNodes(System.IAsyncResult result) {
            SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult retVal = ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).EndGetRelatedNodes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRelatedNodesCompleted(object state) {
            if ((this.GetRelatedNodesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRelatedNodesCompleted(this, new GetRelatedNodesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRelatedNodesAsync(System.Guid domainId, System.Guid nodeId, int depth) {
            this.GetRelatedNodesAsync(domainId, nodeId, depth, null);
        }
        
        public void GetRelatedNodesAsync(System.Guid domainId, System.Guid nodeId, int depth, object userState) {
            if ((this.onBeginGetRelatedNodesDelegate == null)) {
                this.onBeginGetRelatedNodesDelegate = new BeginOperationDelegate(this.OnBeginGetRelatedNodes);
            }
            if ((this.onEndGetRelatedNodesDelegate == null)) {
                this.onEndGetRelatedNodesDelegate = new EndOperationDelegate(this.OnEndGetRelatedNodes);
            }
            if ((this.onGetRelatedNodesCompletedDelegate == null)) {
                this.onGetRelatedNodesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRelatedNodesCompleted);
            }
            base.InvokeAsync(this.onBeginGetRelatedNodesDelegate, new object[] {
                        domainId,
                        nodeId,
                        depth}, this.onEndGetRelatedNodesDelegate, this.onGetRelatedNodesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMappingToolBasic.MappingService.IMappingToolService.BeginGetMapsNodes(System.Guid domainId, System.Guid mapNodeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMapsNodes(domainId, mapNodeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult SilverlightMappingToolBasic.MappingService.IMappingToolService.EndGetMapsNodes(System.IAsyncResult result) {
            return base.Channel.EndGetMapsNodes(result);
        }
        
        private System.IAsyncResult OnBeginGetMapsNodes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid domainId = ((System.Guid)(inValues[0]));
            System.Guid mapNodeId = ((System.Guid)(inValues[1]));
            return ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).BeginGetMapsNodes(domainId, mapNodeId, callback, asyncState);
        }
        
        private object[] OnEndGetMapsNodes(System.IAsyncResult result) {
            SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult retVal = ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).EndGetMapsNodes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMapsNodesCompleted(object state) {
            if ((this.GetMapsNodesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMapsNodesCompleted(this, new GetMapsNodesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMapsNodesAsync(System.Guid domainId, System.Guid mapNodeId) {
            this.GetMapsNodesAsync(domainId, mapNodeId, null);
        }
        
        public void GetMapsNodesAsync(System.Guid domainId, System.Guid mapNodeId, object userState) {
            if ((this.onBeginGetMapsNodesDelegate == null)) {
                this.onBeginGetMapsNodesDelegate = new BeginOperationDelegate(this.OnBeginGetMapsNodes);
            }
            if ((this.onEndGetMapsNodesDelegate == null)) {
                this.onEndGetMapsNodesDelegate = new EndOperationDelegate(this.OnEndGetMapsNodes);
            }
            if ((this.onGetMapsNodesCompletedDelegate == null)) {
                this.onGetMapsNodesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMapsNodesCompleted);
            }
            base.InvokeAsync(this.onBeginGetMapsNodesDelegate, new object[] {
                        domainId,
                        mapNodeId}, this.onEndGetMapsNodesDelegate, this.onGetMapsNodesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMappingToolBasic.MappingService.IMappingToolService.BeginGetContainerMapNodeId(System.Guid domainId, System.Guid nodeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetContainerMapNodeId(domainId, nodeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Guid SilverlightMappingToolBasic.MappingService.IMappingToolService.EndGetContainerMapNodeId(System.IAsyncResult result) {
            return base.Channel.EndGetContainerMapNodeId(result);
        }
        
        private System.IAsyncResult OnBeginGetContainerMapNodeId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid domainId = ((System.Guid)(inValues[0]));
            System.Guid nodeId = ((System.Guid)(inValues[1]));
            return ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).BeginGetContainerMapNodeId(domainId, nodeId, callback, asyncState);
        }
        
        private object[] OnEndGetContainerMapNodeId(System.IAsyncResult result) {
            System.Guid retVal = ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).EndGetContainerMapNodeId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetContainerMapNodeIdCompleted(object state) {
            if ((this.GetContainerMapNodeIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetContainerMapNodeIdCompleted(this, new GetContainerMapNodeIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetContainerMapNodeIdAsync(System.Guid domainId, System.Guid nodeId) {
            this.GetContainerMapNodeIdAsync(domainId, nodeId, null);
        }
        
        public void GetContainerMapNodeIdAsync(System.Guid domainId, System.Guid nodeId, object userState) {
            if ((this.onBeginGetContainerMapNodeIdDelegate == null)) {
                this.onBeginGetContainerMapNodeIdDelegate = new BeginOperationDelegate(this.OnBeginGetContainerMapNodeId);
            }
            if ((this.onEndGetContainerMapNodeIdDelegate == null)) {
                this.onEndGetContainerMapNodeIdDelegate = new EndOperationDelegate(this.OnEndGetContainerMapNodeId);
            }
            if ((this.onGetContainerMapNodeIdCompletedDelegate == null)) {
                this.onGetContainerMapNodeIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetContainerMapNodeIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetContainerMapNodeIdDelegate, new object[] {
                        domainId,
                        nodeId}, this.onEndGetContainerMapNodeIdDelegate, this.onGetContainerMapNodeIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMappingToolBasic.MappingService.IMappingToolService.BeginGetNodesXmlQuery(string graphQueryXml, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNodesXmlQuery(graphQueryXml, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult SilverlightMappingToolBasic.MappingService.IMappingToolService.EndGetNodesXmlQuery(System.IAsyncResult result) {
            return base.Channel.EndGetNodesXmlQuery(result);
        }
        
        private System.IAsyncResult OnBeginGetNodesXmlQuery(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string graphQueryXml = ((string)(inValues[0]));
            return ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).BeginGetNodesXmlQuery(graphQueryXml, callback, asyncState);
        }
        
        private object[] OnEndGetNodesXmlQuery(System.IAsyncResult result) {
            SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult retVal = ((SilverlightMappingToolBasic.MappingService.IMappingToolService)(this)).EndGetNodesXmlQuery(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNodesXmlQueryCompleted(object state) {
            if ((this.GetNodesXmlQueryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNodesXmlQueryCompleted(this, new GetNodesXmlQueryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNodesXmlQueryAsync(string graphQueryXml) {
            this.GetNodesXmlQueryAsync(graphQueryXml, null);
        }
        
        public void GetNodesXmlQueryAsync(string graphQueryXml, object userState) {
            if ((this.onBeginGetNodesXmlQueryDelegate == null)) {
                this.onBeginGetNodesXmlQueryDelegate = new BeginOperationDelegate(this.OnBeginGetNodesXmlQuery);
            }
            if ((this.onEndGetNodesXmlQueryDelegate == null)) {
                this.onEndGetNodesXmlQueryDelegate = new EndOperationDelegate(this.OnEndGetNodesXmlQuery);
            }
            if ((this.onGetNodesXmlQueryCompletedDelegate == null)) {
                this.onGetNodesXmlQueryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNodesXmlQueryCompleted);
            }
            base.InvokeAsync(this.onBeginGetNodesXmlQueryDelegate, new object[] {
                        graphQueryXml}, this.onEndGetNodesXmlQueryDelegate, this.onGetNodesXmlQueryCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SilverlightMappingToolBasic.MappingService.IMappingToolService CreateChannel() {
            return new MappingToolServiceClientChannel(this);
        }
        
        private class MappingToolServiceClientChannel : ChannelBase<SilverlightMappingToolBasic.MappingService.IMappingToolService>, SilverlightMappingToolBasic.MappingService.IMappingToolService {
            
            public MappingToolServiceClientChannel(System.ServiceModel.ClientBase<SilverlightMappingToolBasic.MappingService.IMappingToolService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCreateNewDomain(string domainName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = domainName;
                System.IAsyncResult _result = base.BeginInvoke("CreateNewDomain", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightMappingToolBasic.MappingService.SoapNode EndCreateNewDomain(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightMappingToolBasic.MappingService.SoapNode _result = ((SilverlightMappingToolBasic.MappingService.SoapNode)(base.EndInvoke("CreateNewDomain", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateNewMap(System.Guid domainId, string mapName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = domainId;
                _args[1] = mapName;
                System.IAsyncResult _result = base.BeginInvoke("CreateNewMap", _args, callback, asyncState);
                return _result;
            }
            
            public System.Guid EndCreateNewMap(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Guid _result = ((System.Guid)(base.EndInvoke("CreateNewMap", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInsertNodes(System.Guid domainId, System.Guid mapId, string siteUrl, byte[] userToken, System.Guid webId, System.Guid listId, int itemId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = domainId;
                _args[1] = mapId;
                _args[2] = siteUrl;
                _args[3] = userToken;
                _args[4] = webId;
                _args[5] = listId;
                _args[6] = itemId;
                System.IAsyncResult _result = base.BeginInvoke("InsertNodes", _args, callback, asyncState);
                return _result;
            }
            
            public void EndInsertNodes(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("InsertNodes", _args, result);
            }
            
            public System.IAsyncResult BeginAddNode(System.Guid domainId, SilverlightMappingToolBasic.MappingService.SoapNodeType nodeType, string originalId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = domainId;
                _args[1] = nodeType;
                _args[2] = originalId;
                System.IAsyncResult _result = base.BeginInvoke("AddNode", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightMappingToolBasic.MappingService.SoapNode EndAddNode(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightMappingToolBasic.MappingService.SoapNode _result = ((SilverlightMappingToolBasic.MappingService.SoapNode)(base.EndInvoke("AddNode", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRenameNodeMetadata(System.Guid domainId, System.Guid soapNodeId, System.Guid soapRelationshipId, SilverlightMappingToolBasic.MappingService.SoapDescriptorType soapDescriptorType, string originalMetadataName, string newMetadataName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = domainId;
                _args[1] = soapNodeId;
                _args[2] = soapRelationshipId;
                _args[3] = soapDescriptorType;
                _args[4] = originalMetadataName;
                _args[5] = newMetadataName;
                System.IAsyncResult _result = base.BeginInvoke("RenameNodeMetadata", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndRenameNodeMetadata(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("RenameNodeMetadata", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPasteNodeClone(System.Guid domainId, System.Guid copiedNodeId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = domainId;
                _args[1] = copiedNodeId;
                System.IAsyncResult _result = base.BeginInvoke("PasteNodeClone", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightMappingToolBasic.MappingService.SoapNode EndPasteNodeClone(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightMappingToolBasic.MappingService.SoapNode _result = ((SilverlightMappingToolBasic.MappingService.SoapNode)(base.EndInvoke("PasteNodeClone", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteNode(System.Guid domainId, System.Guid nodeId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = domainId;
                _args[1] = nodeId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteNode", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightMappingToolBasic.MappingService.DeleteResult EndDeleteNode(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightMappingToolBasic.MappingService.DeleteResult _result = ((SilverlightMappingToolBasic.MappingService.DeleteResult)(base.EndInvoke("DeleteNode", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteNodePromoteTransclusion(System.Guid domainId, System.Guid mapIdToDeleteFrom, System.Guid nodeIdToDelete, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = domainId;
                _args[1] = mapIdToDeleteFrom;
                _args[2] = nodeIdToDelete;
                System.IAsyncResult _result = base.BeginInvoke("DeleteNodePromoteTransclusion", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightMappingToolBasic.MappingService.DeleteResult EndDeleteNodePromoteTransclusion(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightMappingToolBasic.MappingService.DeleteResult _result = ((SilverlightMappingToolBasic.MappingService.DeleteResult)(base.EndInvoke("DeleteNodePromoteTransclusion", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteNodeTransclusion(System.Guid domainId, System.Guid mapIdToDeleteFrom, System.Guid nodeIdToDelete, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = domainId;
                _args[1] = mapIdToDeleteFrom;
                _args[2] = nodeIdToDelete;
                System.IAsyncResult _result = base.BeginInvoke("DeleteNodeTransclusion", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightMappingToolBasic.MappingService.DeleteResult EndDeleteNodeTransclusion(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightMappingToolBasic.MappingService.DeleteResult _result = ((SilverlightMappingToolBasic.MappingService.DeleteResult)(base.EndInvoke("DeleteNodeTransclusion", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteRelationship(System.Guid domainId, System.Guid relationshipId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = domainId;
                _args[1] = relationshipId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteRelationship", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightMappingToolBasic.MappingService.DeleteResult EndDeleteRelationship(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightMappingToolBasic.MappingService.DeleteResult _result = ((SilverlightMappingToolBasic.MappingService.DeleteResult)(base.EndInvoke("DeleteRelationship", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteMetadata(SilverlightMappingToolBasic.MappingService.MetadataContext key, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = key;
                System.IAsyncResult _result = base.BeginInvoke("DeleteMetadata", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightMappingToolBasic.MappingService.DeleteResult EndDeleteMetadata(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightMappingToolBasic.MappingService.DeleteResult _result = ((SilverlightMappingToolBasic.MappingService.DeleteResult)(base.EndInvoke("DeleteMetadata", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginConnectNodes(System.Guid domainId, System.Collections.Generic.Dictionary<SilverlightMappingToolBasic.MappingService.SoapDescriptorType, System.Guid> nodes, SilverlightMappingToolBasic.MappingService.SoapRelationshipType relationshipType, string originalId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = domainId;
                _args[1] = nodes;
                _args[2] = relationshipType;
                _args[3] = originalId;
                System.IAsyncResult _result = base.BeginInvoke("ConnectNodes", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightMappingToolBasic.MappingService.ConnectedNodesResult EndConnectNodes(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightMappingToolBasic.MappingService.ConnectedNodesResult _result = ((SilverlightMappingToolBasic.MappingService.ConnectedNodesResult)(base.EndInvoke("ConnectNodes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateNodeMetadata(System.Guid domainId, System.Guid soapNodeId, System.Guid soapRelationshipId, SilverlightMappingToolBasic.MappingService.SoapDescriptorType soapDescriptorType, string metadataName, string metadataValue, SilverlightMappingToolBasic.MappingService.SoapMetadataType soapMetadataType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = domainId;
                _args[1] = soapNodeId;
                _args[2] = soapRelationshipId;
                _args[3] = soapDescriptorType;
                _args[4] = metadataName;
                _args[5] = metadataValue;
                _args[6] = soapMetadataType;
                System.IAsyncResult _result = base.BeginInvoke("UpdateNodeMetadata", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightMappingToolBasic.MappingService.SoapNode EndUpdateNodeMetadata(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightMappingToolBasic.MappingService.SoapNode _result = ((SilverlightMappingToolBasic.MappingService.SoapNode)(base.EndInvoke("UpdateNodeMetadata", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDomainNodeIds(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetDomainNodeIds", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<string, System.Guid> EndGetDomainNodeIds(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<string, System.Guid> _result = ((System.Collections.Generic.Dictionary<string, System.Guid>)(base.EndInvoke("GetDomainNodeIds", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDomainNodeId(System.Guid domainId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = domainId;
                System.IAsyncResult _result = base.BeginInvoke("GetDomainNodeId", _args, callback, asyncState);
                return _result;
            }
            
            public System.Guid EndGetDomainNodeId(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Guid _result = ((System.Guid)(base.EndInvoke("GetDomainNodeId", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDomainMapNodes(System.Guid domainId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = domainId;
                System.IAsyncResult _result = base.BeginInvoke("GetDomainMapNodes", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult EndGetDomainMapNodes(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult _result = ((SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult)(base.EndInvoke("GetDomainMapNodes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDomainMapNodesPaged(System.Guid domainId, int page, int pageSize, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = domainId;
                _args[1] = page;
                _args[2] = pageSize;
                System.IAsyncResult _result = base.BeginInvoke("GetDomainMapNodesPaged", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult EndGetDomainMapNodesPaged(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult _result = ((SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult)(base.EndInvoke("GetDomainMapNodesPaged", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllSoapTypes(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllSoapTypes", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<SilverlightMappingToolBasic.MappingService.SoapTypeElement> EndGetAllSoapTypes(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<SilverlightMappingToolBasic.MappingService.SoapTypeElement> _result = ((System.Collections.Generic.List<SilverlightMappingToolBasic.MappingService.SoapTypeElement>)(base.EndInvoke("GetAllSoapTypes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllNodes(System.Guid domainId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = domainId;
                System.IAsyncResult _result = base.BeginInvoke("GetAllNodes", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<System.Guid, SilverlightMappingToolBasic.MappingService.SoapNode> EndGetAllNodes(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<System.Guid, SilverlightMappingToolBasic.MappingService.SoapNode> _result = ((System.Collections.Generic.Dictionary<System.Guid, SilverlightMappingToolBasic.MappingService.SoapNode>)(base.EndInvoke("GetAllNodes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetNodes(System.Collections.Generic.Dictionary<System.Guid, System.Guid> nodeIds, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nodeIds;
                System.IAsyncResult _result = base.BeginInvoke("GetNodes", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<System.Guid, SilverlightMappingToolBasic.MappingService.SoapNode> EndGetNodes(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<System.Guid, SilverlightMappingToolBasic.MappingService.SoapNode> _result = ((System.Collections.Generic.Dictionary<System.Guid, SilverlightMappingToolBasic.MappingService.SoapNode>)(base.EndInvoke("GetNodes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRelatedNodes(System.Guid domainId, System.Guid nodeId, int depth, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = domainId;
                _args[1] = nodeId;
                _args[2] = depth;
                System.IAsyncResult _result = base.BeginInvoke("GetRelatedNodes", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult EndGetRelatedNodes(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult _result = ((SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult)(base.EndInvoke("GetRelatedNodes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetMapsNodes(System.Guid domainId, System.Guid mapNodeId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = domainId;
                _args[1] = mapNodeId;
                System.IAsyncResult _result = base.BeginInvoke("GetMapsNodes", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult EndGetMapsNodes(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult _result = ((SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult)(base.EndInvoke("GetMapsNodes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetContainerMapNodeId(System.Guid domainId, System.Guid nodeId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = domainId;
                _args[1] = nodeId;
                System.IAsyncResult _result = base.BeginInvoke("GetContainerMapNodeId", _args, callback, asyncState);
                return _result;
            }
            
            public System.Guid EndGetContainerMapNodeId(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Guid _result = ((System.Guid)(base.EndInvoke("GetContainerMapNodeId", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetNodesXmlQuery(string graphQueryXml, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = graphQueryXml;
                System.IAsyncResult _result = base.BeginInvoke("GetNodesXmlQuery", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult EndGetNodesXmlQuery(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult _result = ((SilverlightMappingToolBasic.MappingService.RelatedNodesSearchResult)(base.EndInvoke("GetNodesXmlQuery", _args, result)));
                return _result;
            }
        }
    }
}
